{"classmap": {"YAHOO.widget.Panel": {"name": "YAHOO.widget.Panel", "configs": {"keylisteners": {"default": "null", "type": "YAHOO.util.KeyListener[]", "description": "A KeyListener (or array of KeyListeners) that will be enabled \nwhen the Panel is shown, and disabled when the Panel is hidden."}, "draggable": {"default": "true", "type": "Boolean", "description": "Boolean specifying if the Panel should be draggable.  The default \nvalue is \"true\" if the Drag and Drop utility is included, \notherwise it is \"false.\" <strong>PLEASE NOTE:<\/strong> There is a \nknown issue in IE 6 (Strict Mode and Quirks Mode) and IE 7 \n(Quirks Mode) where Panels that either don't have a value set for \ntheir \"width\" configuration property, or their \"width\" \nconfiguration property is set to \"auto\" will only be draggable by\nplacing the mouse on the text of the Panel's header element.\nTo fix this bug, draggable Panels missing a value for their \n\"width\" configuration property, or whose \"width\" configuration \nproperty is set to \"auto\" will have it set to the value of \ntheir root HTML element's offsetWidth before they are made \nvisible.  The calculated width is then removed when the Panel is   \nhidden. <em>This fix is only applied to draggable Panels in IE 6 \n(Strict Mode and Quirks Mode) and IE 7 (Quirks Mode)<\/em>. For \nmore information on this issue see:\nSourceForge bugs #1726972 and #1589210."}, "dragOnly": {"default": "false", "type": "Boolean", "description": "Boolean specifying if the draggable Panel should be drag only, not interacting with drop \ntargets on the page.\n<p>\nWhen set to true, draggable Panels will not check to see if they are over drop targets,\nor fire the DragDrop events required to support drop target interaction (onDragEnter, \nonDragOver, onDragOut, onDragDrop etc.).\nIf the Panel is not designed to be dropped on any target elements on the page, then this \nflag can be set to true to improve performance.\n<\/p>\n<p>\nWhen set to false, all drop target related events will be fired.\n<\/p>\n<p>\nThe property is set to false by default to maintain backwards compatibility but should be \nset to true if drop target interaction is not required for the Panel, to improve performance.<\/p>"}, "modal": {"default": "false", "type": "Boolean", "description": "True if the Panel should be displayed in a modal fashion, \nautomatically creating a transparent mask over the document that\nwill not be removed until the Panel is dismissed."}, "close": {"default": "true", "type": "Boolean", "description": "True if the Panel should display a \"close\" button"}, "underlay": {"default": "shadow", "type": "String", "description": "Sets the type of underlay to display for the Panel. Valid values \nare \"shadow,\" \"matte,\" and \"none\".  <strong>PLEASE NOTE:<\/strong> \nThe creation of the underlay element is deferred until the Panel \nis initially made visible.  For Gecko-based browsers on Mac\nOS X the underlay elment is always created as it is used as a \nshim to prevent Aqua scrollbars below a Panel instance from poking \nthrough it (See SourceForge bug #836476)."}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the Panel <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Panel"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal containing \nthe configuration that should be set for this Panel. See configuration \ndocumentation for more details."}], "description": "Panel is an implementation of Overlay that behaves like an OS window, \nwith a draggable header and an optional close icon at the top right."}], "namespace": "YAHOO.widget", "module": "container", "events": {"showMaskEvent": {"description": "CustomEvent fired after the modality mask is shown", "guessedname": "showMaskEvent", "guessedtype": "property"}, "dragEvent": {"description": "CustomEvent when the Panel is dragged", "guessedname": "dragEvent", "guessedtype": "property"}, "hideMaskEvent": {"description": "CustomEvent fired after the modality mask is hidden", "guessedname": "hideMaskEvent", "guessedtype": "property"}}, "guessedname": "Panel", "methods": {"configClose": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"close\" property is changed.\nThe method controls the appending or hiding of the close icon at the \ntop right of the Panel.", "guessedname": "configClose", "guessedtype": "function"}, "render": {"return": {"type": "boolean", "description": "Success or failure of the render"}, "params": [{"type": "String", "name": "appendToNode", "description": " The element id to which the Module \nshould be appended to prior to rendering <em>OR<\/em>"}, {"type": "HTMLElement", "name": "appendToNode", "description": " The element to which the Module \nshould be appended to prior to rendering"}], "description": "Renders the Panel by inserting the elements that are not already in \nthe main Panel into their correct places. Optionally appends the \nPanel to the specified node prior to the render's execution. NOTE: \nFor Panels without existing markup, the appendToNode argument is \nREQUIRED. If this argument is ommitted and the current element is \nnot present in the document, the function will return false, \nindicating that the render was a failure.", "guessedname": "render", "guessedtype": "function"}, "stackMask": {"description": "Sets the zindex of the mask, if it exists, based on the zindex of \nthe Panel element. The zindex of the mask is set to be one less \nthan the Panel element's zindex.\n<p>NOTE: This method will not bump up the zindex of the Panel\nto ensure that the mask has a non-negative zindex. If you require the\nmask zindex to be 0 or higher, the zindex of the Panel \nshould be set to a value higher than 0, before this method is called.\n<\/p>", "guessedname": "stackMask", "guessedtype": "function"}, "hideMask": {"description": "Hides the modality mask.", "guessedname": "hideMask", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Module which are fired \nautomatically at appropriate times by the Module class.", "guessedname": "initEvents", "guessedtype": "function"}, "configModal": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"modal\" property is \nchanged. This handler subscribes or unsubscribes to the show and hide\nevents to handle the display or hide of the modality mask.", "guessedname": "configModal", "guessedtype": "function"}, "configKeyListeners": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration\nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"keylisteners\" property \nis changed.", "guessedname": "configKeyListeners", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the Overlay <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal \ncontaining the configuration that should be set for this Overlay. \nSee configuration documentation for more details."}], "description": "The Overlay initialization method, which is executed for Overlay and \nall of its subclasses. This method is automatically called by the \nconstructor, and  sets up all DOM references for pre-existing markup, \nand creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Panel."}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "buildWrapper": {"description": "Builds the wrapping container around the Panel that is used for \npositioning the shadow and matte underlays. The container element is \nassigned to a  local instance variable called container, and the \nelement is reinserted inside of it.", "guessedname": "buildWrapper", "guessedtype": "function"}, "destroy": {"description": "Removes the Panel element from the DOM and sets all child elements\nto null.", "guessedname": "destroy", "guessedtype": "function"}, "removeMask": {"description": "Removes the modality mask.", "guessedname": "removeMask", "guessedtype": "function"}, "configHeight": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"height\" property is changed.", "guessedname": "configHeight", "guessedtype": "function"}, "showMask": {"description": "Shows the modality mask.", "guessedname": "showMask", "guessedtype": "function"}, "registerDragDrop": {"description": "Registers the Panel's header for drag & drop capability.", "guessedname": "registerDragDrop", "guessedtype": "function"}, "configUnderlay": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"underlay\" property \nis changed.", "guessedname": "configUnderlay", "guessedtype": "function"}, "buildMask": {"description": "Builds the mask that is laid over the document when the Panel is \nconfigured to be modal.", "guessedname": "buildMask", "guessedtype": "function"}, "configWidth": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"width\" property is changed.", "guessedname": "configWidth", "guessedtype": "function"}, "configDraggable": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"draggable\" property \nis changed.", "guessedname": "configDraggable", "guessedtype": "function"}, "sizeMask": {"description": "Sets the size of the modality mask to cover the entire scrollable \narea of the document", "guessedname": "sizeMask", "guessedtype": "function"}, "configzIndex": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"zIndex\" property is changed.", "guessedname": "configzIndex", "guessedtype": "function"}, "sizeUnderlay": {"description": "Adjusts the size of the shadow based on the size of the element.", "guessedname": "sizeUnderlay", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed \nusing the Panel's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "Panel.js", "guessedtype": "function", "shortname": "Panel", "properties": {"YAHOO.widget.Panel.CSS_PANEL_CONTAINER": {"description": "Constant representing the default CSS class used for a Panel's \nwrapping container", "static": "", "guessedname": "CSS_PANEL_CONTAINER", "guessedtype": "property", "type": "String", "final": ""}, "EVENT_TYPES": {"description": "Constant representing the name of the Panel's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "DEFAULT_CONFIG": {"description": "Constant representing the Panel's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "YAHOO.widget.Panel.CSS_PANEL": {"description": "Constant representing the default CSS class used for a Panel", "static": "", "guessedname": "CSS_PANEL", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Panel is an implementation of Overlay that behaves like an OS window, \nwith a draggable header and an optional close icon at the top right."}, "YAHOO.util.KeyListener": {"name": "YAHOO.util.KeyListener", "knownissue": "the \"keypress\" event is completely broken in Safari 2.x and below.\nthe workaround is use \"keydown\" for key listening.  However, if\nit is desired to prevent the default behavior of the keystroke,\nthat can only be done on the keypress event.  This makes key\nhandling quite ugly.", "constructors": [{"params": [{"type": "HTMLElement", "name": "attachTo", "description": " The element or element ID to which the key \nevent should be attached"}, {"type": "String", "name": "attachTo", "description": " The element or element ID to which the key\nevent should be attached"}, {"type": "Object", "name": "keyData", "description": "  The object literal representing the key(s) \nto detect. Possible attributes are \nshift(boolean), alt(boolean), ctrl(boolean) \nand keys(either an int or an array of ints \nrepresenting keycodes)."}, {"type": "Function", "name": "handler", "description": "  The CustomEvent handler to fire when the \nkey event is detected"}, {"type": "Object", "name": "handler", "description": "  An object literal representing the handler."}, {"type": "String", "name": "event", "description": "    Optional. The event (keydown or keyup) to \nlisten for. Defaults automatically to keydown."}], "description": "KeyListener is a utility that provides an easy interface for listening for\nkeydown\/keyup events fired against DOM elements."}], "namespace": "YAHOO.util", "module": "event", "properties": {"YAHOO.util.KeyListener.KEYDOWN": {"description": "Constant representing the DOM \"keydown\" event.", "static": "", "guessedname": "KEYDOWN", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.util.KeyListener.KEYUP": {"description": "Constant representing the DOM \"keyup\" event.", "static": "", "guessedname": "KEYUP", "guessedtype": "property", "type": "String", "final": ""}, "enabled": {"type": "Boolean", "description": "Boolean indicating the enabled\/disabled state of the Tooltip", "guessedname": "enabled", "guessedtype": "property"}, "KEY": {"final": "", "static": "", "description": "keycode constants for a subset of the special keys", "guessedname": "KEY", "guessedtype": "property"}}, "guessedname": "KeyListener", "methods": {"handleKeyPress": {"params": [{"type": "DOMEvent", "name": "e", "description": "   The keypress DOM event"}, {"type": "Object", "name": "obj", "description": " The DOM event scope object"}], "description": "Handles the key event when a key is pressed.", "private": ""}, "enable": {"description": "Enables the KeyListener by attaching the DOM event listeners to the \ntarget DOM element", "guessedname": "enable", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the KeyListener"}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "disable": {"description": "Disables the KeyListener by removing the DOM event listeners from the \ntarget DOM element", "guessedname": "disable", "guessedtype": "function"}}, "file": "KeyListener.js", "guessedtype": "function", "shortname": "KeyListener", "events": {"enabledEvent": {"params": [{"type": "Object", "name": "keyData", "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."}], "description": "The CustomEvent fired when the KeyListener is enabled via the enable() \nfunction", "guessedname": "enabledEvent", "guessedtype": "property"}, "disabledEvent": {"params": [{"type": "Object", "name": "keyData", "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."}], "description": "The CustomEvent fired when the KeyListener is disabled via the \ndisable() function", "guessedname": "disabledEvent", "guessedtype": "property"}, "keyEvent": {"guessedname": "keyEvent", "params": [{"type": "Object", "name": "keyData", "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."}], "description": "The CustomEvent fired internally when a key is pressed", "private": "", "guessedtype": "property"}}, "description": "KeyListener is a utility that provides an easy interface for listening for\nkeydown\/keyup events fired against DOM elements."}, "YAHOO.util.CustomEvent": {"name": "YAHOO.util.CustomEvent", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires"}, {"type": "Object", "name": "oScope", "description": " The context the event will fire from.  \"this\" will\nrefer to this object in the callback.  Default value: \nthe window object.  The listener can override this."}, {"type": "boolean", "name": "silent", "description": " pass true to prevent the event from writing to\nthe debugsystem"}, {"type": "int", "name": "signature", "description": " the signature that the custom event subscriber\nwill receive. YAHOO.util.CustomEvent.LIST or \nYAHOO.util.CustomEvent.FLAT.  The default is\nYAHOO.util.CustomEvent.LIST."}], "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "YAHOO.util", "module": "event", "events": {"subscribeEvent": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Function", "name": "fn", "description": " The function to execute"}, {"type": "Object", "name": "obj", "description": " An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution scope of the listener.\nif an object, that object becomes the\nthe execution scope."}], "description": "Custom events provide a custom event that fires whenever there is\na new subscriber to the event.  This provides an opportunity to\nhandle the case where there is a non-repeating event that has\nalready fired has a new subscriber.", "guessedname": "subscribeEvent", "guessedtype": "property"}}, "guessedname": "CustomEvent", "methods": {"_delete": {"private": "", "guessedname": "_delete", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "false if one of the subscribers returned false, \ntrue otherwise"}, "params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to \nthe handler."}], "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the scope specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event<\/li>\n<li>All of the arguments fire() was executed with as an array<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed"}, "description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "subscribe": {"params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}, {"type": "Object", "name": "obj", "description": "       An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution scope of the listener.\nif an object, that object becomes the\nthe execution scope."}], "description": "Subscribes the caller to this event", "guessedname": "subscribe", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "True if the subscriber was found and detached."}, "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed"}, {"type": "Object", "name": "obj", "description": "  The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes subscribers.", "guessedname": "unsubscribe", "guessedtype": "function"}}, "file": "CustomEvent.js", "guessedtype": "function", "shortname": "CustomEvent", "properties": {"silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build, set silent\nto true to disable debug outpu for this event.", "guessedname": "silent", "guessedtype": "property"}, "YAHOO.util.CustomEvent.FLAT": {"type": "int", "static": "", "description": "Subscriber listener sigature constant.  The FLAT type returns two\nparameters: the first argument passed to fire and the optional \ncustom object", "guessedname": "FLAT", "guessedtype": "property"}, "subscribers": {"type": "Subscriber[]", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "signature": {"type": "int", "description": "Custom events support two styles of arguments provided to the event\nsubscribers.  \n<ul>\n<li>YAHOO.util.CustomEvent.LIST: \n<ul>\n<li>param1: event name<\/li>\n<li>param2: array of arguments sent to fire<\/li>\n<li>param3: <optional> a custom object supplied by the subscriber<\/li>\n<\/ul>\n<\/li>\n<li>YAHOO.util.CustomEvent.FLAT\n<ul>\n<li>param1: the first argument passed to fire.  If you need to\npass multiple parameters, use and array or object literal<\/li>\n<li>param2: <optional> a custom object supplied by the subscriber<\/li>\n<\/ul>\n<\/li>\n<\/ul>", "guessedname": "signature", "guessedtype": "property"}, "YAHOO.util.CustomEvent.LIST": {"type": "int", "static": "", "description": "Subscriber listener sigature constant.  The LIST type returns three\nparameters: the event type, the array of args passed to fire, and\nthe optional custom object", "guessedname": "LIST", "guessedtype": "property"}, "scope": {"type": "object", "description": "The scope the the event will fire from by default.  Defaults to the window \nobj", "guessedname": "scope", "guessedtype": "property"}, "lastError": {"type": "Error", "description": "In order to make it possible to execute the rest of the subscriber\nstack when one thows an exception, the subscribers exceptions are\ncaught.  The most recent exception is stored in this property", "guessedname": "lastError", "guessedtype": "property"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}}, "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}, "YAHOO.widget.PieChart": {"name": "YAHOO.widget.PieChart", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "PieChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "events": {"dataFieldChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "dataFieldChangeEvent", "description": "Fires when the value for the configuration attribute 'dataField' changes."}, "beforeCategoryfieldChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeCategoryfieldChangeEvent", "description": "Fires before the value for the configuration attribute 'categoryField' changes. Return false to cancel the attribute change."}, "categoryFieldChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "categoryFieldChangeEvent", "description": "Fires when the value for the configuration attribute 'categoryField' changes."}, "beforeDatafieldChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDatafieldChangeEvent", "description": "Fires before the value for the configuration attribute 'dataField' changes. Return false to cancel the attribute change."}}, "guessedname": "PieChart", "methods": {"_setDataField": {"private": "", "description": "Setter for the dataField attribute.", "guessedname": "_setDataField", "guessedtype": "function"}, "_setCategoryField": {"private": "", "description": "Setter for the categoryField attribute.", "guessedname": "_setCategoryField", "guessedtype": "function"}, "_getCategoryField": {"private": "", "description": "Getter for the categoryField attribute.", "guessedname": "_getCategoryField", "guessedtype": "function"}, "_initAttributes": {"private": "", "description": "Initializes the attributes.", "guessedname": "_initAttributes", "guessedtype": "function"}, "_getDataField": {"private": "", "description": "Getter for the dataField attribute.", "guessedname": "_getDataField", "guessedtype": "function"}}, "uses": ["YAHOO.widget.CartesianChart"], "file": "PieChart.js", "guessedtype": "function", "shortname": "PieChart", "configs": {"categoryField": {"type": "String", "description": "The field in each item that corresponds to the category value."}, "dataField": {"type": "String", "description": "The field in each item that corresponds to the data value."}}, "description": "PieChart class for the YUI Charts widget."}, "YAHOO.util.Config": {"name": "YAHOO.util.Config", "constructors": [{"params": [{"type": "Object", "name": "owner", "description": " The owner Object to which this Config Object belongs"}], "description": "Config is a utility used within an Object to allow the implementer to\nmaintain a list of local configuration properties and listen for changes \nto those properties dynamically using CustomEvent. The initial values are \nalso maintained so that the configuration can be reset at any given point \nto its initial state."}], "namespace": "YAHOO.util", "module": "container", "events": {"configChangedEvent": {"description": "Custom Event, notifying subscribers when Config properties are set \n(setProperty is called without the silent flag", "guessedname": "configChangedEvent", "guessedtype": "property"}}, "guessedname": "Config", "methods": {"fireQueue": {"description": "Fires the normalized list of queued property change events", "guessedname": "fireQueue", "guessedtype": "function"}, "YAHOO.util.Config.alreadySubscribed": {"return": {"type": "Boolean", "description": "true, if the function\/Object pair is already subscribed \nto the CustomEvent passed in"}, "description": "Checks to determine if a particular function\/Object pair are already \nsubscribed to the specified CustomEvent", "static": "", "guessedname": "alreadySubscribed", "guessedtype": "function", "params": [{"type": "YAHOO.util.CustomEvent", "name": "evt", "description": " The CustomEvent for which to check \nthe subscriptions"}, {"type": "Function", "name": "fn", "description": " The function to look for in the subscribers list"}, {"type": "Object", "name": "obj", "description": " The execution scope Object for the subscription"}]}, "getProperty": {"return": {"type": "Object", "description": "The value of the specified property"}, "params": [{"type": "String", "name": "key", "description": " The name of the property"}], "description": "Returns the value of specified property.", "guessedname": "getProperty", "guessedtype": "function"}, "addProperty": {"params": [{"type": "String", "name": "key", "description": " The configuration property's name"}, {"type": "Object", "name": "propertyObject", "description": " The Object containing all of this \nproperty's arguments"}], "description": "Adds a property to the Config Object's private config hash.", "guessedname": "addProperty", "guessedtype": "function"}, "queueProperty": {"return": {"type": "Boolean", "description": "true, if the set was successful, false if \nit failed."}, "params": [{"type": "String", "name": "key", "description": " The name of the property"}, {"type": "String", "name": "value", "description": " The value to set the property to"}], "description": "Sets the value of a property and queues its event to execute. If the \nevent is already scheduled to execute, it is\nmoved from its current position to the end of the queue.", "guessedname": "queueProperty", "guessedtype": "function"}, "checkNumber": {"return": {"type": "Boolean", "description": "true, if the value is valid"}, "params": [{"type": "Object", "name": "val", "description": " The value to validate"}], "description": "Validates that the value passed in is a number.", "guessedname": "checkNumber", "guessedtype": "function"}, "outputEventQueue": {"return": {"type": "String", "description": "The string list of CustomEvents currently queued \nfor execution"}, "description": "Returns a string representation of the Config object's current \nCustomEvent queue", "guessedname": "outputEventQueue", "guessedtype": "function"}, "resetProperty": {"return": {"type": "Boolean", "description": "True is the property was reset, false if not"}, "params": [{"type": "String", "name": "key", "description": " The name of the property"}], "description": "Resets the specified property's value to its initial value.", "guessedname": "resetProperty", "guessedtype": "function"}, "applyConfig": {"params": [{"type": "Object", "name": "userConfig", "description": " The configuration Object literal"}, {"type": "Boolean", "name": "init", "description": "  When set to true, the initialConfig will \nbe set to the userConfig passed in, so that calling a reset will \nreset the properties to the passed values."}], "description": "Applies a key-value Object literal to the configuration, replacing  \nany existing values, and queueing the property events.\nAlthough the values will be set, fireQueue() must be called for their \nassociated events to execute.", "guessedname": "applyConfig", "guessedtype": "function"}, "refresh": {"description": "Refires the events for all configuration properties using their \ncurrent values.", "guessedname": "refresh", "guessedtype": "function"}, "subscribeToConfigEvent": {"return": {"type": "Boolean", "description": "True, if the subscription was successful, \notherwise false."}, "params": [{"type": "String", "name": "key", "description": " The property name"}, {"type": "Function", "name": "handler", "description": " The handler function to use subscribe to \nthe property's event"}, {"type": "Object", "name": "obj", "description": " The Object to use for scoping the event handler \n(see CustomEvent documentation)"}, {"type": "Boolean", "name": "override", "description": " Optional. If true, will override \"this\"  \nwithin the handler to map to the scope Object passed into the method."}], "description": "Subscribes an external handler to the change event for any \ngiven property.", "guessedname": "subscribeToConfigEvent", "guessedtype": "function"}, "checkBoolean": {"return": {"type": "Boolean", "description": "true, if the value is valid"}, "params": [{"type": "Object", "name": "val", "description": " The value to validate"}], "description": "Validates that the value passed in is a Boolean.", "guessedname": "checkBoolean", "guessedtype": "function"}, "init": {"params": [{"type": "Object", "name": "owner", "description": " The owner Object to which this Config \nObject belongs"}], "description": "Initializes the configuration Object and all of its local members.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The Config object in string format."}, "description": "Returns a string representation of the Config object", "guessedname": "toString", "guessedtype": "function"}, "refireEvent": {"params": [{"type": "String", "name": "key", "description": " The name of the property"}], "description": "Fires the event for a property using the property's current value.", "guessedname": "refireEvent", "guessedtype": "function"}, "getConfig": {"return": {"type": "Object", "description": "The current config, represented in a key-value map"}, "description": "Returns a key-value configuration map of the values currently set in  \nthe Config Object.", "guessedname": "getConfig", "guessedtype": "function"}, "setProperty": {"return": {"type": "Boolean", "description": "True, if the set was successful, false if it failed."}, "params": [{"type": "String", "name": "key", "description": " The name of the property"}, {"type": "String", "name": "value", "description": " The value to set the property to"}, {"type": "Boolean", "name": "silent", "description": " Whether the value should be set silently, \nwithout firing the property event."}], "description": "Sets the value of a property. If the silent property is passed as \ntrue, the property's event will not be fired.", "guessedname": "setProperty", "guessedtype": "function"}, "destroy": {"description": "Sets all properties to null, unsubscribes all listeners from each \nproperty's change event and all listeners from the configChangedEvent.", "guessedname": "destroy", "guessedtype": "function"}, "fireEvent": {"guessedname": "fireEvent", "params": [{"type": "String", "name": "key", "description": " The configuration property's name"}, {"type": "value", "name": "Object", "description": " The value of the correct type for the property"}], "description": "Fires a configuration property event using the specified value.", "private": "", "guessedtype": "function"}, "unsubscribeFromConfigEvent": {"return": {"type": "Boolean", "description": "True, if the unsubscription was successful, \notherwise false."}, "params": [{"type": "String", "name": "key", "description": " The property name"}, {"type": "Function", "name": "handler", "description": " The handler function to use subscribe to \nthe property's event"}, {"type": "Object", "name": "obj", "description": " The Object to use for scoping the event \nhandler (see CustomEvent documentation)"}], "description": "Unsubscribes an external handler from the change event for any \ngiven property.", "guessedname": "unsubscribeFromConfigEvent", "guessedtype": "function"}}, "file": "Config.js", "guessedtype": "function", "shortname": "Config", "properties": {"YAHOO.util.Config.CONFIG_CHANGED_EVENT": {"description": "Constant representing the CustomEvent type for the config changed event.", "private": "", "static": "", "guessedname": "CONFIG_CHANGED_EVENT", "guessedtype": "property", "final": ""}, "eventQueue": {"guessedname": "eventQueue", "type": "Object", "description": "Maintains the local, normalized CustomEvent queue", "private": "", "guessedtype": "property"}, "owner": {"type": "Object", "description": "Object reference to the owner of this Config Object", "guessedname": "owner", "guessedtype": "property"}, "queueInProgress": {"type": "Boolean", "description": "Boolean flag that specifies whether a queue is currently \nbeing executed", "guessedname": "queueInProgress", "guessedtype": "property"}, "initialConfig": {"guessedname": "initialConfig", "type": "Object", "description": "Maintains the local collection of configuration property objects as \nthey were initially applied.\nThis object is used when resetting a property.", "private": "", "guessedtype": "property"}, "config": {"guessedname": "config", "type": "Object", "description": "Maintains the local collection of configuration property objects and \ntheir specified values", "private": "", "guessedtype": "property"}, "YAHOO.util.Config.BOOLEAN_TYPE": {"description": "Constant representing the boolean type string", "private": "", "static": "", "guessedname": "BOOLEAN_TYPE", "guessedtype": "property", "final": ""}}, "description": "Config is a utility used within an Object to allow the implementer to\nmaintain a list of local configuration properties and listen for changes \nto those properties dynamically using CustomEvent. The initial values are \nalso maintained so that the configuration can be reset at any given point \nto its initial state."}, "YAHOO.widget.Node": {"name": "YAHOO.widget.Node", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded\/collapsed state"}], "description": "The base class for all tree nodes.  The node's presentation and behavior in\nresponse to mouse events is handled in Node subclasses."}], "namespace": "YAHOO.widget", "module": "treeview", "events": {"parentChange": {"type": "CustomEvent", "description": "The parentChange event is fired when a parent element is applied\nto the node.  This is useful if you need to apply tree-level\nproperties to a tree that need to happen if a node is moved from\none tree to another."}}, "guessedname": "Node", "methods": {"appendChild": {"return": {"type": "Node", "description": "the child node"}, "description": "Appends a node to the child collection.", "private": "", "params": [{"type": "Node", "name": "childNode", "description": "  the new node"}], "guessedname": "appendChild", "guessedtype": "function"}, "setDynamicLoad": {"params": [{"type": "function", "name": "fmDataLoader", "description": "  the function that will be used to get the data."}, {"type": "int", "name": "iconMode", "description": "  configures the icon that is displayed when a dynamic\nload node is expanded the first time without children.  By default, the \n\"collapse\" icon will be used.  If set to 1, the leaf node icon will be\ndisplayed."}], "description": "Configures this node for dynamically obtaining the child data\nwhen the node is first expanded.  Calling it without the callback\nwill turn off dynamic load for the node.", "guessedname": "setDynamicLoad", "guessedtype": "function"}, "getChildrenEl": {"return": {"type": "HTMLElement", "description": "this node's children div"}, "description": "Returns the div that was generated for this node's children", "guessedname": "getChildrenEl", "guessedtype": "function"}, "toggle": {"description": "Expands if node is collapsed, collapses otherwise.", "guessedname": "toggle", "guessedtype": "function"}, "collapse\ntoggle style.": {"description": "Hides this nodes children (creating them if necessary), changes the", "guessedname": "collapse", "guessedtype": "function"}, "getToggleEl": {"return": {"type": "HTMLElement", "description": "this node's toggle html element"}, "description": "Returns the element that is being used for this node's toggle.", "guessedname": "getToggleEl", "guessedtype": "function"}, "getHtml": {"return": {"type": "string", "description": "the markup for this node and its expanded children."}, "description": "Returns the markup for this node and its children.", "guessedname": "getHtml", "guessedtype": "function"}, "insertBefore": {"return": {"type": "Node", "description": "the inserted node"}, "params": [{"type": "Node", "name": "node", "description": "  the node to insert this node before"}], "description": "Inserts this node before this supplied node", "guessedname": "insertBefore", "guessedtype": "function"}, "hasChildren": {"return": {"type": "boolean", "description": "true if this has children or if it might and we are\nchecking for this condition."}, "params": [{"type": "boolean", "name": "checkForLazyLoad", "description": "  should we check for unloaded children?"}], "description": "Checks if this node has children.  If this node is lazy-loading and the\nchildren have not been rendered, we do not know whether or not there\nare actual children.  In most cases, we need to assume that there are\nchildren (for instance, the toggle needs to show the expandable \npresentation state).  In other times we want to know if there are rendered\nchildren.  For the latter, \"checkForLazyLoad\" should be false.", "guessedname": "hasChildren", "guessedtype": "function"}, "isDynamic": {"return": {"type": "boolean", "description": "true if this node's children are to be loaded dynamically"}, "description": "Evaluates if this node's children should be loaded dynamically.  Looks for\nthe property both in this instance and the root node.  If the tree is\ndefined to load all children dynamically, the data callback function is\ndefined in the root node", "guessedname": "isDynamic", "guessedtype": "function"}, "init": {"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded\/collapsed state"}], "description": "Initializes this node, gets some of the properties from the parent", "guessedname": "init", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "the container html element"}, "description": "Returns this node's container html element", "guessedname": "getEl", "guessedtype": "function"}, "appendTo": {"return": {"type": "Node", "description": "The appended node"}, "params": [{"type": "Node", "name": "parentNode", "description": "  the node to append to."}], "description": "Appends this node to the supplied node's child collection", "guessedname": "appendTo", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the node"}, "description": "Node toString", "guessedname": "toString", "guessedtype": "function"}, "showChildren": {"description": "Shows this node's children", "guessedname": "showChildren", "guessedtype": "function"}, "insertAfter": {"return": {"type": "Node", "description": "the inserted node"}, "params": [{"type": "Node", "name": "node", "description": "  the node to insert after"}], "description": "Inserts this node after the supplied node", "guessedname": "insertAfter", "guessedtype": "function"}, "getChildrenElId": {"return": {"type": "string", "description": "the element id for this node's children div"}, "description": "Returns the id for this node's children div", "guessedname": "getChildrenElId", "guessedtype": "function"}, "getDepthStyle": {"return": {"type": "string", "description": "the css class for the spacer"}, "params": [{"type": "int", "name": "depth", "description": " the depth of the ancestor."}], "description": "Returns the css class for the spacer at the specified depth for\nthis node.  If this node's ancestor at the specified depth\nhas a next sibling the presentation is different than if it\ndoes not have a next sibling", "guessedname": "getDepthStyle", "guessedtype": "function"}, "expandAll": {"description": "Recursively expands all of this node's children.", "guessedname": "expandAll", "guessedtype": "function"}, "getToggleLink": {"return": {"type": "string", "description": "the javascript url for toggling this node"}, "description": "Generates the link that will invoke this node's toggle method", "guessedname": "getToggleLink", "guessedtype": "function"}, "getSiblings": {"return": {"type": "", "description": "Node[]"}, "description": "Returns a node array of this node's siblings, null if none.", "guessedname": "getSiblings", "guessedtype": "function"}, "getStyle": {"return": {"type": "string", "description": "the css class for this node's toggle"}, "description": "Returns the css style name for the toggle", "guessedname": "getStyle", "guessedtype": "function"}, "getNodeHtml": {"return": {"type": "string", "description": "The HTML that will render this node."}, "description": "Get the markup for the node.  This is designed to be overrided so that we can\nsupport different types of nodes.", "guessedname": "getNodeHtml", "guessedtype": "function"}, "getIconMode": {"return": {"type": "int", "description": "0 for collapse style, 1 for leaf node style"}, "description": "Returns the current icon mode.  This refers to the way childless dynamic\nload nodes appear.", "guessedname": "getIconMode", "guessedtype": "function"}, "hideChildren": {"description": "Hides this node's children", "guessedname": "hideChildren", "guessedtype": "function"}, "getAncestor": {"return": {"type": "Node", "description": "the ancestor"}, "params": [{"type": "int", "name": "depth", "description": " the depth of the ancestor."}], "description": "Returns this node's ancestor at the specified depth.", "guessedname": "getAncestor", "guessedtype": "function"}, "loadComplete": {"description": "Load complete is the callback function we pass to the data provider\nin dynamic load situations.", "guessedname": "loadComplete", "guessedtype": "function"}, "expand": {"description": "Shows this nodes children (creating them if necessary), changes the\ntoggle style, and collapses its siblings if multiExpand is not set.", "guessedname": "expand", "guessedtype": "function"}, "getElId": {"return": {"type": "string", "description": "the element id"}, "description": "Returns the id for this node's container div", "guessedname": "getElId", "guessedtype": "function"}, "isRoot": {"return": {"type": "boolean", "description": "true if this is the root node"}, "description": "Evaluates if this node is the root node of the tree", "guessedname": "isRoot", "guessedtype": "function"}, "completeRender": {"return": {"type": "string", "description": "children html"}, "description": "Called when we know we have all the child data.", "guessedname": "completeRender", "guessedtype": "function"}, "isChildOf": {"return": {"type": "boolean", "description": "The node index if this Node is a child of \nsupplied Node, else -1."}, "description": "Returns true if the Node is a child of supplied Node", "private": "", "params": [{"type": "Node", "name": "parentNode", "description": "  the Node to check"}], "guessedname": "isChildOf", "guessedtype": "function"}, "getChildrenHtml": {"guessedname": "getChildrenHtml", "return": {"type": "string", "description": "the children container div html and any expanded children"}, "description": "Called when first rendering the tree.  We always build the div that will\ncontain this nodes children, but we don't render the children themselves\nunless this node is expanded.", "private": "", "guessedtype": "function"}, "refresh": {"description": "Regenerates the html for this node and its children.  To be used when the\nnode is expanded and new children have been added.", "guessedname": "refresh", "guessedtype": "function"}, "getToggleElId": {"return": {"type": "string", "description": "the toggel element id"}, "description": "Returns the id for this node's toggle element", "guessedname": "getToggleElId", "guessedtype": "function"}, "renderChildren": {"guessedname": "renderChildren", "return": {"type": "string", "description": "the html for this node's children"}, "description": "Generates the markup for the child nodes.  This is not done until the node\nis expanded.", "private": "", "guessedtype": "function"}, "getHoverStyle": {"return": {"type": "string", "description": "the css class hover state"}, "description": "Returns the hover style for the icon", "guessedname": "getHoverStyle", "guessedtype": "function"}, "collapseAll": {"description": "Recursively collapses all of this node's children.", "guessedname": "collapseAll", "guessedtype": "function"}, "applyParent": {"return": {"type": "boolean", "description": "true if the application was successful"}, "params": [{"type": "Node", "name": "parentNode", "description": " this node's parent node"}], "description": "Certain properties for the node cannot be set until the parent\nis known. This is called after the node is inserted into a tree.\nthe parent is also applied to this node's children in order to\nmake it possible to move a branch from one tree to another.", "guessedname": "applyParent", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "Node.js", "guessedtype": "function", "shortname": "Node", "properties": {"childrenRendered": {"type": "boolean", "description": "This flag is set to true when the html is generated for this node's\nchildren, and set to false when new children are added.", "guessedname": "childrenRendered", "guessedtype": "property"}, "nextSibling": {"type": "Node", "description": "This node's next sibling", "guessedname": "nextSibling", "guessedtype": "property"}, "renderHidden": {"type": "boolean", "description": "Should we render children for a collapsed node?  It is possible that the\nimplementer will want to render the hidden data...  @todo verify that we \nneed this, and implement it if we do.", "guessedname": "renderHidden", "guessedtype": "property"}, "iconMode": {"type": "int", "description": "Used to configure what happens when a dynamic load node is expanded\nand we discover that it does not have children.  By default, it is\ntreated as if it still could have children (plus\/minus icon).  Set\niconMode to have it display like a leaf node instead.", "guessedname": "iconMode", "guessedtype": "property"}, "href": {"type": "string", "description": "The href for the node's label.  If one is not specified, the href will\nbe set so that it toggles the node.", "guessedname": "href", "guessedtype": "property"}, "isLoading": {"type": "boolean", "description": "This is true for dynamically loading nodes while waiting for the\ncallback to return.", "guessedname": "isLoading", "guessedtype": "property"}, "nowrap": {"default": "false", "type": "boolean", "description": "Specifies whether or not the content area of the node should be allowed\nto wrap.", "guessedname": "nowrap", "guessedtype": "property"}, "children": {"type": "Node[]", "description": "This node's child node collection.", "guessedname": "children", "guessedtype": "property"}, "multiExpand": {"type": "boolean", "description": "Can multiple children be expanded at once?", "guessedname": "multiExpand", "guessedtype": "property"}, "index": {"type": "int", "description": "The index for this instance obtained from global counter in YAHOO.widget.TreeView.", "guessedname": "index", "guessedtype": "property"}, "_dynLoad": {"guessedname": "_dynLoad", "type": "boolean", "description": "We can set the node up to call an external method to get the child\ndata dynamically.", "private": "", "guessedtype": "property"}, "previousSibling": {"type": "Node", "description": "This node's previous sibling", "guessedname": "previousSibling", "guessedtype": "property"}, "_type": {"private": "", "description": "The node type", "guessedname": "_type", "guessedtype": "property"}, "parent": {"type": "Node", "description": "Parent node", "guessedname": "parent", "guessedtype": "property"}, "dataLoader": {"type": "function", "description": "Function to execute when we need to get this node's child data.", "guessedname": "dataLoader", "guessedtype": "property"}, "data": {"type": "object", "description": "The data linked to this node.  This can be any object or primitive\nvalue, and the data can be used in getNodeHtml().", "guessedname": "data", "guessedtype": "property"}, "dynamicLoadComplete": {"type": "boolean", "description": "Dynamically loaded nodes only fetch the data the first time they are\nexpanded.  This flag is set to true once the data has been fetched.", "guessedname": "dynamicLoadComplete", "guessedtype": "property"}, "hasIcon": {"type": "boolean", "description": "The toggle\/branch icon will not show if this is set to false.  This\ncould be useful if the implementer wants to have the child contain\nextra info about the parent, rather than an actual node.", "guessedname": "hasIcon", "guessedtype": "property"}, "target": {"type": "string", "description": "The label href target, defaults to current window", "guessedname": "target", "guessedtype": "property"}, "expanded": {"type": "boolean", "description": "The node's expanded\/collapsed state", "guessedname": "expanded", "guessedtype": "property"}, "tree": {"type": "TreeView", "description": "Tree instance this node is part of", "guessedname": "tree", "guessedtype": "property"}, "depth": {"type": "int", "description": "The depth of this node.  We start at -1 for the root node.", "guessedname": "depth", "guessedtype": "property"}}, "description": "The base class for all tree nodes.  The node's presentation and behavior in\nresponse to mouse events is handled in Node subclasses."}, "YAHOO.widget.ColumnSeries": {"name": "YAHOO.widget.ColumnSeries", "constructors": [{"description": "ColumnSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "ColumnSeries", "file": "Series.js", "guessedtype": "function", "shortname": "ColumnSeries", "description": "ColumnSeries class for the YUI Charts widget."}, "YAHOO.widget.ColumnChart": {"name": "YAHOO.widget.ColumnChart", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "ColumnChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "ColumnChart", "uses": ["YAHOO.widget.CartesianChart"], "file": "ChartTypes.js", "guessedtype": "function", "shortname": "ColumnChart", "description": "ColumnChart class for the YUI Charts widget."}, "YAHOO.util.Region": {"name": "YAHOO.util.Region", "constructors": [{"params": [{"type": "Int", "name": "t", "description": " the top extent"}, {"type": "Int", "name": "r", "description": " the right extent"}, {"type": "Int", "name": "b", "description": " the bottom extent"}, {"type": "Int", "name": "l", "description": " the left extent"}], "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it."}], "namespace": "YAHOO.util", "module": "dom", "guessedname": "Region", "methods": {"getArea": {"return": {"type": "Int", "description": "the region's area"}, "description": "Returns the area of the region", "guessedname": "getArea", "guessedtype": "function"}, "getRegion": {"return": {"type": "Region", "description": "The region that the element occupies"}, "description": "Returns a region that is occupied by the DOM element", "static": "", "guessedname": "getRegion", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " The element"}]}, "contains": {"return": {"type": "Boolean", "description": "True if the region is contained with this region, \nelse false"}, "params": [{"type": "Region", "name": "region", "description": " The region to evaluate"}], "description": "Returns true if this region contains the region passed in", "guessedname": "contains", "guessedtype": "function"}, "union": {"return": {"type": "Region", "description": "The union region"}, "params": [{"type": "Region", "name": "region", "description": " The region that to create the union with"}], "description": "Returns the region representing the smallest region that can contain both\nthe passed in region and this region.", "guessedname": "union", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "string the region properties"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}, "intersect": {"return": {"type": "Region", "description": "The overlap region, or null if there is no overlap"}, "params": [{"type": "Region", "name": "region", "description": " The region that intersects"}], "description": "Returns the region where the passed in region overlaps with this one", "guessedname": "intersect", "guessedtype": "function"}}, "file": "Region.js", "guessedtype": "function", "shortname": "Region", "properties": {"right": {"type": "int", "description": "The region's right extent", "guessedname": "right", "guessedtype": "property"}, "bottom": {"type": "Int", "description": "The region's bottom extent", "guessedname": "bottom", "guessedtype": "property"}, "top": {"type": "Int", "description": "The region's top extent", "guessedname": "top", "guessedtype": "property"}, "1": {"type": "Int", "description": "The region's top extent as index, for symmetry with set\/getXY"}, "0": {"type": "Int", "description": "The region's left extent as index, for symmetry with set\/getXY"}, "left": {"type": "Int", "description": "The region's left extent", "guessedname": "left", "guessedtype": "property"}}, "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it."}, "YAHOO.widget.ContainerEffect": {"name": "YAHOO.widget.ContainerEffect", "constructors": [{"params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": " The Overlay that the animation \nshould be associated with"}, {"type": "Object", "name": "attrIn", "description": " The object literal representing the animation \narguments to be used for the animate-in transition. The arguments for \nthis literal are: attributes(object, see YAHOO.util.Anim for description), \nduration(Number), and method(i.e. Easing.easeIn)."}, {"type": "Object", "name": "attrOut", "description": " The object literal representing the animation \narguments to be used for the animate-out transition. The arguments for  \nthis literal are: attributes(object, see YAHOO.util.Anim for description), \nduration(Number), and method(i.e. Easing.easeIn)."}, {"type": "HTMLElement", "name": "targetElement", "description": " Optional. The target element that  \nshould be animated during the transition. Defaults to overlay.element."}, {"type": "class", "name": "Optional.", "description": " The animation class to instantiate. Defaults to \nYAHOO.util.Anim. Other options include YAHOO.util.Motion."}], "description": "ContainerEffect encapsulates animation transitions that are executed when \nan Overlay is shown or hidden."}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "ContainerEffect", "methods": {"handleTweenAnimateOut": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onTween handler for the out-animation.", "guessedname": "handleTweenAnimateOut", "guessedtype": "function"}, "handleStartAnimateIn": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onStart handler for the in-animation.", "guessedname": "handleStartAnimateIn", "guessedtype": "function"}, "handleStartAnimateOut": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onStart handler for the out-animation.", "guessedname": "handleStartAnimateOut", "guessedtype": "function"}, "animateOut": {"description": "Triggers the out-animation.", "guessedname": "animateOut", "guessedtype": "function"}, "handleCompleteAnimateOut": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onComplete handler for the out-animation.", "guessedname": "handleCompleteAnimateOut", "guessedtype": "function"}, "init": {"description": "Initializes the animation classes and events.", "guessedname": "init", "guessedtype": "function"}, "handleTweenAnimateIn": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onTween handler for the in-animation.", "guessedname": "handleTweenAnimateIn", "guessedtype": "function"}, "SLIDE": {"return": {"type": "YAHOO.widget.ContainerEffect", "description": "The configured ContainerEffect object"}, "description": "A pre-configured ContainerEffect instance that can be used for sliding an \noverlay in and out.", "static": "", "guessedname": "SLIDE", "guessedtype": "function", "params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": " The Overlay object to animate"}, {"type": "Number", "name": "dur", "description": " The duration of the animation"}]}, "toString": {"return": {"type": "String", "description": "The string representation of the ContainerEffect"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "FADE": {"return": {"type": "YAHOO.widget.ContainerEffect", "description": "The configured ContainerEffect object"}, "description": "A pre-configured ContainerEffect instance that can be used for fading \nan overlay in and out.", "static": "", "guessedname": "FADE", "guessedtype": "function", "params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": " The Overlay object to animate"}, {"type": "Number", "name": "dur", "description": " The duration of the animation"}]}, "handleCompleteAnimateIn": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "The default onComplete handler for the in-animation.", "guessedname": "handleCompleteAnimateIn", "guessedtype": "function"}, "animateIn": {"description": "Triggers the in-animation.", "guessedname": "animateIn", "guessedtype": "function"}}, "file": "ContainerEffect.js", "guessedtype": "property", "shortname": "ContainerEffect", "properties": {"attrOut": {"type": "Object", "description": "The animation attributes to use when transitioning out of view", "guessedname": "attrOut", "guessedtype": "property"}, "animClass": {"type": "class", "description": "The animation class to use for animating the overlay", "guessedname": "animClass", "guessedtype": "property"}, "targetElement": {"type": "HTMLElement", "description": "The target element to be animated", "guessedname": "targetElement", "guessedtype": "property"}, "attrIn": {"type": "Object", "description": "The animation attributes to use when transitioning into view", "guessedname": "attrIn", "guessedtype": "property"}, "overlay": {"type": "YAHOO.widget.Overlay", "description": "The overlay to animate", "guessedname": "overlay", "guessedtype": "property"}}, "description": "ContainerEffect encapsulates animation transitions that are executed when \nan Overlay is shown or hidden."}, "YAHOO.util.Motion": {"name": "YAHOO.util.Motion", "constructors": [{"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for moving elements along a path defined by the \"points\" \nmember of \"attributes\".  All \"points\" are arrays with x, y coordinates.\n<p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}], "namespace": "YAHOO.util", "module": "animation", "guessedname": "Motion", "extends": "YAHOO.util.Anim", "superclass": "YAHOO.util.Anim", "file": "Motion.js", "guessedtype": "function", "shortname": "Motion", "requires": "YAHOO.util.Anim", "description": "Anim subclass for moving elements along a path defined by the \"points\" \nmember of \"attributes\".  All \"points\" are arrays with x, y coordinates.\n<p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}, "YAHOO.widget.LineSeries": {"name": "YAHOO.widget.LineSeries", "constructors": [{"description": "LineSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "LineSeries", "file": "Series.js", "guessedtype": "function", "shortname": "LineSeries", "description": "LineSeries class for the YUI Charts widget."}, "YAHOO.widget.BarChart": {"name": "YAHOO.widget.BarChart", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "BarChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "BarChart", "uses": ["YAHOO.widget.CartesianChart"], "file": "ChartTypes.js", "guessedtype": "function", "shortname": "BarChart", "description": "BarChart class for the YUI Charts widget."}, "YAHOO.widget.TimeAxis": {"name": "YAHOO.widget.TimeAxis", "constructors": [{"description": "A type of axis whose units are measured in time-based values."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "TimeAxis", "file": "TimeAxis.js", "guessedtype": "function", "shortname": "TimeAxis", "properties": {"majorTimeUnit": {"type": "String", "description": "The time unit used by the majorUnit.", "guessedname": "majorTimeUnit", "guessedtype": "property"}, "minimum": {"type": "Date", "description": "The minimum value drawn by the axis. If not set explicitly, the axis minimum\nwill be calculated automatically.", "guessedname": "minimum", "guessedtype": "property"}, "majorUnit": {"type": "Number", "description": "The spacing between major intervals on this axis.", "guessedname": "majorUnit", "guessedtype": "property"}, "maximum": {"type": "Number", "description": "The maximum value drawn by the axis. If not set explicitly, the axis maximum\nwill be calculated automatically.", "guessedname": "maximum", "guessedtype": "property"}, "snapToUnits": {"type": "Boolean", "description": "If true, the labels, ticks, gridlines, and other objects will snap to\nthe nearest major or minor unit. If false, their position will be based\non the minimum value.", "guessedname": "snapToUnits", "guessedtype": "property"}}, "description": "A type of axis whose units are measured in time-based values."}, "YAHOO.widget.Toolbar": {"name": "YAHOO.widget.Toolbar", "requires": "yahoo, dom, element, event, toolbarbutton", "constructors": [{"params": [{"type": "String\/HTMLElement", "name": "el", "description": " The element to turn into a toolbar."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "Provides a rich toolbar widget based on the button and menu widgets"}], "namespace": "YAHOO.widget", "module": "editor", "events": {"draggableChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "draggableChangeEvent", "description": "Fires when the value for the configuration attribute 'draggable' changes."}, "beforeButtontypeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeButtontypeChangeEvent", "description": "Fires before the value for the configuration attribute 'buttonType' changes. Return false to cancel the attribute change."}, "beforeGrouplabelsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeGrouplabelsChangeEvent", "description": "Fires before the value for the configuration attribute 'grouplabels' changes. Return false to cancel the attribute change."}, "beforeDisabledChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDisabledChangeEvent", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "collapseChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "collapseChangeEvent", "description": "Fires when the value for the configuration attribute 'collapse' changes."}, "buttonClick": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Object", "name": "o", "description": " The object passed to this handler is the button config used to create the button."}], "description": "Fires when any botton receives a click event. Passes back a single object representing the buttons config object. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "grouplabelsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "grouplabelsChangeEvent", "description": "Fires when the value for the configuration attribute 'grouplabels' changes."}, "buttonsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "buttonsChangeEvent", "description": "Fires when the value for the configuration attribute 'buttons' changes."}, "titlebarChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "titlebarChangeEvent", "description": "Fires when the value for the configuration attribute 'titlebar' changes."}, "beforeDraggableChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDraggableChangeEvent", "description": "Fires before the value for the configuration attribute 'draggable' changes. Return false to cancel the attribute change."}, "valueClick": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Object", "name": "o", "description": " The object passed to this handler is the button config used to create the button."}], "description": "This is a special dynamic event that is created and dispatched based on the value property\nof the button config. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event.\nExample:\n<code><pre>\nbuttons : [\n{ type: 'button', value: 'test', value: 'testButton' }\n]<\/pre>\n<\/code>\nWith the valueClick event you could subscribe to this buttons click event with this:\ntbar.in('testButtonClick', function() { alert('test button clicked'); })"}, "toolbarExpanded": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the toolbar is expanded via the collapse button. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "beforeCollapseChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeCollapseChangeEvent", "description": "Fires before the value for the configuration attribute 'collapse' changes. Return false to cancel the attribute change."}, "beforeButtonsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeButtonsChangeEvent", "description": "Fires before the value for the configuration attribute 'buttons' changes. Return false to cancel the attribute change."}, "buttonTypeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "buttonTypeChangeEvent", "description": "Fires when the value for the configuration attribute 'buttonType' changes."}, "disabledChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChangeEvent", "description": "Fires when the value for the configuration attribute 'disabled' changes."}, "beforeTitlebarChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTitlebarChangeEvent", "description": "Fires before the value for the configuration attribute 'titlebar' changes. Return false to cancel the attribute change."}, "toolbarCollapsed": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the toolbar is collapsed via the collapse button. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}}, "methods": {"getButtons": {"return": {"type": "Array", "description": ""}, "description": "Returns an array of buttons in the current toolbar", "guessedname": "getButtons", "guessedtype": "function"}, "enableButton": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String\/Number", "name": "id", "description": " Enable a button by it's id, index or value."}], "description": "Enables a button in the toolbar.", "guessedname": "enableButton", "guessedtype": "function"}, "destroyButton": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String\/Number", "name": "id", "description": " Destroy a button by it's id or index."}], "description": "Destroy a button in the toolbar.", "guessedname": "destroyButton", "guessedtype": "function"}, "addButton": {"params": [{"type": "Object", "name": "oButton", "description": " Object literal reference to the Button's Config"}, {"type": "HTMLElement", "name": "after", "description": " Optional HTML element to insert this button after in the DOM."}], "description": "Add a new button to the toolbar. Buttons supported:\npush, split, menu, select, color, spin", "guessedname": "addButton", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Object literal specifying a set of \nconfiguration attributes used to create the toolbar."}], "description": "Initializes all of the configuration attributes used to create \nthe toolbar.", "guessedname": "initAttributes", "guessedtype": "function"}, "selectButton": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String\/Number", "name": "id", "description": " Select a button by it's id, index or value."}], "description": "Selects a button in the toolbar.", "guessedname": "selectButton", "guessedtype": "function"}, "_buttonClick": {"protected": "", "params": [{"type": "String", "name": "ev", "description": " The event that was passed in."}, {"type": "Object", "name": "info", "description": " Object literal of information about the button that was clicked."}], "description": "Click handler for all buttons in the toolbar.", "guessedname": "_buttonClick", "guessedtype": "function"}, "enableAllButtons": {"return": {"type": "Boolean", "description": ""}, "description": "Enables all buttons in the toolbar.", "guessedname": "enableAllButtons", "guessedtype": "function"}, "init": {"description": "The Toolbar class's initialization method", "guessedname": "init", "guessedtype": "function"}, "addButtonToGroup": {"params": [{"type": "Object", "name": "oButton", "description": " Object literal reference to the Button's Config"}, {"type": "String", "name": "group", "description": " The Group identifier passed into the initial config"}, {"type": "HTMLElement", "name": "after", "description": " Optional HTML element to insert this button after in the DOM."}], "description": "Add a new button to a toolbar group. Buttons supported:\npush, split, menu, select, color, spin", "guessedname": "addButtonToGroup", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the toolbar.", "guessedname": "toString", "guessedtype": "function"}, "_resetColorPicker": {"description": "Clears the currently selected color or mouseover color in the color picker.", "private": "", "guessedname": "_resetColorPicker", "guessedtype": "function"}, "destroy": {"return": {"type": "Boolean", "description": ""}, "description": "Destroys the toolbar, all of it's elements and objects.", "guessedname": "destroy", "guessedtype": "function"}, "collapse": {"params": [{"type": "Boolean", "name": "collapse", "description": " True to collapse, false to expand."}], "description": "Programatically collapse the toolbar.", "guessedname": "collapse", "guessedtype": "function"}, "addSeparator": {"params": [{"type": "HTMLElement", "name": "cont", "description": " Optional HTML element to insert this button into."}, {"type": "HTMLElement", "name": "after", "description": " Optional HTML element to insert this button after in the DOM."}], "description": "Add a new button separator to the toolbar.", "guessedname": "addSeparator", "guessedtype": "function"}, "getButtonByIndex": {"return": {"type": "<a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton<\/a>", "description": ""}, "params": [{"type": "Number", "name": "index", "description": " The index of the button in _buttonList."}], "description": "Gets a button instance from the toolbar by is index in _buttonList.", "guessedname": "getButtonByIndex", "guessedtype": "function"}, "getButtonById": {"return": {"type": "<a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton<\/a>", "description": ""}, "params": [{"type": "String", "name": "id", "description": " The Dom id to query for."}], "description": "Gets a button instance from the toolbar by is Dom id.", "guessedname": "getButtonById", "guessedtype": "function"}, "resetAllButtons": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "_ex", "description": " Except these buttons"}], "description": "Resets all buttons to their initial state.", "guessedname": "resetAllButtons", "guessedtype": "function"}, "deselectAllButtons": {"return": {"type": "Boolean", "description": ""}, "description": "Deselects all buttons in the toolbar.", "guessedname": "deselectAllButtons", "guessedtype": "function"}, "disableButton": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String\/Number", "name": "id", "description": " Disable a button by it's id, index or value."}], "description": "Disables a button in the toolbar.", "guessedname": "disableButton", "guessedtype": "function"}, "_addMenuClasses": {"params": [{"type": "String", "name": "ev", "description": " The event that fired."}, {"type": "Array", "name": "na", "description": " Array of event information."}, {"type": "Object", "name": "o", "description": " Button config object."}], "description": "This method is called from Menu's renderEvent to add a few more classes to the menu items", "private": ""}, "_makeSpinButton": {"guessedname": "_makeSpinButton", "params": [{"type": "Object", "name": "_button", "description": " <a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton<\/a> reference"}, {"type": "Object", "name": "oButton", "description": " Object literal containing the buttons initial config"}], "description": "Create a button similar to an OS Spin button.. It has an up\/down arrow combo to scroll through a range of int values.", "private": "", "guessedtype": "function"}, "deselectButton": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String\/Number", "name": "id", "description": " Deselect a button by it's id, index or value."}], "description": "Deselects a button in the toolbar.", "guessedname": "deselectButton", "guessedtype": "function"}, "addButtonGroup": {"params": [{"type": "Object", "name": "oGroup", "description": " Object literal reference to the Groups Config (contains an array of button configs)"}], "description": "Add a new button group to the toolbar. (uses addButton)", "guessedname": "addButtonGroup", "guessedtype": "function"}, "_createColorPicker": {"guessedname": "_createColorPicker", "params": [{"type": "String", "name": "id", "description": " the id of the toolbar to prefix this DOM container with."}], "description": "Creates the core DOM reference to the color picker menu item.", "private": "", "guessedtype": "function"}, "_makeColorButton": {"guessedname": "_makeColorButton", "params": [{"type": "Object", "name": "_oButton", "description": " <a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton<\/a> reference"}], "description": "Called to turn a \"color\" button into a menu button with an Overlay for the menu.", "private": "", "guessedtype": "function"}, "disableAllButtons": {"return": {"type": "Boolean", "description": ""}, "description": "Disables all buttons in the toolbar.", "guessedname": "disableAllButtons", "guessedtype": "function"}, "getButtonByValue": {"return": {"type": "<a href=\"YAHOO.widget.ToolbarButton.html\">YAHOO.widget.ToolbarButton<\/a> or <a href=\"YAHOO.widget.MenuItem.html\">YAHOO.widget.MenuItem<\/a>", "description": ""}, "params": [{"type": "String", "name": "value", "description": " The button value to query for."}], "description": "Gets a button instance or a menuitem instance from the toolbar by it's value.", "guessedname": "getButtonByValue", "guessedtype": "function"}}, "beta": "", "file": "toolbar.js", "shortname": "Toolbar", "configs": {"disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the toolbar should be disabled. It will also disable the draggable attribute if it is on."}, "grouplabels": {"default": "true", "type": "Boolean", "description": "Boolean indicating if the toolbar should show the group label's text string."}, "cont": {"type": "HTMLElement", "description": "The container for the toolbar."}, "collapse": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the the titlebar should have a collapse button.\nThe collapse button will not remove the toolbar, it will minimize it to the titlebar"}, "buttonType": {"type": "String", "description": "The buttonType to use (advanced or basic)"}, "buttons": {"type": "Array", "description": "Object specifying the buttons to include in the toolbar\nExample:\n<code><pre>\n{\n{ id: 'b3', type: 'button', label: 'Underline', value: 'underline' },\n{ type: 'separator' },\n{ id: 'b4', type: 'menu', label: 'Align', value: 'align',\nmenu: [\n{ text: \"Left\", value: 'alignleft' },\n{ text: \"Center\", value: 'aligncenter' },\n{ text: \"Right\", value: 'alignright' }\n]\n}\n}\n<\/pre><\/code>"}, "draggable": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the toolbar should be draggable."}, "titlebar": {"default": "false", "type": "Boolean or String", "description": "Boolean indicating if the toolbar should have a titlebar. If\npassed a string, it will use that as the titlebar text"}}, "optional": "container_core, dragdrop", "properties": {"STR_SPIN_LABEL": {"type": "String", "description": "String for spinbutton dynamic label. Note the {VALUE} will be replaced with YAHOO.lang.substitute", "guessedname": "STR_SPIN_LABEL", "guessedtype": "property"}, "_toolbarConfigs": {"protected": "", "type": "Object", "guessedname": "_toolbarConfigs", "guessedtype": "property"}, "STR_SPIN_UP": {"type": "String", "description": "String for spinbutton up", "guessedname": "STR_SPIN_UP", "guessedtype": "property"}, "_buttonList": {"protected": "", "type": "Array", "description": "Internal property list of current buttons in the toolbar", "guessedname": "_buttonList", "guessedtype": "property"}, "_colorPicker": {"type": "HTMLElement", "description": "The HTML Element containing the colorPicker", "guessedname": "_colorPicker", "guessedtype": "property"}, "STR_COLLAPSE": {"type": "String", "description": "String for Toolbar Collapse Button", "guessedname": "STR_COLLAPSE", "guessedtype": "property"}, "CLASS_PREFIX": {"protected": "", "type": "String", "description": "Default prefix for dynamically created class names", "guessedname": "CLASS_PREFIX", "guessedtype": "property"}, "CLASS_DRAGHANDLE": {"protected": "", "type": "String", "description": "Default CSS class to apply to the toolbar's drag handle element", "guessedname": "CLASS_DRAGHANDLE", "guessedtype": "property"}, "_colorData": {"type": "Object", "description": "Object reference containing colors hex and text values.", "guessedname": "_colorData", "guessedtype": "property"}, "_sepCount": {"protected": "", "type": "Number", "description": "Internal refernce for counting separators, so we can give them a useful class name for styling", "guessedname": "_sepCount", "guessedtype": "property"}, "Dom": {"private": "", "guessedname": "Dom", "guessedtype": "property"}, "dd": {"type": "Object", "description": "The DragDrop instance associated with the Toolbar", "guessedname": "dd", "guessedtype": "property"}, "_titlebar": {"type": "HTMLElement", "description": "Object reference to the titlebar", "guessedname": "_titlebar", "guessedtype": "property"}, "CLASS_CONTAINER": {"protected": "", "type": "String", "description": "Default CSS class to apply to the toolbar container element", "guessedname": "CLASS_CONTAINER", "guessedtype": "property"}, "_buttonGroupList": {"protected": "", "type": "Array", "description": "Internal property list of current button groups in the toolbar", "guessedname": "_buttonGroupList", "guessedtype": "property"}, "CLASS_DISABLED": {"protected": "", "type": "String", "description": "Default CSS class to apply when the toolbar is disabled", "guessedname": "CLASS_DISABLED", "guessedtype": "property"}, "buttonType": {"type": "Object", "description": "The default button to use", "guessedname": "buttonType", "guessedtype": "property"}, "_sep": {"protected": "", "type": "HTMLElement", "description": "Internal reference to the separator HTML Element for cloning", "guessedname": "_sep", "guessedtype": "property"}, "STR_SPIN_DOWN": {"type": "String", "description": "String for spinbutton down", "guessedname": "STR_SPIN_DOWN", "guessedtype": "property"}, "CLASS_SEPARATOR": {"protected": "", "type": "String", "description": "Default CSS class to apply to all separators in the toolbar", "guessedname": "CLASS_SEPARATOR", "guessedtype": "property"}, "draghandle": {"protected": "", "type": "HTMLElement", "guessedname": "_dragHandle", "guessedtype": "property"}, "browser": {"type": "Object", "description": "Standard browser detection", "guessedname": "browser", "guessedtype": "property"}}, "description": "<p>Creates a rich Toolbar widget based on Button. Primarily used with the Rich Text Editor<\/p>"}, "YAHOO.widget.MenuBarItem": {"name": "YAHOO.widget.MenuBarItem", "constructors": [{"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;<\/code> element of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;option&#62;<\/code> element of the menu bar item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar item. See configuration class documentation \nfor more details."}], "description": "Creates an item for a menu bar."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuBarItem", "methods": {"init": {"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;<\/code> element of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;option&#62;<\/code> element of the menu bar item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar item. See configuration class documentation \nfor more details."}], "description": "The MenuBarItem class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu bar item.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "YAHOO.widget.MenuItem", "superclass": "YAHOO.widget.MenuItem", "file": "menubaritem.js", "guessedtype": "function", "shortname": "MenuBarItem", "properties": {"CSS_LABEL_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \nmenu bar item's <code>&#60;a&#62;<\/code> element.", "default": "\"yuimenubaritemlabel\"", "guessedname": "CSS_LABEL_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \n<code>&#60;li&#62;<\/code> element of the menu bar item.", "default": "\"yuimenubaritem\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Creates an item for a menu bar."}, "YAHOO.widget.Module": {"name": "YAHOO.widget.Module", "configs": {"appendtodocumentbody": {"default": "false", "type": "Boolean", "description": "Specifies if the module should be rendered as the first child \nof document.body or appended as the last child when render is called\nwith document.body as the \"appendToNode\".\n<p>\nAppending to the body while the DOM is still being constructed can \nlead to Operation Aborted errors in IE hence this flag is set to \nfalse by default.\n<\/p>"}, "visible": {"default": "true", "type": "Boolean", "description": "Specifies whether the Module is visible on the page."}, "monitorresize": {"default": "true", "type": "Boolean", "description": "Specifies whether to create a special proxy iframe to monitor \nfor user font resizing in the document"}, "effect": {"default": "null", "type": "Object", "description": "Object or array of objects representing the ContainerEffect \nclasses that are active for animating the container."}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the Module <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Module"}, {"type": "Object", "name": "userConfig", "description": " The configuration Object literal containing \nthe configuration that should be set for this module. See configuration \ndocumentation for more details."}], "description": "Module is a JavaScript representation of the Standard Module Format. \nStandard Module Format is a simple standard for markup containers where \nchild nodes representing the header, body, and footer of the content are \ndenoted using the CSS classes \"hd\", \"bd\", and \"ft\" respectively. \nModule is the base class for all other classes in the YUI \nContainer package."}], "namespace": "YAHOO.widget", "module": "container", "events": {"initEvent": {"params": [{"type": "class", "name": "classRef", "description": " class reference of the initializing \nclass, such as this.beforeInitEvent.fire(Module)"}], "description": "CustomEvent fired after class initalization.", "guessedname": "initEvent", "guessedtype": "property"}, "YAHOO.widget.Module.textResizeEvent": {"description": "Singleton CustomEvent fired when the font size is changed in the browser.\nOpera's \"zoom\" functionality currently does not support text \nsize detection.", "guessedname": "textResizeEvent", "guessedtype": "property"}, "hideEvent": {"description": "CustomEvent fired after the Module is hidden", "guessedname": "hideEvent", "guessedtype": "property"}, "beforeHideEvent": {"description": "CustomEvent fired before the Module is hidden", "guessedname": "beforeHideEvent", "guessedtype": "property"}, "changeBodyEvent": {"params": [{"type": "String\/HTMLElement", "name": "content", "description": " String\/element representing \nthe new body content"}], "description": "CustomEvent fired when the body content of the Module is modified", "guessedname": "changeBodyEvent", "guessedtype": "property"}, "beforeRenderEvent": {"description": "CustomEvent fired before the Module is rendered", "guessedname": "beforeRenderEvent", "guessedtype": "property"}, "changeContentEvent": {"description": "CustomEvent fired when the content of the Module is modified", "guessedname": "changeContentEvent", "guessedtype": "property"}, "beforeShowEvent": {"description": "CustomEvent fired before the Module is shown", "guessedname": "beforeShowEvent", "guessedtype": "property"}, "changeFooterEvent": {"params": [{"type": "String\/HTMLElement", "name": "content", "description": " String\/element representing \nthe new footer content"}], "description": "CustomEvent fired when the footer content of the Module \nis modified", "guessedname": "changeFooterEvent", "guessedtype": "property"}, "renderEvent": {"description": "CustomEvent fired after the Module is rendered", "guessedname": "renderEvent", "guessedtype": "property"}, "showEvent": {"description": "CustomEvent fired after the Module is shown", "guessedname": "showEvent", "guessedtype": "property"}, "beforeInitEvent": {"params": [{"type": "class", "name": "classRef", "description": " class reference of the initializing \nclass, such as this.beforeInitEvent.fire(Module)"}], "description": "CustomEvent fired prior to class initalization.", "guessedname": "beforeInitEvent", "guessedtype": "property"}, "appendEvent": {"description": "CustomEvent fired when the Module is appended to the DOM", "guessedname": "appendEvent", "guessedtype": "property"}, "changeHeaderEvent": {"params": [{"type": "String\/HTMLElement", "name": "content", "description": " String\/element representing \nthe new header content"}], "description": "CustomEvent fired when the header content of the Module \nis modified", "guessedname": "changeHeaderEvent", "guessedtype": "property"}, "destroyEvent": {"description": "CustomEvent fired when the Module is destroyed", "guessedname": "destroyEvent", "guessedtype": "property"}}, "guessedname": "Module", "methods": {"configMonitorResize": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "Default event handler for the \"monitorresize\" configuration property", "guessedname": "configMonitorResize", "guessedtype": "function"}, "appendToHeader": {"params": [{"type": "HTMLElement", "name": "element", "description": " The element to append to the header"}], "description": "Appends the passed element to the header. If no header is present, \none will be automatically created.", "guessedname": "appendToHeader", "guessedtype": "function"}, "setBody": {"params": [{"type": "String", "name": "bodyContent", "description": " The HTML used to set the body <em>OR<\/em>"}, {"type": "HTMLElement", "name": "bodyContent", "description": " The HTMLElement to append to the body"}], "description": "Sets the Module's body content to the HTML specified, or appends the\npassed element to the body. If no body is present, one will be \nautomatically created.", "guessedname": "setBody", "guessedtype": "function"}, "hide": {"description": "Hides the Module element by setting the visible configuration \nproperty to false. Also fires two events: beforeHideEvent prior to \nthe visibility change, and hideEvent after.", "guessedname": "hide", "guessedtype": "function"}, "render": {"return": {"type": "Boolean", "description": "Success or failure of the render"}, "params": [{"type": "String", "name": "appendToNode", "description": " The element id to which the Module \nshould be appended to prior to rendering <em>OR<\/em>"}, {"type": "HTMLElement", "name": "appendToNode", "description": " The element to which the Module \nshould be appended to prior to rendering"}, {"type": "HTMLElement", "name": "moduleElement", "description": " OPTIONAL. The element that \nrepresents the actual Standard Module container."}], "description": "Renders the Module by inserting the elements that are not already \nin the main Module into their correct places. Optionally appends \nthe Module to the specified node prior to the render's execution. \n<p>\nFor Modules without existing markup, the appendToNode argument \nis REQUIRED. If this argument is ommitted and the current element is \nnot present in the document, the function will return false, \nindicating that the render was a failure.\n<\/p>\n<p>\nNOTE: As of 2.3.1, if the appendToNode is the document's body element\nthen the module is rendered as the first child of the body element, \nand not appended to it, to avoid Operation Aborted errors in IE when \nrendering the module before window's load event is fired. You can \nuse the appendtodocumentbody configuration property to change this \nto append to document.body if required.\n<\/p>", "guessedname": "render", "guessedtype": "function"}, "onDomResize": {"params": [{"type": "DOMEvent", "name": "e", "description": " The DOM resize event"}, {"type": "Object", "name": "obj", "description": " The scope object passed to the handler"}], "description": "Event handler fired when the resize monitor element is resized.", "guessedname": "onDomResize", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Module which are fired \nautomatically at appropriate times by the Module class.", "guessedname": "initEvents", "guessedtype": "function"}, "setFooter": {"params": [{"type": "String", "name": "footerContent", "description": " The HTML used to set the footer \n<em>OR<\/em>"}, {"type": "HTMLElement", "name": "footerContent", "description": " The HTMLElement to append to \nthe footer"}], "description": "Sets the Module's footer content to the HTML specified, or appends \nthe passed element to the footer. If no footer is present, one will \nbe automatically created.", "guessedname": "setFooter", "guessedtype": "function"}, "initResizeMonitor": {"description": "Initialized an empty IFRAME that is placed out of the visible area \nthat can be used to detect text resize.", "guessedname": "initResizeMonitor", "guessedtype": "function"}, "appendToBody": {"params": [{"type": "HTMLElement", "name": "element", "description": " The element to append to the body"}], "description": "Appends the passed element to the body. If no body is present, one \nwill be automatically created.", "guessedname": "appendToBody", "guessedtype": "function"}, "appendToFooter": {"params": [{"type": "HTMLElement", "name": "element", "description": " The element to append to the footer"}], "description": "Appends the passed element to the footer. If no footer is present, \none will be automatically created.", "guessedname": "appendToFooter", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "Default event handler for changing the visibility property of a \nModule. By default, this is achieved by switching the \"display\" style \nbetween \"block\" and \"none\".\nThis method is responsible for firing showEvent and hideEvent.", "guessedname": "configVisible", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the Module <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Module"}, {"type": "Object", "name": "userConfig", "description": " The configuration Object literal \ncontaining the configuration that should be set for this module. \nSee configuration documentation for more details."}], "description": "The Module class's initialization method, which is executed for\nModule and all of its subclasses. This method is automatically \ncalled by the constructor, and  sets up all DOM references for \npre-existing markup, and creates required markup if it is not \nalready present.", "guessedname": "init", "guessedtype": "function"}, "_addToParent": {"protected": "", "params": [{"type": "parentNode", "name": "The", "description": " HTML element to which the element will be added"}, {"type": "element", "name": "The", "description": " HTML element to be added to parentNode's children"}], "description": "This method is a protected helper, used when constructing the DOM structure for the module \nto account for situations which may cause Operation Aborted errors in IE. It should not \nbe used for general DOM construction.\n<p>\nIf the parentNode is not document.body, the element is appended as the last element.\n<\/p>\n<p>\nIf the parentNode is document.body the element is added as the first child to help\nprevent Operation Aborted errors in IE.\n<\/p>", "guessedname": "_addToParent", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Module"}, "description": "Returns a String representation of the Object.", "guessedname": "toString", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the custom events for Module which are fired \nautomatically at appropriate times by the Module class.", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "show": {"description": "Shows the Module element by setting the visible configuration \nproperty to true. Also fires two events: beforeShowEvent prior to \nthe visibility change, and showEvent after.", "guessedname": "show", "guessedtype": "function"}, "destroy": {"description": "Removes the Module element from the DOM and sets all child elements \nto null.", "guessedname": "destroy", "guessedtype": "function"}, "setHeader": {"params": [{"type": "String", "name": "headerContent", "description": " The HTML used to set the header \n<em>OR<\/em>"}, {"type": "HTMLElement", "name": "headerContent", "description": " The HTMLElement to append to \nthe header"}], "description": "Sets the Module's header content to the HTML specified, or appends \nthe passed element to the header. If no header is present, one will \nbe automatically created.", "guessedname": "setHeader", "guessedtype": "function"}}, "file": "Module.js", "guessedtype": "function", "shortname": "Module", "properties": {"body": {"type": "HTMLElement", "description": "The body element, denoted with CSS class \"bd\"", "guessedname": "body", "guessedtype": "property"}, "isSecure": {"type": "Boolean", "description": "Boolean representing whether or not the current browsing context is \nsecure (https)", "guessedname": "isSecure", "guessedtype": "function"}, "YAHOO.widget.Module.CSS_MODULE": {"description": "Constant for the default CSS class name that represents a Module", "static": "", "guessedname": "CSS_MODULE", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.CSS_HEADER": {"description": "Constant representing the module header", "static": "", "guessedname": "CSS_HEADER", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.CSS_FOOTER": {"description": "Constant representing the module footer", "static": "", "guessedname": "CSS_FOOTER", "guessedtype": "property", "type": "String", "final": ""}, "contructor": {"type": "Function", "description": "The class's constructor function", "guessedname": "constructor", "guessedtype": "property"}, "platform": {"type": "String", "description": "String representing the current user-agent platform", "guessedname": "platform", "guessedtype": "function"}, "element": {"type": "HTMLElement", "description": "The main module element that contains the header, body, and footer", "guessedname": "element", "guessedtype": "property"}, "YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL": {"description": "Constant representing the url for the \"src\" attribute of the iframe \nused to monitor changes to the browser's base font size", "static": "", "guessedname": "RESIZE_MONITOR_SECURE_URL", "guessedtype": "property", "type": "String", "final": ""}, "header": {"type": "HTMLElement", "description": "The header element, denoted with CSS class \"hd\"", "guessedname": "header", "guessedtype": "property"}, "YAHOO.widget.Module.CSS_BODY": {"description": "Constant representing the module body", "static": "", "guessedname": "CSS_BODY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.IMG_ROOT": {"description": "Constant representing the prefix path to use for non-secure images", "static": "", "guessedname": "IMG_ROOT", "guessedtype": "property", "type": "String", "final": ""}, "EVENT_TYPES": {"description": "Constant representing the name of the Module's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "imageRoot": {"deprecated": "It is recommend that any images for a Module be applied\nvia CSS using the \"background-image\" property.", "type": "String", "description": "A string representing the root path for all images created by\na Module instance.", "guessedname": "imageRoot", "guessedtype": "property"}, "cfg": {"type": "YAHOO.util.Config", "description": "The Module's Config object used for monitoring \nconfiguration properties.", "guessedname": "cfg", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of the element", "guessedname": "id", "guessedtype": "property"}, "footer": {"type": "HTMLElement", "description": "The footer element, denoted with CSS class \"ft\"", "guessedname": "footer", "guessedtype": "property"}, "YAHOO.widget.Module.IMG_ROOT_SSL": {"description": "Constant representing the prefix path to use for securely served images", "static": "", "guessedname": "IMG_ROOT_SSL", "guessedtype": "property", "type": "String", "final": ""}, "DEFAULT_CONFIG": {"description": "Constant representing the Module's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "browser": {"deprecated": "Use YAHOO.env.ua", "type": "String", "description": "String representing the user-agent of the browser", "guessedname": "browser", "guessedtype": "function"}}, "description": "Module is a JavaScript representation of the Standard Module Format. \nStandard Module Format is a simple standard for markup containers where \nchild nodes representing the header, body, and footer of the content are \ndenoted using the CSS classes \"hd\", \"bd\", and \"ft\" respectively. \nModule is the base class for all other classes in the YUI \nContainer package."}, "YAHOO.tool.TestCase.Wait": {"name": "YAHOO.tool.TestCase.Wait", "constructors": [{"params": [{"type": "Function", "name": "segment", "description": " A function to run when the wait is over."}, {"type": "int", "name": "delay", "description": " The number of milliseconds to wait before running the code."}], "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}], "namespace": "YAHOO.tool.TestCase", "module": "yuitest", "guessedname": "Wait", "file": "TestCase.js", "guessedtype": "function", "shortname": "Wait", "properties": {"delay": {"type": "int", "description": "The delay before running the segment of code."}, "segment": {"type": "Function", "description": "The segment of code to run when the wait is over."}}, "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}, "YAHOO.lang": {"description": "Provides the language utilites and extensions used by the library", "namespace": "", "module": "yahoo", "guessedname": "lang", "methods": {"isArray": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is an array.\nTesting typeof\/instanceof\/constructor of arrays across frame \nboundaries isn't possible in Safari unless you have a reference\nto the other frame to test against its Array prototype.  To\nhandle this case, we test well-known array properties instead.\nproperties.", "guessedname": "isArray", "guessedtype": "function"}, "trim": {"return": {"type": "string", "description": "the trimmed string"}, "description": "Returns a string without any leading or trailing whitespace.  If \nthe input is not a string, the input will be returned untouched.", "since": "2.3.0", "params": [{"type": "string", "name": "s", "description": "  the string to trim"}], "guessedname": "trim", "guessedtype": "function"}, "isString": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a string", "guessedname": "isString", "guessedtype": "function"}, "isBoolean": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a boolean", "guessedname": "isBoolean", "guessedtype": "function"}, "extend": {"static": "", "params": [{"type": "Function", "name": "subc", "description": "   the object to modify"}, {"type": "Function", "name": "superc", "description": " the object to inherit"}, {"type": "Object", "name": "overrides", "description": "  additional properties\/methods to add to the\nsubclass prototype.  These will override the\nmatching items obtained from the superclass \nif present."}], "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.", "guessedname": "extend", "guessedtype": "function"}, "merge": {"return": {"type": "", "description": "the new merged object"}, "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.", "since": "2.3.0", "params": [{"type": "Object*", "name": "arguments", "description": "  the objects to merge"}], "guessedname": "merge", "guessedtype": "function"}, "augmentObject": {"description": "Applies all properties in the supplier to the receiver if the\nreceiver does not have these properties yet.  Optionally, one or \nmore methods\/properties can be specified (as additional \nparameters).  This option will overwrite the property if receiver \nhas it already.  If true is passed as the third parameter, all \nproperties will be applied and _will_ overwrite properties in \nthe receiver.", "since": "2.3.0", "static": "", "guessedname": "augmentObject", "guessedtype": "function", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*|boolean", "name": "arguments", "description": " zero or more properties methods \nto augment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver. If true\nis specified as the third parameter, all properties will\nbe applied and will overwrite an existing property in\nthe receiver"}]}, "later": {"return": {"type": "", "description": "a timer object. Call the cancel() method on this object to \nstop the timer."}, "description": "Executes the supplied function in the scope of the supplied \nobject 'when' milliseconds later.  Executes the function a \nsingle time unless periodic is set to true.", "since": "2.4.0", "params": [{"type": "int", "name": "when", "description": "  the number of milliseconds to wait until the fn \nis executed"}, {"type": "", "name": "o", "description": " the scope object"}, {"type": "Function|String", "name": "fn", "description": "  the function to execute or the name of \nthe method in the 'o' object to execute"}, {"type": "", "name": "data", "description": " [Array] data that is provided to the function.  This accepts\neither a single item or an array.  If an array is provided, the\nfunction is executed with one parameter for each array item.  If\nyou need to pass a single array parameter, it needs to be wrapped in\nan array [myarray]"}, {"type": "boolean", "name": "periodic", "description": "  if true, executes continuously at supplied \ninterval until canceled"}], "guessedname": "later", "guessedtype": "function"}, "substitute": {"return": {"type": "String", "description": "the substituted string"}, "description": "Does variable substitution on a string. It scans through the string \nlooking for expressions enclosed in { } braces. If an expression \nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If \nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is \nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key\/value\npairs.", "since": "2.3.0", "params": [{"type": "String", "name": "s", "description": "  The string that will be modified."}, {"type": "Object", "name": "o", "description": "  An object containing the replacement values"}, {"type": "Function", "name": "f", "description": "  An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."}], "guessedname": "substitute", "guessedtype": "function"}, "isNull": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is null", "guessedname": "isNull", "guessedtype": "function"}, "isValue": {"return": {"type": "boolean", "description": "true if it is not null\/undefined\/NaN || false"}, "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null\/undefined\/NaN, true for other values, \nincluding 0\/false\/''", "since": "2.3.0", "params": [{"type": "any", "name": "o", "description": "  the item to test"}], "guessedname": "isValue", "guessedtype": "function"}, "hasOwnProperty": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.\nThis abstraction is provided to enable hasOwnProperty for Safari 1.3.x.\nThere is a discrepancy between YAHOO.lang.hasOwnProperty and\nObject.prototype.hasOwnProperty when the property is a primitive added to\nboth the instance AND prototype with the same value:\n<pre>\nvar A = function() {};\nA.prototype.foo = 'foo';\nvar a = new A();\na.foo = 'foo';\nalert(a.hasOwnProperty('foo')); \/\/ true\nalert(YAHOO.lang.hasOwnProperty(a, 'foo')); \/\/ false when using fallback\n<\/pre>", "guessedname": "hasOwnProperty", "guessedtype": "function"}, "augment": {"description": "Same as YAHOO.lang.augmentObject, except it only applies prototype \nproperties.  This is an alias for augmentProto.", "see": "YAHOO.lang.augmentObject", "static": "", "guessedname": "augment", "guessedtype": "property", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*|boolean", "name": "arguments", "description": " zero or more properties methods to \naugment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver.  if true\nis specified as the third parameter, all properties will\nbe applied and will overwrite an existing property in\nthe receiver"}]}, "augmentProto": {"description": "Same as YAHOO.lang.augmentObject, except it only applies prototype properties", "see": "YAHOO.lang.augmentObject", "static": "", "guessedname": "augmentProto", "guessedtype": "function", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*|boolean", "name": "arguments", "description": " zero or more properties methods \nto augment the receiver with.  If none specified, everything \nin the supplier will be used unless it would overwrite an existing \nproperty in the receiver.  if true is specified as the third \nparameter, all properties will be applied and will overwrite an \nexisting property in the receiver"}]}, "isFunction": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a function", "guessedname": "isFunction", "guessedtype": "function"}, "isNumber": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a legal number", "guessedname": "isNumber", "guessedtype": "function"}, "isObject": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is of type object\nor function", "guessedname": "isObject", "guessedtype": "function"}, "dump": {"return": {"type": "String", "description": "the dump result"}, "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.", "since": "2.3.0", "params": [{"type": "Object", "name": "o", "description": "  The object to dump"}, {"type": "int", "name": "d", "description": "  How deep to recurse child objects, default 3"}], "guessedname": "dump", "guessedtype": "function"}, "isUndefined": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is undefined", "guessedname": "isUndefined", "guessedtype": "function"}}, "file": "Lang.js", "guessedtype": "property", "shortname": "YAHOO.lang", "properties": {"_IEEnumFix": {"description": "IE will not enumerate native functions in a derived object even if the\nfunction was overridden.  This is a workaround for specific functions \nwe care about on the Object prototype.", "param": "{Function} r  the object to receive the augmentation", "static": "", "private": "", "guessedname": "_IEEnumFix", "guessedtype": "function"}}, "name": "YAHOO.lang"}, "YAHOO.widget.DataTable": {"properties": {"DataTable.CLASS_LABEL": {"description": "Class name assigned to display label elements.", "default": "\"yui-dt-label\"", "static": "", "guessedname": "CLASS_LABEL", "guessedtype": "property", "type": "String", "final": ""}, "_sFirstTrId": {"guessedname": "_sFirstTrId", "type": "String", "description": "ID string of first TR element of the current DataTable page.", "private": "", "guessedtype": "property"}, "_oColumnSet": {"guessedname": "_oColumnSet", "type": "YAHOO.widget.ColumnSet", "description": "ColumnSet instance for the DataTable instance.", "private": "", "guessedtype": "property"}, "_elMsgTbody": {"guessedname": "_elMsgTbody", "type": "HTMLElement", "description": "DOM reference to the secondary TBODY element used to display DataTable messages.", "private": "", "guessedtype": "property"}, "_elCaption": {"guessedname": "_elCaption", "type": "HTMLElement", "description": "DOM reference to the CAPTION element for the DataTable instance.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_DISABLED": {"description": "Class name assigned to disabled elements.", "default": "\"yui-dt-disabled\"", "static": "", "guessedname": "CLASS_DISABLED", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.MSG_EMPTY": {"description": "Message to display if DataTable has no data.", "default": "\"No records found.\"", "static": "", "guessedname": "MSG_EMPTY", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_CHECKBOX": {"description": "Class name assigned to INPUT TYPE=CHECKBOX elements and\/or container elements.", "default": "\"yui-dt-checkbox\"", "static": "", "guessedname": "CLASS_CHECKBOX", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_PAGINATOR": {"description": "Class name assigned to paginator container elements.", "default": "\"yui-dt-paginator\"", "static": "", "guessedname": "CLASS_PAGINATOR", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_ERROR": {"description": "Class name assigned to error indicators.", "default": "\"yui-dt-error\"", "static": "", "guessedname": "CLASS_ERROR", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_TABLE": {"description": "Class name assigned to TABLE element.", "default": "\"yui-dt-table\"", "static": "", "guessedname": "CLASS_TABLE", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_DESC": {"description": "Class name assigned to descending elements.", "default": "\"yui-dt-desc\"", "static": "", "guessedname": "CLASS_DESC", "guessedtype": "property", "type": "String", "final": ""}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Unique name assigned to instance.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_HIGHLIGHTED": {"description": "Class name assigned to highlighted elements.", "default": "\"yui-dt-highlighted\"", "static": "", "guessedname": "CLASS_HIGHLIGHTED", "guessedtype": "property", "type": "String", "final": ""}, "_elMsgTbodyRow": {"guessedname": "_elMsgTbodyRow", "type": "HTMLElement", "description": "DOM reference to the secondary TBODY element's single TR element used to display DataTable messages.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_SCROLLBODY": {"description": "Class name assigned to the scrolling TBODY element of a fixed scrolling DataTable.", "default": "\"yui-dt-scrollbody\"", "static": "", "guessedname": "CLASS_SCROLLBODY", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_EVEN": {"description": "Class name assigned to even elements.", "default": "\"yui-dt-even\"", "static": "", "guessedname": "CLASS_EVEN", "guessedtype": "property", "type": "String", "final": ""}, "_elContainer": {"guessedname": "_elContainer", "type": "HTMLElement", "description": "DOM reference to the container element for the DataTable instance into which\nthe TABLE element gets created.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_NEXT": {"description": "Class name assigned next indicators.", "default": "\"yui-dt-next\"", "static": "", "guessedname": "CLASS_NEXT", "guessedtype": "property", "type": "String", "final": ""}, "_oAnchorCell": {"guessedname": "_oAnchorCell", "type": "Object", "description": "Object literal representing cell selection anchor:\n{recordId:sRecordId, columnId:sColumnId}.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_RESIZER": {"description": "Class name assigned to resizer handle elements.", "default": "\"yui-dt-resizer\"", "static": "", "guessedname": "CLASS_RESIZER", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_RADIO": {"description": "Class name assigned to INPUT TYPE=RADIO elements and\/or container elements.", "default": "\"yui-dt-radio\"", "static": "", "guessedname": "CLASS_RADIO", "guessedtype": "property", "type": "String", "final": ""}, "_sFirstLabelLinkId": {"guessedname": "_sFirstLabelLinkId", "type": "String", "description": "ID string of first label link element of the current DataTable page, if any.\nUsed for focusing sortable Columns with TAB.", "private": "", "guessedtype": "property"}, "DataTable.MSG_ERROR": {"description": "Message to display while DataTable has data error.", "default": "\"Data error.\"", "static": "", "guessedname": "MSG_ERROR", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_PREVIOUS": {"description": "Class name assigned to previous indicators.", "default": "\"yui-dt-previous\"", "static": "", "guessedname": "CLASS_PREVIOUS", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_DEFAULT": {"description": "Class name assigned to default indicators.", "default": "\"yui-dt-default\"", "static": "", "guessedname": "CLASS_DEFAULT", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_BODY": {"description": "Class name assigned to the primary TBODY element.", "default": "\"yui-dt-body\"", "static": "", "guessedname": "CLASS_BODY", "guessedtype": "property", "type": "String", "final": ""}, "_sLastTrId": {"guessedname": "_sLastTrId", "type": "String", "description": "ID string of the last TR element of the current DataTable page.", "private": "", "guessedtype": "property"}, "_sLastHighlightedTdElId": {"guessedname": "_sLastHighlightedTdElId", "type": "String", "description": "ID string of last highlighted cell element", "private": "", "guessedtype": "property"}, "DataTable.CLASS_BUTTON": {"description": "Class name assigned to BUTTON elements and\/or container elements.", "default": "\"yui-dt-button\"", "static": "", "guessedname": "CLASS_BUTTON", "guessedtype": "property", "type": "String", "final": ""}, "_elMsgTbodyCell": {"guessedname": "_elMsgTbodyCell", "type": "HTMLElement", "description": "DOM reference to the secondary TBODY element's single TD element used to display DataTable messages.", "private": "", "guessedtype": "property"}, "DataTable._nCount": {"description": "Internal class variable for indexing multiple DataTable instances.", "private": "", "static": "", "guessedname": "_nCount", "guessedtype": "property", "type": "Number"}, "DataTable.CLASS_PAGE": {"description": "Class name assigned to page number indicators.", "default": "\"yui-dt-page\"", "static": "", "guessedname": "CLASS_PAGE", "guessedtype": "property", "type": "String", "final": ""}, "_aSelections": {"guessedname": "_aSelections", "type": "Object[]", "description": "Array to track row selections (by sRecordId) and\/or cell selections\n(by {recordId:sRecordId, columnId:sColumnId})", "private": "", "guessedtype": "property"}, "DataTable.CLASS_ASC": {"description": "Class name assigned to ascending elements.", "default": "\"yui-dt-asc\"", "static": "", "guessedname": "CLASS_ASC", "guessedtype": "property", "type": "String", "final": ""}, "_elTable": {"guessedname": "_elTable", "type": "HTMLElement", "description": "DOM reference to the TABLE element for the DataTable instance.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_EMPTY": {"description": "Class name assigned to empty indicators.", "default": "\"yui-dt-empty\"", "static": "", "guessedname": "CLASS_EMPTY", "guessedtype": "property", "type": "String", "final": ""}, "_oDataSource": {"guessedname": "_oDataSource", "type": "YAHOO.util.DataSource", "description": "DataSource instance for the DataTable instance.", "private": "", "guessedtype": "property"}, "_oRecordSet": {"guessedname": "_oRecordSet", "type": "YAHOO.widget.RecordSet", "description": "RecordSet instance for the DataTable instance.", "private": "", "guessedtype": "property"}, "_nIndex": {"guessedname": "_nIndex", "type": "Number", "description": "Index assigned to instance.", "private": "", "guessedtype": "property"}, "_sLastHighlightedTrElId": {"guessedname": "_sLastHighlightedTrElId", "type": "String", "description": "ID string of last highlighted row element", "private": "", "guessedtype": "property"}, "_elThead": {"guessedname": "_elThead", "type": "HTMLElement", "description": "DOM reference to the THEAD element for the DataTable instance.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_DROPDOWN": {"description": "Class name assigned to SELECT elements and\/or container elements.", "default": "\"yui-dt-dropdown\"", "static": "", "guessedname": "CLASS_DROPDOWN", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_HEADER": {"description": "Class name assigned to header container elements within each TH element.", "default": "\"yui-dt-header\"", "static": "", "guessedname": "CLASS_HEADER", "guessedtype": "property", "type": "String", "final": ""}, "_oAnchorRecord": {"guessedname": "_oAnchorRecord", "type": "YAHOO.widget.Record", "description": "Record instance of the row selection anchor.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_EDITOR": {"description": "Class name assigned to Editor container elements.", "default": "\"yui-dt-editor\"", "static": "", "guessedname": "CLASS_EDITOR", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_LAST": {"description": "Class name assigned to last elements.", "default": "\"yui-dt-last\"", "static": "", "guessedname": "CLASS_LAST", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_ODD": {"description": "Class name assigned to odd elements.", "default": "\"yui-dt-odd\"", "static": "", "guessedname": "CLASS_ODD", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_FIRST": {"description": "Class name assigned to first elements.", "default": "\"yui-dt-first\"", "static": "", "guessedname": "CLASS_FIRST", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_SCROLLABLE": {"description": "Class name assigned to scrollable elements.", "default": "\"yui-dt-scrollable\"", "static": "", "guessedname": "CLASS_SCROLLABLE", "guessedtype": "property", "type": "String", "final": ""}, "_elTbody": {"guessedname": "_elTbody", "type": "HTMLElement", "description": "DOM reference to the primary TBODY element for the DataTable instance.", "private": "", "guessedtype": "property"}, "DataTable.MSG_LOADING": {"description": "Message to display while DataTable is loading data.", "default": "\"Loading data...\"", "static": "", "guessedname": "MSG_LOADING", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_SELECTED": {"description": "Class name assigned to selected elements.", "default": "\"yui-dt-selected\"", "static": "", "guessedname": "CLASS_SELECTED", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_LOADING": {"description": "Class name assigned to loading indicatorx.", "default": "\"yui-dt-loading\"", "static": "", "guessedname": "CLASS_LOADING", "guessedtype": "property", "type": "String", "final": ""}, "_nTrCount": {"guessedname": "_nTrCount", "type": "Number", "description": "Counter for IDs assigned to TR elements.", "private": "", "guessedtype": "property"}, "DataTable.CLASS_EDITABLE": {"description": "Class name assigned to editable elements.", "default": "\"yui-dt-editable\"", "static": "", "guessedname": "CLASS_EDITABLE", "guessedtype": "property", "type": "String", "final": ""}, "DataTable.CLASS_SORTABLE": {"description": "Class name assigned to sortable elements.", "default": "\"yui-dt-sortable\"", "static": "", "guessedname": "CLASS_SORTABLE", "guessedtype": "property", "type": "String", "final": ""}}, "name": "YAHOO.widget.DataTable", "constructors": [{"params": [{"type": "HTMLElement", "name": "elContainer", "description": "  Container element for the TABLE."}, {"type": "Object[]", "name": "aColumnDefs", "description": "  Array of object literal Column definitions."}, {"type": "YAHOO.util.DataSource", "name": "oDataSource", "description": "  DataSource instance."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "DataTable class for the YUI DataTable widget."}], "namespace": "YAHOO.widget", "module": "datatable", "events": {"headerCellDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a header cell has a dblclick."}, "headerRowMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a header row has a mousedown."}, "selectionModeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "selectionModeChangeEvent", "description": "Fires when the value for the configuration attribute 'selectionMode' changes."}, "cellHighlightEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The highlighted TD element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The associated Record instance."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The associated Column instance."}, {"type": "String", "name": "oArgs.key", "description": "  (deprecated) The key of the highlighted cell."}], "description": "Fired when a cell is highlighted."}, "headerRowMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a header row has a mouseout."}, "headerLabelDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a header label has a dblclick."}, "headerRowClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a header row has a click."}, "paginatedChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "paginatedChangeEvent", "description": "Fires when the value for the configuration attribute 'paginated' changes."}, "cellFormatEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The formatted TD element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The associated Record instance."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The associated Column instance."}, {"type": "String", "name": "oArgs.key", "description": "  (deprecated) The key of the formatted cell."}], "description": "Fired when a cell is formatted."}, "cellMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a mouseout."}, "tableFocusEvent": {"description": "Fired when the DataTable has a focus."}, "beforePaginatedChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforePaginatedChangeEvent", "description": "Fires before the value for the configuration attribute 'paginated' changes. Return false to cancel the attribute change."}, "rowDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a dblclick."}, "headerCellMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a header cell has a mouseout."}, "tableMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a mousedown."}, "rowMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a mousedown."}, "editorBlurEvent": {"params": [{"type": "Object", "name": "oArgs.editor", "description": "  The Editor object literal."}], "description": "Fired when an active Editor has a blur."}, "rowMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a mouseover."}, "tableScrollEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's CONTAINER element (in IE)\nor the DataTable's TBODY element (everyone else)."}], "description": "Fired when a fixed scrolling DataTable has a scroll."}, "tableMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a mouseover."}, "sortedByChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "sortedByChangeEvent", "description": "Fires when the value for the configuration attribute 'sortedBy' changes."}, "beforeScrollableChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeScrollableChangeEvent", "description": "Fires before the value for the configuration attribute 'scrollable' changes. Return false to cancel the attribute change."}, "headerLabelClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a header label has a click."}, "headerRowMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a header row has a mouseover."}, "beforePaginatorChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforePaginatorChangeEvent", "description": "Fires before the value for the configuration attribute 'paginator' changes. Return false to cancel the attribute change."}, "beforeSelectionmodeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeSelectionmodeChangeEvent", "description": "Fires before the value for the configuration attribute 'selectionMode' changes. Return false to cancel the attribute change."}, "cellDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a dblclick."}, "cellUnhighlightEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The unhighlighted TD element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The associated Record instance."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The associated Column instance."}, {"type": "String", "name": "oArgs.key", "description": "  (deprecated) The key of the unhighlighted cell."}], "description": "Fired when a cell is unhighlighted."}, "radioClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The RADIO element."}], "description": "Fired when a RADIO element is clicked."}, "paginatorChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "paginatorChangeEvent", "description": "Fires when the value for the configuration attribute 'paginator' changes."}, "tableDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a dblclick."}, "headerCellMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a header cell has a mouseover."}, "editorSaveEvent": {"params": [{"type": "Object", "name": "oArgs.editor", "description": "  The Editor object literal."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data value."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data value."}], "description": "Fired when Editor input is saved."}, "tableBlurEvent": {"description": "Fired when the DataTable has a blur."}, "beforeSummaryChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeSummaryChangeEvent", "description": "Fires before the value for the configuration attribute 'summary' changes. Return false to cancel the attribute change."}, "beforeSortedbyChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeSortedbyChangeEvent", "description": "Fires before the value for the configuration attribute 'sortedBy' changes. Return false to cancel the attribute change."}, "rowUnselectEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The unselected TR element, if applicable."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The unselected Record."}], "description": "Fired when a row is unselected."}, "buttonClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The BUTTON element."}], "description": "Fired when a BUTTON element is clicked."}, "refreshEvent": {"description": "Fired when the DataTable's view is refreshed."}, "cellMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a mousedown."}, "initEvent": {"description": "Fired when the DataTable instance's initialization is complete."}, "tableMsgHideEvent": {"description": "Fired when the DataTable's message element is hidden."}, "headerRowDblclickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a header row has a dblclick."}, "dataReturnEvent": {"params": [{"type": "String", "name": "oArgs.request", "description": "  Original request."}, {"type": "Object", "name": "oArgs.response", "description": "  Response object."}], "description": "Fired when data is returned from DataSource but before it is consumed by\nDataTable."}, "summaryChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "summaryChangeEvent", "description": "Fires when the value for the configuration attribute 'summary' changes."}, "headerCellClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a header cell has a click."}, "editorKeydownEvent": {"params": [{"type": "Object", "name": "oArgs.editor", "description": "  The Editor object literal."}, {"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}], "description": "Fired when an active Editor has a keydown."}, "headerLabelMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a header label has a mouseout."}, "rowMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a mouseout."}, "tableMouseoutEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a mouseout."}, "cellUnselectEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The unselected TD element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The associated Record."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The associated Column instance."}, {"type": "String", "name": "oArgs.key", "description": "  (deprecated) The key of the unselected cell."}], "description": "Fired when a cell is unselected."}, "editorRevertEvent": {"params": [{"type": "Object", "name": "oArgs.editor", "description": "  The Editor object literal."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data value."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data value."}], "description": "Fired when Editor input is reverted."}, "beforeCaptionChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeCaptionChangeEvent", "description": "Fires before the value for the configuration attribute 'caption' changes. Return false to cancel the attribute change."}, "headerLabelMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a header label has a mousedown."}, "cellClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a click."}, "rowUpdateEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The updated Record."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Object literal of the old data."}], "description": "Fired when a row is updated."}, "initialRequestChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "initialRequestChangeEvent", "description": "Fires when the value for the configuration attribute 'initialRequest' changes."}, "rowAddEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The added Record."}], "description": "Fired when a row is added."}, "headerCellMousedownEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a header cell has a mousedown."}, "rowSelectEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The selected TR element, if applicable."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The selected Record."}], "description": "Fired when a row is selected."}, "cellSelectEvent": {"params": [{"type": "HTMLElement", "name": "oArgs.el", "description": "  The selected TD element."}, {"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The associated Record instance."}, {"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The associated Column instance."}, {"type": "String", "name": "oArgs.key", "description": "  (deprecated) The key of the selected cell."}], "description": "Fired when a cell is selected."}, "editorCancelEvent": {"params": [{"type": "Object", "name": "oArgs.editor", "description": "  The Editor object literal."}], "description": "Fired when Editor input is canceled."}, "rowClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TR element."}], "description": "Fired when a row has a click."}, "editorShowEvent": {"params": [{"type": "Object", "name": "oArgs.editor", "description": "  The Editor object literal."}], "description": "Fired when an Editor is activated."}, "columnSortEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}, {"type": "String", "name": "oArgs.dir", "description": "  Sort direction \"asc\" or \"desc\"."}], "description": "Fired when a column is sorted."}, "linkClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The A element."}], "description": "Fired when a link is clicked."}, "cellMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TD element."}], "description": "Fired when a cell has a mouseover."}, "checkboxClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The CHECKBOX element."}], "description": "Fired when a CHECKBOX element is clicked."}, "rowDeleteEvent": {"params": [{"type": "Object", "name": "oArgs.oldData", "description": "  Object literal of the deleted data."}, {"type": "Number", "name": "oArgs.recordIndex", "description": "  Index of the deleted Record."}, {"type": "Number", "name": "oArgs.trElIndex", "description": "  Index of the deleted TR element, if on current page."}], "description": "Fired when a row is deleted."}, "tableClickEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The DataTable's TABLE element."}], "description": "Fired when the DataTable has a click."}, "captionChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "captionChangeEvent", "description": "Fires when the value for the configuration attribute 'caption' changes."}, "tableMsgShowEvent": {"params": [{"type": "String", "name": "oArgs.html", "description": "  The HTML displayed."}, {"type": "String", "name": "oArgs.className", "description": "  The className assigned."}], "description": "Fired when a message is shown in the DataTable's message element."}, "headerLabelMouseoverEvent": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  The event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The SPAN element."}], "description": "Fired when a header label has a mouseover."}, "columnResizeEvent": {"params": [{"type": "YAHOO.widget.Column", "name": "oArgs.column", "description": "  The Column instance."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  The TH element."}], "description": "Fired when a column is resized."}, "scrollableChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "scrollableChangeEvent", "description": "Fires when the value for the configuration attribute 'scrollable' changes."}, "beforeInitialrequestChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeInitialrequestChangeEvent", "description": "Fires before the value for the configuration attribute 'initialRequest' changes. Return false to cancel the attribute change."}}, "guessedname": "DataTable", "methods": {"sortColumn": {"params": [{"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}], "description": "Sorts given Column.", "guessedname": "sortColumn", "guessedtype": "function"}, "_unselectAllTdEls": {"private": "", "description": "Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED\nfrom all TD elements in the internal tracker.", "guessedname": "_unselectAllTdEls", "guessedtype": "function"}, "getColumnById": {"return": {"type": "YAHOO.widget.Column", "description": "Column instance."}, "params": [{"type": "String", "name": "column", "description": "  Column ID string."}], "description": "For the given Column ID, returns the associated Column instance. Note: For\ngetting Columns by key, please use the method getColumn().", "guessedname": "getColumnById", "guessedtype": "function"}, "focus": {"description": "Brings focus to DataTable instance.", "guessedname": "focus", "guessedtype": "function"}, "DataTable.formatTextarea": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  (Optional) Data value for the cell."}], "description": "Formats TEXTAREA elements.", "guessedname": "formatTextarea", "guessedtype": "function"}, "initAttributes": {"guessedname": "initAttributes", "params": [{"type": "Object", "name": "oConfigs", "description": "  (Optional) Object literal definition of configuration values."}], "description": "Implementation of Element's abstract method. Sets up config values.", "private": "", "guessedtype": "function"}, "onEventSelectCell": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to select cell.", "guessedname": "onEventSelectCell", "guessedtype": "function"}, "getTrIndex": {"return": {"type": "Number", "description": "Page row index, or null if row does not exist or is not on current page."}, "params": [{"type": "HTMLElement | String | YAHOO.widget.Record | Number", "name": "row", "description": "  DOM or ID\nstring reference to an element within the DataTable page, a Record instance,\nor a Record's RecordSet index."}], "description": "Returns the page row index of given row. Returns null if the row is not on the\ncurrent DataTable page.", "guessedname": "getTrIndex", "guessedtype": "function"}, "_onTheadClick": {"guessedname": "_onTheadClick", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The click event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles click events on the THEAD element.", "private": "", "guessedtype": "function"}, "_onTbodyClick": {"guessedname": "_onTbodyClick", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The click event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles click events on the primary TBODY element.", "private": "", "guessedtype": "function"}, "_initDomEvents": {"private": "", "description": "Initializes DOM event listeners.", "guessedname": "_initDomEvents", "guessedtype": "function"}, "getLastSelectedRecord": {"return": {"type": "String", "description": "Record ID of last selected row."}, "description": "Returns last selected Record ID.", "guessedname": "getLastSelectedRecord", "guessedtype": "function"}, "onEventSaveCellEditor": {"params": [{"type": "Object", "name": "oArgs.editor", "description": "  Cell Editor object literal."}], "description": "Overridable custom event handler to save Cell Editor input.", "guessedname": "onEventSaveCellEditor", "guessedtype": "function"}, "_initTheadEl": {"private": "", "description": "Populates THEAD element with TH cells as defined by ColumnSet.", "guessedname": "_initTheadEl", "guessedtype": "function"}, "editCheckbox": {"static": "", "params": [{"type": "Object", "name": "oEditor", "description": "  Object literal representation of Editor values."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  Reference back to DataTable instance."}], "description": "Enables CHECKBOX Editor."}, "showTableMessage": {"params": [{"type": "String", "name": "sHTML", "description": "  (optional) Value for innerHTML."}, {"type": "String", "name": "sClassName", "description": "  (optional) Classname."}], "description": "Displays message within secondary TBODY.", "guessedname": "showTableMessage", "guessedtype": "function"}, "unhighlightCell": {"params": [{"type": "HTMLElement | String", "name": "cell", "description": "  DOM element reference or ID string."}], "description": "Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given cell.", "guessedname": "unhighlightCell", "guessedtype": "function"}, "getTableEl": {"return": {"type": "HTMLElement", "description": "Reference to TABLE element."}, "description": "Returns DOM reference to the DataTable's TABLE element.", "guessedname": "getTableEl", "guessedtype": "function"}, "getThEl": {"return": {"type": "HTMLElement", "description": "Reference to TH element."}, "params": [{"type": "YAHOO.widget.Column | HTMLElement | String", "name": "header", "description": "  Column instance,\nDOM element reference, or string ID."}], "description": "Returns DOM reference to a TH element.", "guessedname": "getThEl", "guessedtype": "function"}, "_onDataReturnEnhanceTable": {"guessedname": "_onDataReturnEnhanceTable", "params": [{"type": "String", "name": "sRequest", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "Boolean", "name": "bError", "description": "  (optional) True if there was a data error."}], "description": "Callback function for creating a progressively enhanced DataTable first\nreceives data from DataSource and populates the RecordSet, then initializes\nDOM elements.", "private": "", "guessedtype": "function"}, "DataTable.formatRadio": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  (Optional) Data value for the cell."}], "description": "Formats INPUT TYPE=RADIO elements.", "guessedname": "formatRadio", "guessedtype": "function"}, "highlightRow": {"params": [{"type": "HTMLElement | String", "name": "row", "description": "  DOM element reference or ID string."}], "description": "Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given row.", "guessedname": "highlightRow", "guessedtype": "function"}, "onEventHighlightRow": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to highlight row.", "guessedname": "onEventHighlightRow", "guessedtype": "function"}, "_initCellEditorEl": {"private": "", "description": "Creates HTML markup for Cell Editor.", "guessedname": "_initCellEditorEl", "guessedtype": "function"}, "showCellEditor": {"params": [{"type": "HTMLElement | String", "name": "elCell", "description": "  Cell element to edit."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  (Optional) Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  (Optional) Column instance."}], "description": "Shows Cell Editor for given cell.", "guessedname": "showCellEditor", "guessedtype": "function"}, "getSelectedRows": {"return": {"type": "String[]", "description": "Array of selected rows by Record ID."}, "description": "Returns selected rows as an array of Record IDs.", "guessedname": "getSelectedRows", "guessedtype": "function"}, "getTdEl": {"return": {"type": "HTMLElement", "description": "Reference to TD element."}, "params": [{"type": "HTMLElement | String | Object} DOM element reference or string ID, or\nobject literal of syntax {record:oRecord, column:oColumn", "name": "cell", "description": " ."}], "description": "Returns DOM reference to a TD element.", "guessedname": "getTdEl", "guessedtype": "function"}, "addRows": {"params": [{"type": "Object[]", "name": "aData", "description": "  Array of object literal data for the rows."}, {"type": "Number", "name": "index", "description": "  (optional) RecordSet position index at which to add data."}], "description": "Convenience method to add multiple rows.", "guessedname": "addRows", "guessedtype": "function"}, "onEventHighlightCell": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to highlight cell.", "guessedname": "onEventHighlightCell", "guessedtype": "function"}, "addRow": {"params": [{"type": "Object", "name": "oData", "description": "  Object literal of data for the row."}, {"type": "Number", "name": "index", "description": "  (optional) RecordSet position index at which to add data."}], "description": "Adds one new Record of data into the RecordSet at the index if given,\notherwise at the end. If the new Record is in page view, the\ncorresponding DOM elements are also updated.", "guessedname": "addRow", "guessedtype": "function"}, "_onPaginatorLinkClick": {"guessedname": "_onPaginatorLinkClick", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The click event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles click events on paginator links.", "private": "", "guessedtype": "function"}, "editTextbox": {"static": "", "params": [{"type": "Object", "name": "oEditor", "description": "  Object literal representation of Editor values."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  Reference back to DataTable instance."}], "description": "Enables INPUT TYPE=TEXT Editor.", "guessedname": "editTextbox", "guessedtype": "function"}, "_onTableMousedown": {"guessedname": "_onTableMousedown", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The mousedown event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles mousedown events on the TABLE element.", "private": "", "guessedtype": "function"}, "_initDataSource": {"guessedname": "_initDataSource", "params": [{"type": "YAHOO.util.DataSource", "name": "oDataSource", "description": "  DataSource instance."}], "description": "Initializes DataSource.", "private": "", "guessedtype": "function"}, "_onDropdownChange": {"guessedname": "_onDropdownChange", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The change event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles change events on SELECT elements within DataTable.", "private": "", "guessedtype": "function"}, "DataTable.formatCheckbox": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object | Boolean} Data value for the cell. Can be a simple\nBoolean to indicate whether checkbox is checked or not. Can be object literal\n{checked:bBoolean, label:sLabel", "name": "oData", "description": " . Other forms of oData require a custom\nformatter."}], "description": "Formats a CHECKBOX element.", "guessedname": "formatCheckbox", "guessedtype": "function"}, "updatePaginator": {"params": [{"type": "Object", "name": "oNewValues", "description": "  (Optional) Object literal of Paginator values, or\na subset of Paginator values."}, {"type": "Object", "name": "Object", "description": " literal of all Paginator values."}], "description": "Updates Paginator values in response to RecordSet changes and\/or DOM events.\nPass in all, a subset, or no values.", "guessedname": "updatePaginator", "guessedtype": "function"}, "editTextarea": {"static": "", "params": [{"type": "Object", "name": "oEditor", "description": "  Object literal representation of Editor values."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  Reference back to DataTable instance."}], "description": "Enables TEXTAREA Editor.", "guessedname": "editTextarea", "guessedtype": "function"}, "deleteRows": {"params": [{"type": "HTMLElement | String | Number", "name": "row", "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."}, {"type": "Number", "name": "count", "description": "  (optional) How many rows to delete. A negative value\nwill delete towards the beginning."}], "description": "Convenience method to delete multiple rows.", "guessedname": "deleteRows", "guessedtype": "function"}, "_initColumnSort": {"private": "", "description": "Initializes Column sorting.", "guessedname": "_initColumnSort", "guessedtype": "function"}, "getRecordSet": {"return": {"type": "YAHOO.widget.RecordSet", "description": "RecordSet instance."}, "description": "Returns the DataTable instance's RecordSet instance.", "guessedname": "getRecordSet", "guessedtype": "function"}, "updateRow": {"params": [{"type": "YAHOO.widget.Record | Number | HTMLElement | String", "name": "row", "description": " \nWhich row to update: By Record instance, by Record's RecordSet\nposition index, by HTMLElement reference to the TR element, or by ID string\nof the TR element."}, {"type": "Object", "name": "oData", "description": "  Object literal of data for the row."}], "description": "For the given row, updates the associated Record with the given data. If the\nrow is on current page, the corresponding DOM elements are also updated.", "guessedname": "updateRow", "guessedtype": "function"}, "hideTableMessage": {"description": "Hides secondary TBODY.", "guessedname": "hideTableMessage", "guessedtype": "function"}, "onEventUnhighlightCell": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to unhighlight cell.", "guessedname": "onEventUnhighlightCell", "guessedtype": "function"}, "formatPaginatorDropdown": {"params": [{"type": "HTMLElement", "name": "elDropdown", "description": "  The SELECT element."}, {"type": "Object[]", "name": "dropdownOptions", "description": "  OPTION values for display in the SELECT element."}], "description": "Updates Paginator dropdown. If dropdown doesn't exist, the markup is created.\nSets dropdown elements's \"selected\" value.", "guessedname": "formatPaginatorDropdown", "guessedtype": "function"}, "DataTable.formatCurrency": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Number", "name": "oData", "description": "  Data value for the cell."}], "description": "Formats currency. Default unit is USD.", "guessedname": "formatCurrency", "guessedtype": "function"}, "isSelected": {"return": {"type": "Boolean", "description": "True if item is selected."}, "params": [{"type": "String | HTMLElement | YAHOO.widget.Record | Number\n{record:YAHOO.widget.Record, column:YAHOO.widget.Column} ", "name": "o", "description": "  TR or TD element by\nreference or ID string, a Record instance, a RecordSet position index,\nor an object literal representation\nof a cell."}], "description": "Returns true if given item is selected, false otherwise.", "guessedname": "isSelected", "guessedtype": "function"}, "deleteRow": {"params": [{"type": "HTMLElement | String | Number", "name": "row", "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."}], "description": "Deletes the given row's Record from the RecordSet. If the row is on current page,\nthe corresponding DOM elements are also deleted.", "guessedname": "deleteRow", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the DataSource instance."}, "description": "Public accessor to the unique name of the DataSource instance.", "guessedname": "toString", "guessedtype": "function"}, "getTbodyEl": {"return": {"type": "HTMLElement", "description": "Reference to TBODY element."}, "description": "Returns DOM reference to the DataTable's primary TBODY element.", "guessedname": "getTbodyEl", "guessedtype": "function"}, "DataTable.formatLink": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  Data value for the cell, or null."}], "description": "Formats links.", "guessedname": "formatLink", "guessedtype": "function"}, "getColumnSet": {"return": {"type": "YAHOO.widget.ColumnSet", "description": "ColumnSet instance."}, "description": "Returns the DataTable instance's ColumnSet instance.", "guessedname": "getColumnSet", "guessedtype": "function"}, "_initContainerEl": {"guessedname": "_initContainerEl", "params": [{"type": "HTMLElement | String", "name": "elContainer", "description": "  HTML DIV element by reference or ID."}], "description": "Initializes container element.", "private": "", "guessedtype": "function"}, "onEventShowCellEditor": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to edit cell.", "guessedname": "onEventShowCellEditor", "guessedtype": "function"}, "formatPaginators": {"description": "Updates Paginator containers with markup. Override this method to customize pagination UI.", "guessedname": "formatPaginators", "guessedtype": "function"}, "_initColumnSet": {"guessedname": "_initColumnSet", "params": [{"type": "Object[]", "name": "aColumnDefs", "description": "  Array of object literal Column definitions."}], "description": "Initializes ColumnSet.", "private": "", "guessedtype": "function"}, "getMsgTdEl": {"return": {"type": "HTMLElement", "description": "Reference to TD element."}, "description": "Returns DOM reference to the TD element within the secondary TBODY that is\nused to display messages.", "guessedname": "getMsgTdEl", "guessedtype": "function"}, "showCellEditorBtns": {"params": [{"type": "HTMLElement", "name": "elContainer", "description": "  Cell Editor container."}], "description": "Adds Save\/Cancel buttons to Cell Editor.", "guessedname": "showCellEditorBtns", "guessedtype": "function"}, "DataTable.formatEmail": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  Data value for the cell, or null."}], "description": "Formats emails.", "guessedname": "formatEmail", "guessedtype": "function"}, "unselectCell": {"params": [{"type": "HTMLElement | String", "name": "cell", "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."}], "description": "Sets given cell to the unselected state.", "guessedname": "unselectCell", "guessedtype": "function"}, "_onTableMouseout": {"guessedname": "_onTableMouseout", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The mouseout event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles mouseout events on the TABLE element.", "private": "", "guessedtype": "function"}, "getCellEditor": {"return": {"type": "Object", "description": "Cell Editor object literal values."}, "description": "Returns the DataTable instance's Cell Editor as an object literal with the\nfollowing properties:\n<dl>\n<dt>cell<\/dt>\n<dd>{HTMLElement} Cell element being edited.<\/dd>\n<dt>column<\/dt>\n<dd>{YAHOO.widget.Column} Associated Column instance.<\/dd>\n<dt>container<\/dt>\n<dd>{HTMLElement} Reference to editor's container DIV element.<\/dd>\n<dt>isActive<\/dt>\n<dd>{Boolean} True if cell is currently being edited.<\/dd>\n<dt>record<\/dt>\n<dd>{YAHOO.widget.Record} Associated Record instance.<\/dd>\n<dt>validator<\/dt>\n<dd>{HTMLFunction} Associated validator function called before new data is stored. Called\nwithin the scope of the DataTable instance, the function receieves the\nfollowing arguments:\n<dl>\n<dt>oNewData<\/dt>\n<dd>{Object} New data to validate.<\/dd>\n<dt>oOldData<\/dt>\n<dd>{Object} Original data in case of reversion.<\/dd>\n<dt>oCellEditor<\/dt>\n<dd>{Object} Object literal representation of Editor values.<\/dd>\n<\/dl>\n<\/dd>\n<dt>value<\/dt>\n<dd>Current input value<\/dd>\n<\/dl>", "guessedname": "getCellEditor", "guessedtype": "function"}, "onEventFormatCell": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to format cell.", "guessedname": "onEventFormatCell", "guessedtype": "function"}, "_setRowStripes": {"guessedname": "_setRowStripes", "params": [{"type": "HTMLElement | String | Number", "name": "row", "description": "  (optional) HTML TR element reference\nor string ID, or page row index of where to start striping."}, {"type": "Number", "name": "range", "description": "  (optional) If given, how many rows to stripe, otherwise\nstripe all the rows until the end."}], "description": "Assigns the classes YAHOO.widget.DataTable.CLASS_EVEN and\nYAHOO.widget.DataTable.CLASS_ODD to alternating TR elements of the DataTable\npage. For performance, a subset of rows may be specified.", "private": "", "guessedtype": "function"}, "_deleteTrEl": {"return": {"type": "Boolean", "description": "Returns true if successful, else returns false."}, "description": "Deletes TR element by DOM reference or by DataTable page row index.", "private": "", "params": [{"type": "HTMLElement | Number", "name": "row", "description": "  TR element reference or Datatable page row index."}], "guessedname": "_deleteTrEl", "guessedtype": "function"}, "onEventUnhighlightRow": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to unhighlight row.", "guessedname": "onEventUnhighlightRow", "guessedtype": "function"}, "unselectAllRows": {"description": "Clears out all row selections.", "guessedname": "unselectAllRows", "guessedtype": "function"}, "getSelectedTdEls": {"return": {"type": "HTMLElement[]", "description": "Array of selected TD elements."}, "description": "Returns array of selected TD elements on the page.", "guessedname": "getSelectedTdEls", "guessedtype": "function"}, "onDataReturnInitializeTable": {"params": [{"type": "String", "name": "sRequest", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "Boolean", "name": "bError", "description": "  (optional) True if there was a data error."}], "description": "Callback function receives data from DataSource and populates an entire\nDataTable with Records and TR elements, clearing previous Records, if any.", "guessedname": "onDataReturnInitializeTable", "guessedtype": "function"}, "doBeforeShowCellEditor": {"params": [{"type": "Object", "name": "oCellEditor", "description": "  Cell Editor object literal."}], "description": "Overridable abstract method to customize Cell Editor UI.", "guessedname": "doBeforeShowCellEditor", "guessedtype": "function"}, "_setFirstRow": {"private": "", "description": "Assigns the class YAHOO.widget.DataTable.CLASS_FIRST to the first TR element\nof the DataTable page and updates internal tracker.", "guessedname": "_setFirstRow", "guessedtype": "function"}, "_onDocumentKeydown": {"guessedname": "_onDocumentKeydown", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The keydown event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles keydown events on the DOCUMENT.", "private": "", "guessedtype": "function"}, "_onDocumentClick": {"guessedname": "_onDocumentClick", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The click event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles click events on the DOCUMENT.", "private": "", "guessedtype": "function"}, "getMsgTbodyEl": {"return": {"type": "HTMLElement", "description": "Reference to TBODY element."}, "description": "Returns DOM reference to the DataTable's secondary TBODY element that is\nused to display messages.", "guessedname": "getMsgTbodyEl", "guessedtype": "function"}, "_onTableFocus": {"guessedname": "_onTableMouseover", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The focus event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles focus events on the TABLE element.", "private": "", "guessedtype": "function"}, "getColumn": {"return": {"type": "YAHOO.widget.Column", "description": "Column instance."}, "params": [{"type": "HTMLElement | String | Number", "name": "column", "description": "  DOM reference or ID string to a\nTH\/TD element (or child of a TH\/TD element), a Column key, or a ColumnSet key index."}], "description": "For the given identifier, returns the associated Column instance. Note: For\ngetting Columns by Column ID string, please use the method getColumnById().", "guessedname": "getColumn", "guessedtype": "function"}, "DataTable.formatNumber": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  Data value for the cell, or null."}], "description": "Formats numbers.", "guessedname": "formatNumber", "guessedtype": "function"}, "onEventSelectRow": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to manage selection according to desktop paradigm.", "guessedname": "onEventSelectRow", "guessedtype": "function"}, "getDataSource": {"return": {"type": "YAHOO.util.DataSource", "description": "DataSource instance."}, "description": "Returns the DataTable instance's DataSource instance.", "guessedname": "getDataSource", "guessedtype": "function"}, "formatPaginatorLinks": {"params": [{"type": "HTMLElement", "name": "elContainer", "description": "  The link container element."}, {"type": "Number", "name": "nCurrentPage", "description": "  Current page."}, {"type": "Number", "name": "nPageLinksStart", "description": "  First page link to display."}, {"type": "Number", "name": "nPageLinksLength", "description": "  How many page links to display."}, {"type": "Number", "name": "nTotalPages", "description": "  Total number of pages."}], "description": "Updates Paginator links container with markup.", "guessedname": "formatPaginatorLinks", "guessedtype": "function"}, "_initRecordSet": {"private": "", "description": "Initializes RecordSet.", "guessedname": "_initRecordSet", "guessedtype": "function"}, "_updateTrEl": {"return": {"type": "String", "description": "ID of the updated TR element, or null."}, "description": "Formats all TD elements of given TR element with data from the given Record.", "private": "", "params": [{"type": "HTMLElement", "name": "elRow", "description": "  The TR element to update."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  The associated Record instance."}], "guessedname": "_updateTrEl", "guessedtype": "function"}, "_initTableEl": {"private": "", "description": "Creates HTML markup for TABLE, THEAD and TBODY elements.", "guessedname": "_initTableEl", "guessedtype": "function"}, "onDataReturnInsertRows": {"params": [{"type": "String", "name": "sRequest", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "Boolean", "name": "bError", "description": "  (optional) True if there was a data error."}], "description": "Callback function receives data from DataSource and inserts into top of an\nexisting DataTable new Records and, if applicable, creates or updates\ncorresponding TR elements.", "guessedname": "onDataReturnInsertRows", "guessedtype": "function"}, "saveCellEditor": {"description": "Saves Cell Editor input to Record.", "guessedname": "saveCellEditor", "guessedtype": "function"}, "unhighlightRow": {"params": [{"type": "HTMLElement | String", "name": "row", "description": "  DOM element reference or ID string."}], "description": "Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given row.", "guessedname": "unhighlightRow", "guessedtype": "function"}, "getSelectedCells": {"return": {"type": "Object[]", "description": "Array of selected cells by Record ID and Column ID."}, "description": "Returns selected cells as an array of object literals:\n{recordId:sRecordId, columnId:sColumnId}.", "guessedname": "getSelectedCells", "guessedtype": "function"}, "DataTable.formatTextbox": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  (Optional) Data value for the cell."}], "description": "Formats INPUT TYPE=TEXT elements.", "guessedname": "formatTextbox", "guessedtype": "function"}, "_setLastRow": {"private": "", "description": "Assigns the class YAHOO.widget.DataTable.CLASS_LAST to the last TR element\nof the DataTable page and updates internal tracker.", "guessedname": "_setLastRow", "guessedtype": "function"}, "selectRow": {"param": "row {HTMLElement | String | YAHOO.widget.Record | Number} HTML element\nreference or ID string, Record instance, or RecordSet position index.", "params": [{"type": "HTMLElement | String | YAHOO.widget.Record | Number", "name": "row", "description": "  HTML element\nreference or ID string, Record instance, or RecordSet position index."}], "description": "Sets given row to the selected state.", "guessedname": "selectRow", "guessedtype": "function"}, "getLastTrEl": {"return": {"type": "HTMLElement", "description": "Reference to last TR element."}, "description": "Returns DOM reference to the last TR element in the DataTable page, or null.", "guessedname": "getLastTrEl", "guessedtype": "function"}, "editDate": {"static": "", "params": [{"type": "Object", "name": "oEditor", "description": "  Object literal representation of Editor values."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  Reference back to DataTable instance."}], "description": "Enables Date Editor.", "guessedname": "editDate", "guessedtype": "function"}, "_onScroll": {"guessedname": "_onScroll", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The scroll event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles scroll events on the CONTAINER (for IE) and TBODY elements (for everyone else).", "private": "", "guessedtype": "function"}, "DataTable.formatText": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  (Optional) Data value for the cell."}], "description": "Formats text strings.", "guessedname": "formatText", "guessedtype": "function"}, "_onTableKeydown": {"guessedname": "_onTableKeydown", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The key event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles keydown events on the TABLE element. Handles arrow selection.", "private": "", "guessedtype": "function"}, "_addTrEl": {"return": {"type": "String", "description": "ID of the added TR element, or null."}, "description": "Adds a TR element to the primary TBODY at the page row index if given, otherwise\nat the end of the page. Formats TD elements within the TR element using data\nfrom the given Record.", "private": "", "params": [{"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "Number", "name": "index", "description": "  (optional) The page row index at which to add the TR\nelement."}], "guessedname": "_addTrEl", "guessedtype": "function"}, "_initConfigs": {"guessedname": "_initConfigs", "params": [{"type": "Object", "name": "oConfig", "description": "  Object literal of config values."}], "description": "Initializes object literal of config values.", "private": "", "guessedtype": "function"}, "_initThEl": {"guessedname": "_initThEl", "params": [{"type": "HTMLElement", "name": "elTheadCell", "description": "  TH cell element reference."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column object."}, {"type": "number", "name": "row", "description": "  Row index."}, {"type": "number", "name": "col", "description": "  Column index."}], "description": "Populates TH cell as defined by Column.", "private": "", "guessedtype": "function"}, "onDataReturnAppendRows": {"params": [{"type": "String", "name": "sRequest", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "Boolean", "name": "bError", "description": "  (optional) True if there was a data error."}], "description": "Callback function receives data from DataSource and appends to an existing\nDataTable new Records and, if applicable, creates or updates\ncorresponding TR elements.", "guessedname": "onDataReturnAppendRows", "guessedtype": "function"}, "getTheadEl": {"return": {"type": "HTMLElement", "description": "Reference to THEAD element."}, "description": "Returns DOM reference to the DataTable's THEAD element.", "guessedname": "getTheadEl", "guessedtype": "function"}, "editRadio": {"static": "", "params": [{"type": "Object", "name": "oEditor", "description": "  Object literal representation of Editor values."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  Reference back to DataTable instance."}], "description": "Enables INPUT TYPE=RADIO Editor.", "guessedname": "editRadio", "guessedtype": "function"}, "getSelectedTrEls": {"return": {"type": "HTMLElement[]", "description": "Array of selected TR elements."}, "description": "Returns array of selected TR elements on the page.", "guessedname": "getSelectedTrEls", "guessedtype": "function"}, "_focusEl": {"guessedname": "_focusEl", "params": [{"type": "HTMLElement", "name": "el", "description": "  Element."}], "description": "Sets focus on the given element.", "private": "", "guessedtype": "function"}, "getFirstTrEl": {"return": {"type": "HTMLElement", "description": "Reference to TR element."}, "description": "Returns DOM reference to the first TR element in the DataTable page, or null.", "guessedname": "getFirstTrEl", "guessedtype": "function"}, "showPage": {"params": [{"type": "Number", "name": "nPage", "description": "  Which page."}], "description": "Displays given page of a paginated DataTable.", "guessedname": "showPage", "guessedtype": "function"}, "getRecord": {"return": {"type": "YAHOO.widget.Record", "description": "Record instance."}, "params": [{"type": "HTMLElement | Number | String", "name": "row", "description": "  DOM reference to a TR element (or\nchild of a TR element), RecordSet position index, or Record ID."}], "description": "For the given identifier, returns the associated Record instance.", "guessedname": "getRecord", "guessedtype": "function"}, "initializeTable": {"params": [{"type": "Object | Object[]", "name": "oData", "description": "  An object literal of data or an array of\nobject literals containing data."}], "description": "Resets a RecordSet with the given data and populates the page view\nwith the new data. Any previous data and selection states are cleared.\nHowever, sort states are not cleared, so if the given data is in a particular\nsort order, implementers should take care to reset the sortedBy property. If\npagination is enabled, the currentPage is shown and Paginator UI updated,\notherwise all rows are displayed as a single page. For performance, existing\nDOM elements are reused when possible.", "guessedname": "initializeTable", "guessedtype": "function"}, "highlightCell": {"params": [{"type": "HTMLElement | String", "name": "cell", "description": "  DOM element reference or ID string."}], "description": "Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given cell.", "guessedname": "highlightCell", "guessedtype": "function"}, "destroy": {"description": "Nulls out the entire DataTable instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container. After\ncalling this method, the instance reference should be expliclitly nulled by\nimplementer, as in myDataTable = null. Use with caution!", "guessedname": "destroy", "guessedtype": "function"}, "DataTable.formatButton": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object | Boolean", "name": "oData", "description": "  Data value for the cell. By default, the value\nis what gets written to the BUTTON."}], "description": "Formats a BUTTON element.", "guessedname": "formatButton", "guessedtype": "function"}, "DataTable.formatDropdown": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  Data value for the cell, or null."}], "description": "Formats SELECT elements.", "guessedname": "formatDropdown", "guessedtype": "function"}, "selectCell": {"params": [{"type": "HTMLElement | String", "name": "cell", "description": "  DOM element reference or ID string\nto DataTable page element or RecordSet index."}], "description": "Sets given cell to the selected state.", "guessedname": "selectCell", "guessedtype": "function"}, "cancelCellEditor": {"description": "Cancels Cell Editor.", "guessedname": "cancelCellEditor", "guessedtype": "function"}, "_unselectAllTrEls": {"private": "", "description": "Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED\nfrom all TR elements on the page.", "guessedname": "_unselectAllTrEls", "guessedtype": "function"}, "resetCellEditor": {"description": "Clears Cell Editor of all state and UI.", "guessedname": "resetCellEditor", "guessedtype": "function"}, "editDropdown": {"static": "", "params": [{"type": "Object", "name": "oEditor", "description": "  Object literal representation of Editor values."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  Reference back to DataTable instance."}], "description": "Enables SELECT Editor.", "guessedname": "editDropdown", "guessedtype": "function"}, "_onPaginatorDropdownChange": {"guessedname": "_onPaginatorDropdownChange", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The change event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles change events on paginator SELECT element.", "private": "", "guessedtype": "function"}, "onEventSortColumn": {"params": [{"type": "HTMLEvent", "name": "oArgs.event", "description": "  Event object."}, {"type": "HTMLElement", "name": "oArgs.target", "description": "  Target element."}], "description": "Overridable custom event handler to sort Column.", "guessedname": "onEventSortColumn", "guessedtype": "function"}, "getRecordIndex": {"return": {"type": "Number", "description": "Record's RecordSet index, or null."}, "params": [{"type": "YAHOO.widget.Record | HTMLElement | Number", "name": "row", "description": "  Record instance, TR\nelement reference or page row index."}], "description": "Returns Record index for given TR element or page row index.", "guessedname": "getRecordIndex", "guessedtype": "function"}, "doBeforeLoadData": {"return": {"type": "Boolean", "description": "Return true to continue loading data into RecordSet and\nupdating DataTable with new Records, false to cancel."}, "params": [{"type": "String", "name": "sRequest", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}], "description": "Overridable method gives implementers a hook to access data before\nit gets added to RecordSet and rendered to the TBODY.", "guessedname": "doBeforeLoadData", "guessedtype": "function"}, "_onTableDblclick": {"guessedname": "_onTableDblclick", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The dblclick event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles dblclick events on the TABLE element.", "private": "", "guessedtype": "function"}, "getLastSelectedCell": {"return": {"type": "Object", "description": "Object literal representation of a cell."}, "description": "Returns last selected cell as an object literal:\n{recordId:sRecordId, columnId:sColumnId}.", "guessedname": "getLastSelectedCell", "guessedtype": "function"}, "_onTableKeypress": {"guessedname": "_onTableKeypress", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The key event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles keypress events on the TABLE. Mainly to support stopEvent on Mac.", "private": "", "guessedtype": "function"}, "_onTableMouseover": {"guessedname": "_onTableMouseover", "params": [{"type": "HTMLEvent", "name": "e", "description": "  The mouseover event."}, {"type": "YAHOO.widget.DataTable", "name": "oSelf", "description": "  DataTable instance."}], "description": "Handles mouseover events on the TABLE element.", "private": "", "guessedtype": "function"}, "DataTable.formatDate": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": "  The element to format with markup."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "Object", "name": "oData", "description": "  Data value for the cell, or null."}], "description": "Formats JavaScript Dates.", "guessedname": "formatDate", "guessedtype": "function"}, "getTrEl": {"return": {"type": "HTMLElement", "description": "Reference to TR element, or null."}, "params": [{"type": "HTMLElement | String | Number | YAHOO.widget.Record", "name": "row", "description": "  Which row to\nget: by element reference, ID string, page row index, or Record."}], "description": "Returns the corresponding TR reference for a given DOM element, ID string or\ndirectly page row index. If the given identifier is a child of a TR element,\nthen DOM tree is traversed until a parent TR element is returned, otherwise\nnull.", "guessedname": "getTrEl", "guessedtype": "function"}, "formatCell": {"return": {"type": "HTML", "description": "Markup."}, "params": [{"type": "HTMLElement", "name": "elCell", "description": "  TD Element."}, {"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  (Optional) Record instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  (Optional) Column instance."}], "description": "Outputs markup into the given TD based on given Record.", "guessedname": "formatCell", "guessedtype": "function"}, "refreshView": {"description": "Refreshes the view with existing Records from the RecordSet while\nmaintaining sort, pagination, and selection states. For performance, reuses\nexisting DOM elements when possible while deleting extraneous elements.", "guessedname": "refreshView", "guessedtype": "function"}, "unselectAllCells": {"description": "Clears out all cell selections.", "guessedname": "unselectAllCells", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "DataTable.js", "guessedtype": "function", "shortname": "DataTable", "configs": {"paginator": {"default": "<br>\n{ containers:[], \/\/ UI container elements <br>\nrowsPerPage:500, \/\/ 500 rows <br>\ncurrentPage:1,  \/\/ page one <br>\npageLinks:0,    \/\/ show all links <br>\npageLinksStart:1, \/\/ first link is page 1 <br>\ndropdownOptions:null, \/\/ no dropdown <br>\nlinks: [], \/\/ links elements <br>\ndropdowns: [] } \/\/dropdown elements", "type": "Object", "description": "Object literal of pagination values."}, "scrollable": {"default": "false", "type": "Boolean", "description": "True if primary TBODY should scroll while THEAD remains fixed.\nWhen enabling this feature, captions cannot be used, and the following\nfeatures are not recommended: inline editing, resizeable columns."}, "paginated": {"default": "false", "type": "Boolean", "description": "True if built-in client-side pagination is enabled"}, "caption": {"type": "String", "description": "Value for the CAPTION element."}, "sortedBy": {"type": "Object", "description": "Object literal provides metadata for initial sort values if\ndata will arrive pre-sorted:\n<dl>\n<dt>sortedBy.key<\/dt>\n<dd>{String} Key of sorted Column<\/dd>\n<dt>sortedBy.dir<\/dt>\n<dd>{String} Initial sort direction, either \"asc\" or \"desc\"<\/dd>\n<\/dl>"}, "summary": {"type": "String", "description": "Value for the SUMMARY attribute."}, "initialRequest": {"type": "String", "description": "Defines the initial request that gets sent to the DataSource."}, "selectionMode": {"default": "\"standard\"", "type": "String", "description": "Specifies row or cell selection mode. Accepts the following strings:\n<dl>\n<dt>\"standard\"<\/dt>\n<dd>Standard row selection with support for modifier keys to enable\nmultiple selections.<\/dd>\n<dt>\"single\"<\/dt>\n<dd>Row selection with modifier keys disabled to not allow\nmultiple selections.<\/dd>\n<dt>\"singlecell\"<\/dt>\n<dd>Cell selection with modifier keys disabled to not allow\nmultiple selections.<\/dd>\n<dt>\"cellblock\"<\/dt>\n<dd>Cell selection with support for modifier keys to enable multiple\nselections in a block-fashion, like a spreadsheet.<\/dd>\n<dt>\"cellrange\"<\/dt>\n<dd>Cell selection with support for modifier keys to enable multiple\nselections in a range-fashion, like a calendar.<\/dd>\n<\/dl>"}}, "description": "DataTable class for the YUI DataTable widget."}, "YAHOO.util.ColorAnim": {"name": "YAHOO.util.ColorAnim", "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.\nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.\nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").\nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for color transitions.\n<p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);<\/code> Color values can be specified with either 112233, #112233, \n[255,255,255], or rgb(255,255,255)<\/p>"}], "namespace": "YAHOO.util", "module": "animation", "guessedname": "ColorAnim", "methods": {"parseColor": {"return": {"type": "Array", "description": "The 3-tuple of rgb values."}, "params": [{"type": "String", "name": "s", "description": " The string to parse."}], "description": "Attempts to parse the given string and return a 3-tuple.", "guessedname": "parseColor", "guessedtype": "function"}}, "extends": "YAHOO.util.Anim", "superclass": "YAHOO.util.Anim", "file": "ColorAnim.js", "guessedtype": "function", "shortname": "ColorAnim", "requires": "YAHOO.util.Anim", "description": "Anim subclass for color transitions.\n<p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);<\/code> Color values can be specified with either 112233, #112233, \n[255,255,255], or rgb(255,255,255)<\/p>"}, "YAHOO.lang.JSON": {"name": "YAHOO.lang.JSON", "namespace": "", "module": "json", "methods": {"parse": {"return": {"type": "MIXED", "description": "the native JavaScript representation of the JSON string"}, "description": "Parse a JSON string, returning the native JavaScript representation.\nOnly minor modifications from http:\/\/www.json.org\/json.js.", "throws": "SyntaxError", "static": "", "guessedname": "parse", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  JSON string data"}, {"type": "function", "name": "filter", "description": "  (optional) function(k,v) passed each key value pair of object literals, allowing pruning or altering values"}], "public": ""}, "stringify": {"return": {"type": "string", "description": "JSON string representation of the input"}, "description": "Converts an arbitrary value to a JSON string representation.\nCyclical object or array references are replaced with null.\nIf a whitelist is provided, only matching object keys will be included.\nIf a depth limit is provided, objects and arrays at that depth will\nbe stringified as empty.", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "MIXED", "name": "o", "description": "  any arbitrary object to convert to JSON string"}, {"type": "Array", "name": "w", "description": "  (optional) whitelist of acceptable object keys to include"}, {"type": "number", "name": "d", "description": "  (optional) depth limit to recurse objects\/arrays (practical minimum 1)"}], "public": ""}}, "static": "", "file": "JSON.js", "shortname": "YAHOO.lang.JSON", "requires": "yahoo", "description": "Provides methods to parse JSON strings and convert objects to JSON strings."}, "YAHOO.util.ImageLoader.srcImgObj": {"name": "YAHOO.util.ImageLoader.srcImgObj", "constructors": [{"params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}, {"type": "Int", "name": "width", "description": "\tpixel width of the image - defaults to image's natural size"}, {"type": "Int", "name": "height", "description": "\tpixel height of the image - defaults to image's natural size"}], "description": "Source image object. A source image is one whose URL is specified by a src attribute in the DOM element"}], "namespace": "YAHOO.util", "module": "imageloader", "guessedname": "srcImgObj", "methods": {"_applyUrl": {"guessedname": "_applyUrl", "params": [{"type": "Object", "name": "el", "description": "\tHTML DOM element"}], "description": "Inserts the image URL into the DOM so that the image is displayed.\nSets src", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.ImageLoader.imgObj", "superclass": "YAHOO.util.ImageLoader.imgObj", "file": "ImageLoader.js", "guessedtype": "function", "shortname": "ImageLoader.srcImgObj", "description": "Source image object. A source image is one whose URL is specified by a src attribute in the DOM element"}, "YAHOO.widget.CartesianChart": {"name": "YAHOO.widget.CartesianChart", "constructors": [{"params": [{"type": "String", "name": "type", "description": "  The char type. May be \"line\", \"column\", or \"bar\""}, {"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "CartesianChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "events": {"xAxisChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "xAxisChangeEvent", "description": "Fires when the value for the configuration attribute 'xAxis' changes."}, "beforeYaxisChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeYaxisChangeEvent", "description": "Fires before the value for the configuration attribute 'yAxis' changes. Return false to cancel the attribute change."}, "beforeXfieldChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeXfieldChangeEvent", "description": "Fires before the value for the configuration attribute 'xField' changes. Return false to cancel the attribute change."}, "beforeYfieldChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeYfieldChangeEvent", "description": "Fires before the value for the configuration attribute 'yField' changes. Return false to cancel the attribute change."}, "xFieldChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "xFieldChangeEvent", "description": "Fires when the value for the configuration attribute 'xField' changes."}, "yAxisChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "yAxisChangeEvent", "description": "Fires when the value for the configuration attribute 'yAxis' changes."}, "yFieldChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "yFieldChangeEvent", "description": "Fires when the value for the configuration attribute 'yField' changes."}, "beforeXaxisChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeXaxisChangeEvent", "description": "Fires before the value for the configuration attribute 'xAxis' changes. Return false to cancel the attribute change."}}, "guessedname": "CartesianChart", "methods": {"_setYAxis": {"private": "", "description": "Getter for the yAxis attribute.", "guessedname": "_setYAxis", "guessedtype": "function"}, "_getYField": {"private": "", "description": "Getter for the yField attribute.", "guessedname": "_getYField", "guessedtype": "function"}, "_initAttributes": {"private": "", "description": "Initializes the attributes.", "guessedname": "_initAttributes", "guessedtype": "function"}, "_setXAxis": {"private": "", "description": "Setter for the xAxis attribute.", "guessedname": "_setXAxis", "guessedtype": "function"}, "_getXField": {"private": "", "description": "Getter for the xField attribute.", "guessedname": "_getXField", "guessedtype": "function"}, "_setXField": {"private": "", "description": "Setter for the xField attribute.", "guessedname": "_setXField", "guessedtype": "function"}, "_setYField": {"private": "", "description": "Setter for the yField attribute.", "guessedname": "_setYField", "guessedtype": "function"}}, "uses": ["YAHOO.widget.Charts"], "file": "CartesianChart.js", "guessedtype": "function", "shortname": "CartesianChart", "configs": {"yField": {"type": "String", "description": "The field in each item that corresponds to a value on the x axis."}, "xField": {"type": "String", "description": "The field in each item that corresponds to a value on the x axis."}, "xAxis": {"type": "Axis", "description": "A custom configuration for the horizontal x axis."}, "yAxis": {"type": "Axis", "description": "A custom configuration for the vertical y axis."}}, "description": "CartesianChart class for the YUI Charts widget."}, "YAHOO.util.DDProxy": {"name": "YAHOO.util.DDProxy", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the linked html element"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop objects"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DDProxy in addition to those in DragDrop: \nresizeFrame, centerFrame, dragElId"}], "description": "A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.\nReferences to the \"frame\" element refer to the single proxy element that\nwas created to be dragged in place of all DDProxy elements on the\npage."}], "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DDProxy", "methods": {"createFrame": {"description": "Creates the proxy element if it does not yet exist", "guessedname": "createFrame", "guessedtype": "function"}, "initFrame": {"description": "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses", "guessedname": "initFrame", "guessedtype": "function"}, "_resizeProxy": {"private": "", "description": "The proxy is automatically resized to the dimensions of the linked\nelement when a drag is initiated, unless resizeFrame is set to false", "guessedname": "_resizeProxy", "guessedtype": "function"}, "showFrame": {"guessedname": "showFrame", "params": [{"type": "int", "name": "iPageX", "description": " X click position"}, {"type": "int", "name": "iPageY", "description": " Y click position"}], "description": "Resizes the drag frame to the dimensions of the clicked object, positions \nit over the object, and finally displays it", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.DD", "superclass": "YAHOO.util.DD", "file": "DDProxy.js", "guessedtype": "function", "shortname": "DDProxy", "properties": {"YAHOO.util.DDProxy.dragElId": {"type": "String", "static": "", "description": "The default drag frame div id", "guessedname": "dragElId", "guessedtype": "property"}, "resizeFrame": {"type": "boolean", "description": "By default we resize the drag frame to be the same size as the element\nwe want to drag (this is to get the frame effect).  We can turn it off\nif we want a different behavior.", "guessedname": "resizeFrame", "guessedtype": "property"}, "centerFrame": {"type": "boolean", "description": "By default the frame is positioned exactly where the drag element is, so\nwe use the cursor offset provided by YAHOO.util.DD.  Another option that works only if\nyou do not have constraints on the obj is to have the drag frame centered\naround the cursor.  Set centerFrame to true for this effect.", "guessedname": "centerFrame", "guessedtype": "property"}}, "description": "A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.\nReferences to the \"frame\" element refer to the single proxy element that\nwas created to be dragged in place of all DDProxy elements on the\npage."}, "YAHOO.widget.RecordSet": {"name": "YAHOO.widget.RecordSet", "constructors": [{"params": [{"type": "Object || Object[]", "name": "data", "description": "  An object literal or an array of data."}], "description": "A RecordSet defines and manages a set of Records."}], "namespace": "YAHOO.widget", "module": "datatable", "properties": {"_length": {"guessedname": "_length", "type": "Number", "description": "Internal counter of how many Records are in the RecordSet.", "private": "", "guessedtype": "property"}, "RecordSet._nCount": {"description": "Internal class variable to name multiple Recordset instances.", "private": "", "static": "", "guessedname": "_nCount", "guessedtype": "property", "type": "Number"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Unique instance name.", "private": "", "guessedtype": "property"}}, "guessedname": "RecordSet", "methods": {"_deleteRecord": {"guessedname": "_deleteRecord", "params": [{"type": "Number", "name": "index", "description": "  Position index."}, {"type": "Number", "name": "range", "description": "  (optional) How many Records to delete"}], "description": "Deletes Records from the RecordSet at the given index. If range is null,\r\nthen only one Record is deleted.", "private": "", "guessedtype": "function"}, "updateKey": {"params": [{"type": "YAHOO.widget.Record | Number | String", "name": "record", "description": "  A Record instance,\r\na RecordSet position index, or a Record ID."}, {"type": "String", "name": "sKey", "description": "  Key name."}, {"type": "", "name": "oData", "description": " {Object) New data."}], "description": "Updates given Record at given key with given data.", "guessedname": "updateKey", "guessedtype": "function"}, "deleteRecord": {"return": {"type": "Object", "description": "A copy of the data held by the deleted Record."}, "params": [{"type": "Number", "name": "index", "description": "  Record's RecordSet position index."}, {"type": "Number", "name": "range", "description": "  (optional) How many Records to delete."}], "description": "Removes the Record at the given position index from the RecordSet. If a range\r\nis also provided, removes that many Records, starting from the index. Length\r\nof RecordSet is correspondingly shortened.", "guessedname": "deleteRecord", "guessedtype": "function"}, "addRecords": {"return": {"type": "YAHOO.widget.Record[]", "description": "An array of Record instances."}, "params": [{"type": "Object[]", "name": "aData", "description": "  An array of object literal data."}, {"type": "Number", "name": "index", "description": "  (optional) Position index."}], "description": "Adds multiple Records at once to the RecordSet at the given index with the\r\ngiven data. If index is null, then the new Records are added to the end of\r\nthe RecordSet.", "guessedname": "addRecords", "guessedtype": "function"}, "deleteRecords": {"params": [{"type": "Number", "name": "index", "description": "  Record's RecordSet position index."}, {"type": "Number", "name": "range", "description": "  (optional) How many Records to delete."}], "description": "Removes the Record at the given position index from the RecordSet. If a range\r\nis also provided, removes that many Records, starting from the index. Length\r\nof RecordSet is correspondingly shortened.", "guessedname": "deleteRecords", "guessedtype": "function"}, "getLength": {"return": {"type": "Number", "description": "Number of records in the RecordSet."}, "description": "Returns the number of Records held in the RecordSet.", "guessedname": "getLength", "guessedtype": "function"}, "getRecord": {"return": {"type": "YAHOO.widget.Record", "description": "Record object."}, "params": [{"type": "YAHOO.widget.Record | Number | String", "name": "record", "description": "  Record instance,\r\nRecordSet position index, or Record ID."}], "description": "Returns Record by ID or RecordSet position index.", "guessedname": "getRecord", "guessedtype": "function"}, "replaceRecords": {"return": {"type": "YAHOO.widget.Record || YAHOO.widget.Record[]", "description": "A Record instance or\r\nan array of Records."}, "params": [{"type": "Object || Object[]", "name": "data", "description": "  An object literal of data or an array of\r\nobject literal data."}], "description": "Replaces all Records in RecordSet with new data.", "guessedname": "replaceRecords", "guessedtype": "function"}, "updateRecord": {"return": {"type": "YAHOO.widget.Record", "description": "Updated Record, or null."}, "params": [{"type": "YAHOO.widget.Record | Number | String", "name": "record", "description": "  A Record instance,\r\na RecordSet position index, or a Record ID."}, {"type": "", "name": "oData", "description": " {Object) Object literal of new data."}], "description": "Updates given Record with given data.", "guessedname": "updateRecord", "guessedtype": "function"}, "reset": {"description": "Deletes all Records from the RecordSet.", "guessedname": "reset", "guessedtype": "function"}, "getRecords": {"return": {"type": "YAHOO.widget.Record[]", "description": "Array of Records starting at given index and\r\nlength equal to given range. If index is not given, all Records are returned."}, "params": [{"type": "Number", "name": "index", "description": "  (optional) Recordset position index of which Record to\r\nstart at."}, {"type": "Number", "name": "range", "description": "  (optional) Number of Records to get."}], "description": "Returns an array of Records from the RecordSet.", "guessedname": "getRecords", "guessedtype": "function"}, "sortRecords": {"return": {"type": "YAHOO.widget.Record[]", "description": "Sorted array of Records."}, "params": [{"type": "Function", "name": "fnSort", "description": "  Reference to a sort function."}, {"type": "Boolean", "name": "desc", "description": "  True if sort direction is descending, false if sort\r\ndirection is ascending."}], "description": "Sorts all Records by given function. Records keep their unique IDs but will\r\nhave new RecordSet position indexes.", "guessedname": "sortRecords", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the RecordSet instance."}, "description": "Public accessor to the unique name of the RecordSet instance.", "guessedname": "toString", "guessedtype": "function"}, "_addRecord": {"return": {"type": "YAHOO.widget.Record", "description": "A Record instance."}, "description": "Adds one Record to the RecordSet at the given index. If index is null,\r\nthen adds the Record to the end of the RecordSet.", "private": "", "params": [{"type": "Object", "name": "oData", "description": "  An object literal of data."}, {"type": "Number", "name": "index", "description": "  (optional) Position index."}], "guessedname": "_addRecord", "guessedtype": "function"}, "getRecordIndex": {"return": {"type": "Number", "description": "Record's RecordSet position index."}, "params": [{"type": "YAHOO.widget.Record", "name": "oRecord", "description": "  Record instance."}], "description": "Returns current position index for the given Record.", "guessedname": "getRecordIndex", "guessedtype": "function"}, "addRecord": {"return": {"type": "YAHOO.widget.Record", "description": "A Record instance."}, "params": [{"type": "Object", "name": "oData", "description": "  An object literal of data."}, {"type": "Number", "name": "index", "description": "  (optional) Position index."}], "description": "Adds one Record to the RecordSet at the given index. If index is null,\r\nthen adds the Record to the end of the RecordSet.", "guessedname": "addRecord", "guessedtype": "function"}}, "file": "RecordSet.js", "guessedtype": "function", "shortname": "RecordSet", "events": {"recordDeleteEvent": {"params": [{"type": "Object", "name": "oArgs.data", "description": "  A copy of the data held by the Record,\r\nor an array of data object literals if multiple Records were deleted at once."}, {"type": "Object", "name": "oArgs.index", "description": "  Index of the deleted Record."}], "description": "Fired when a Record is deleted from the RecordSet."}, "recordAddEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The Record instance."}, {"type": "Object", "name": "oArgs.data", "description": "  Data added."}], "description": "Fired when a new Record is added to the RecordSet."}, "recordsDeleteEvent": {"params": [{"type": "Object[]", "name": "oArgs.data", "description": "  An array of data object literals copied\r\nfrom the Records."}, {"type": "Object", "name": "oArgs.index", "description": "  Index of the first deleted Record."}], "description": "Fired when multiple Records are deleted from the RecordSet at once."}, "keyUpdateEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The Record instance."}, {"type": "String", "name": "oArgs.key", "description": "  The updated key."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data."}], "description": "Fired when a Record Key is updated with new data."}, "resetEvent": {"description": "Fired when all Records are deleted from the RecordSet at once."}, "recordsAddEvent": {"params": [{"type": "YAHOO.widget.Record[]", "name": "oArgs.records", "description": "  An array of Record instances."}, {"type": "Object[]", "name": "oArgs.data", "description": "  Data added."}], "description": "Fired when multiple Records are added to the RecordSet at once."}, "recordUpdateEvent": {"params": [{"type": "YAHOO.widget.Record", "name": "oArgs.record", "description": "  The Record instance."}, {"type": "Object", "name": "oArgs.newData", "description": "  New data."}, {"type": "Object", "name": "oArgs.oldData", "description": "  Old data."}], "description": "Fired when a Record is updated with new data."}}, "description": "A RecordSet defines and manages a set of Records."}, "YAHOO.widget.TextNode": {"name": "YAHOO.widget.TextNode", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "YAHOO.widget.Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded\/collapsed state"}], "description": "The default node presentation.  The first parameter should be\neither a string that will be used as the node's label, or an object\nthat has a string propery called label.  By default, the clicking the\nlabel will toggle the expanded\/collapsed state of the node.  By\nchanging the href property of the instance, this behavior can be\nchanged so that the label will go to the specified href."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TextNode", "methods": {"getLabelEl": {"return": {"type": "object", "description": "the element"}, "description": "Returns the label element", "guessedname": "getLabelEl", "guessedtype": "function"}, "onLabelClick": {"return": {"type": "", "description": "false to cancel the anchor click"}, "description": "Executed when the label is clicked.  Fires the labelClick custom event.", "params": [{"type": "Node", "name": "me", "description": "  this node"}], "guessedname": "onLabelClick", "guessedtype": "function", "scope": "the anchor tag clicked"}}, "extends": "YAHOO.widget.Node", "superclass": "YAHOO.widget.Node", "file": "TextNode.js", "guessedtype": "function", "shortname": "TextNode", "properties": {"labelStyle": {"type": "string", "description": "The CSS class for the label href.  Defaults to ygtvlabel, but can be\noverridden to provide a custom presentation for a specific node.", "guessedname": "labelStyle", "guessedtype": "property"}, "label": {"type": "string", "description": "The text for the label.  It is assumed that the oData parameter will\neither be a string that will be used as the label, or an object that\nhas a property called \"label\" that we will use.", "guessedname": "label", "guessedtype": "property"}, "labelElId": {"type": "string", "description": "The derived element id of the label for this node", "guessedname": "labelElId", "guessedtype": "property"}}, "description": "The default node presentation.  The first parameter should be\neither a string that will be used as the node's label, or an object\nthat has a string propery called label.  By default, the clicking the\nlabel will toggle the expanded\/collapsed state of the node.  By\nchanging the href property of the instance, this behavior can be\nchanged so that the label will go to the specified href."}, "YAHOO.util.ImageLoader.imgObj": {"name": "YAHOO.util.ImageLoader.imgObj", "constructors": [{"params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}], "description": "Base class for image objects to be registered with the groups"}], "namespace": "YAHOO.util", "module": "imageloader", "guessedname": "imgObj", "methods": {"fetch": {"description": "Displays the image; puts the URL into the DOM", "guessedname": "fetch", "guessedtype": "function"}, "_applyUrl": {"guessedname": "_applyUrl", "params": [{"type": "Object", "name": "el", "description": "\tHTML DOM element"}], "description": "Inserts the image URL into the DOM so that the image is displayed.\nMust be overridden by child class", "private": "", "guessedtype": "function"}}, "file": "ImageLoader.js", "guessedtype": "function", "shortname": "ImageLoader.imgObj", "properties": {"_fetched": {"guessedname": "_fetched", "type": "Boolean", "description": "Whether the image has already been fetched. In the case of a foldCondional group, keeps track for when the trigger is fired so images aren't fetched twice", "private": "", "guessedtype": "property"}, "url": {"type": "String", "description": "URL for the image", "guessedname": "url", "guessedtype": "property"}, "domId": {"type": "String", "description": "HTML DOM id of the image element", "guessedname": "domId", "guessedtype": "property"}, "height": {"type": "Int", "description": "Pixel height of the image. Will be set as a \"height\" attribute after the image is fetched.\nDetaults to the natural height of the image.\nOnly appropriate with src images", "guessedname": "height", "guessedtype": "property"}, "width": {"type": "Int", "description": "Pixel width of the image. Will be set as a \"width\" attribute after the image is fetched.\nDetaults to the natural width of the image.\nOnly appropriate with src images", "guessedname": "width", "guessedtype": "property"}, "setVisible": {"type": "Boolean", "description": "Whether the style.visibility should be set to \"visible\" after the image is fetched.\nUsed when setting src images as visibility:hidden prior to image fetching", "guessedname": "setVisible", "guessedtype": "property"}}, "description": "Base class for image objects to be registered with the groups"}, "YAHOO.widget.ContextMenuItem": {"name": "YAHOO.widget.ContextMenuItem", "deprecated": "As of version 2.4.0 items for YAHOO.widget.ContextMenu instances\nare of type YAHOO.widget.MenuItem.", "constructors": [{"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the context menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;<\/code> element of the context menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the context \nmenu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;option&#62;<\/code> element of the context menu item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the context menu item. See configuration class \ndocumentation for more details."}], "description": "Creates an item for a context menu."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "ContextMenuItem", "extends": "YAHOO.widget.MenuItem", "superclass": "YAHOO.widget.MenuItem", "file": "contextmenuitem.js", "guessedtype": "property", "shortname": "ContextMenuItem", "description": "Creates an item for a context menu."}, "YAHOO.util.EventProvider": {"name": "YAHOO.util.EventProvider", "namespace": "YAHOO.util", "module": "event", "guessedname": "EventProvider", "methods": {"unsubscribeAll": {"params": [{"type": "string", "name": "p_type", "description": "    The type, or name of the event"}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "subscribe": {"params": [{"type": "string", "name": "p_type", "description": "        the type, or name of the event"}, {"type": "function", "name": "p_fn", "description": "        the function to exectute when the event fires"}, {"type": "Object", "name": "p_obj", "description": "         An object to be passed along when the event \nfires"}, {"type": "boolean", "name": "p_override", "description": "   If true, the obj passed in becomes the \nexecution scope of the listener"}], "description": "Subscribe to a CustomEvent by event type", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "true if the subscriber was found and detached."}, "params": [{"type": "string", "name": "p_type", "description": "    The type, or name of the event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."}, {"type": "Function", "name": "p_fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "p_obj", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes one or more listeners the from the specified event", "guessedname": "unsubscribe", "guessedtype": "function"}, "hasEvent": {"params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}], "description": "Returns true if the custom event of the provided type has been created\nwith createEvent.", "guessedname": "hasEvent", "guessedtype": "function"}, "fireEvent": {"return": {"type": "boolean", "description": "the return value from CustomEvent.fire"}, "params": [{"type": "string", "name": "p_type", "description": "      the type, or name of the event"}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to \nthe handler."}], "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the scope specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The first argument fire() was executed with<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>\nIf the custom event has not been explicitly created, it will be\ncreated now with the default config, scoped to the host object", "guessedname": "fireEvent", "guessedtype": "function"}, "createEvent": {"return": {"type": "CustomEvent", "description": "the custom event"}, "params": [{"type": "string", "name": "p_type", "description": "  the type, or name of the event"}, {"type": "object", "name": "p_config", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\nscope: defines the default execution scope.  If not defined\nthe default scope will be this instance.\n<\/li>\n<li>\nsilent: if true, the custom event will not generate log messages.\nThis is false by default.\n<\/li>\n<li>\nonSubscribeCallback: specifies a callback to execute when the\nevent has a new subscriber.  This will fire immediately for\neach queued subscriber if any exist prior to the creation of\nthe event.\n<\/li>\n<\/ul>"}], "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "guessedname": "createEvent", "guessedtype": "function"}}, "file": "EventProvider.js", "guessedtype": "function", "shortname": "EventProvider", "properties": {"__yui_subscribers": {"guessedname": "__yui_subscribers", "type": "Object[]", "description": "Private storage of custom event subscribers", "private": "", "guessedtype": "property"}, "__yui_events": {"guessedname": "__yui_events", "type": "Object[]", "description": "Private storage of custom events", "private": "", "guessedtype": "property"}}, "description": "EventProvider is designed to be used with YAHOO.augment to wrap \nCustomEvents in an interface that allows events to be subscribed to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all."}, "YAHOO.widget.DataSource": {"name": "YAHOO.widget.DataSource", "constructors": [{"description": "The DataSource classes manages sending a request and returning response from a live\r\ndatabase. Supported data include local JavaScript arrays and objects and databases\r\naccessible via XHR connections. Supported response formats include JavaScript arrays,\r\nJSON, XML, and flat-file textual data."}], "namespace": "YAHOO.widget", "module": "autocomplete", "events": {"dataErrorEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance."}, {"type": "Object", "name": "oParent", "description": "  The requesting object."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "String", "name": "sMsg", "description": "  Error message string"}], "description": "Fired when an error is encountered with the live data source.", "guessedname": "dataErrorEvent", "guessedtype": "property"}, "getCachedResultsEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance."}, {"type": "Object", "name": "oParent", "description": "  The requesting object."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "  Array of result objects."}], "description": "Fired when data is retrieved from the local cache.", "guessedname": "getCachedResultsEvent", "guessedtype": "property"}, "cacheQueryEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance."}, {"type": "Object", "name": "oParent", "description": "  The requesting object."}, {"type": "String", "name": "sQuery", "description": "  The query string."}], "description": "Fired when a query is made to the local cache.", "guessedname": "cacheQueryEvent", "guessedtype": "property"}, "queryEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance."}, {"type": "Object", "name": "oParent", "description": "  The requesting object."}, {"type": "String", "name": "sQuery", "description": "  The query string."}], "description": "Fired when a query is made to the live data source.", "guessedname": "queryEvent", "guessedtype": "property"}, "cacheFlushEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance"}], "description": "Fired when the local cache is flushed.", "guessedname": "cacheFlushEvent", "guessedtype": "property"}, "getResultsEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance."}, {"type": "Object", "name": "oParent", "description": "  The requesting object."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "  Array of result objects."}], "description": "Fired when data is retrieved from the live data source.", "guessedname": "getResultsEvent", "guessedtype": "property"}}, "guessedname": "DataSource", "methods": {"flushCache": {"description": "Flushes cache.", "guessedname": "flushCache", "guessedtype": "function"}, "getResults": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Retrieves query results, first checking the local cache, then making the\r\nquery request to the live data source as defined by the function doQuery.", "guessedname": "getResults", "guessedtype": "function"}, "_init": {"private": "", "description": "Initializes DataSource instance.", "guessedname": "_init", "guessedtype": "function"}, "doQuery": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function implemented by oParent to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Abstract method implemented by subclasses to make a query to the live data\r\nsource. Must call the callback function with the response returned from the\r\nquery. Populates cache (if enabled).", "guessedname": "doQuery", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the DataSource instance"}, "description": "Public accessor to the unique name of the DataSource instance.", "guessedname": "toString", "guessedtype": "function"}, "_doQueryCache": {"return": {"type": "Object[]", "description": "aResults  Array of results from local cache if found, otherwise null."}, "description": "Queries the local cache for results. If query has been cached, the callback\r\nfunction is called with the results, and the cached is refreshed so that it\r\nis now the newest element.", "private": "", "params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "guessedname": "_doQueryCache", "guessedtype": "function"}, "_addCacheElem": {"guessedname": "_addCacheElem", "params": [{"type": "Object", "name": "oResult", "description": "  Data result object, including array of results."}], "description": "Adds a result object to the local cache, evicting the oldest element if the \r\ncache is full. Newer items will have higher indexes, the oldest item will have\r\nindex of 0.", "private": "", "guessedtype": "function"}}, "file": "DataSource.js", "guessedtype": "function", "shortname": "DataSource", "properties": {"_nIndex": {"description": "Internal class variable to index multiple DataSource instances.", "private": "", "static": "", "guessedname": "_nIndex", "guessedtype": "property", "type": "Number"}, "maxCacheEntries": {"default": "15", "type": "Number", "description": "Max size of the local cache.  Set to 0 to turn off caching.  Caching is\r\nuseful to reduce the number of server connections.  Recommended only for data\r\nsources that return comprehensive results for queries or when stale data is\r\nnot an issue.", "guessedname": "maxCacheEntries", "guessedtype": "property"}, "queryMatchSubset": {"default": "false", "type": "Boolean", "description": "Enables query subset matching. If caching is on and queryMatchSubset is\r\ntrue, substrings of queries will return matching cached results. For\r\ninstance, if the first query is for \"abc\" susequent queries that start with\r\n\"abc\", like \"abcd\", will be queried against the cache, and not the live data\r\nsource. Recommended only for DataSources that return comprehensive results\r\nfor queries with very few characters.", "guessedname": "queryMatchSubset", "guessedtype": "property"}, "_aCache": {"guessedname": "_aCache", "type": "Object[]", "description": "Local cache of data result objects indexed chronologically.", "private": "", "guessedtype": "property"}, "ERROR_DATANULL": {"description": "Error message for null data responses.", "static": "", "guessedname": "ERROR_DATANULL", "guessedtype": "property", "type": "String", "final": ""}, "queryMatchCase": {"default": "false", "type": "Boolean", "description": "Enables case-sensitivity in the matching algorithm used against JS Array\r\ntypes of DataSources and DataSource caches. If queryMatchCase is true, only\r\ncase-sensitive matches will return.", "guessedname": "queryMatchCase", "guessedtype": "property"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of DataSource instance.", "private": "", "guessedtype": "property"}, "queryMatchContains": {"default": "false", "type": "Boolean", "description": "Use this to fine-tune the matching algorithm used against JS Array types of\r\nDataSource and DataSource caches. If queryMatchContains is true, then the JS\r\nArray or cache returns results that \"contain\" the query string. By default,\r\nqueryMatchContains is set to false, so that only results that \"start with\"\r\nthe query string are returned.", "guessedname": "queryMatchContains", "guessedtype": "property"}, "ERROR_DATAPARSE": {"description": "Error message for data responses with parsing errors.", "static": "", "guessedname": "ERROR_DATAPARSE", "guessedtype": "property", "type": "String", "final": ""}}, "description": "The DataSource classes manages sending a request and returning response from a live\r\ndatabase. Supported data include local JavaScript arrays and objects and databases\r\naccessible via XHR connections. Supported response formats include JavaScript arrays,\r\nJSON, XML, and flat-file textual data."}, "YAHOO.tool.Profiler": {"name": "YAHOO.tool.Profiler", "namespace": "YAHOO.tool", "module": "profiler", "guessedname": "Profiler", "methods": {"getFunctionReport": {"static": "", "return": {"type": "Object", "description": "An object containing profile data for a given function."}, "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).", "guessedname": "getFunctionReport", "guessedtype": "function"}, "getFullReport": {"static": "", "return": {"type": "Object", "description": "An object containing all profile data."}, "description": "Returns an object containing profiling data for all of the functions \nthat were profiled. The object has an entry for each function and \nreturns all information (min, max, average, calls, etc.) for each\nfunction.", "guessedname": "getFullReport", "guessedtype": "function"}, "unregisterFunction": {"return": {"type": "Void", "description": ""}, "description": "Removes a constructor function from profiling. Reverses the registerConstructor() method.", "param": "{String} name The full name of the function including namespacing. This\nis the name of the function that is stored in the report.", "params": [{"type": "String", "name": "name", "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."}], "guessedname": "unregisterConstructor", "guessedtype": "function"}, "getCallCount": {"return": {"type": "int", "description": "The number of times the function was called."}, "description": "Returns the number of times that the given function has been called.", "static": "", "guessedname": "getCallCount", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned."}]}, "registerFunction": {"return": {"type": "Void", "description": ""}, "params": [{"type": "String", "name": "name", "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."}, {"type": "Object", "name": "owner", "description": " (Optional) The object that owns the function. If the function\nisn't global then this argument is required. This could be the namespace that\nthe function belongs to, such as YAHOO.util.Dom, or the object on which it's\na method."}], "description": "Sets up a function for profiling. It essentially overwrites the function with one\nthat has instrumentation data. This method also creates an entry for the function\nin the profile report. The original function is stored on the _container object.", "guessedname": "registerFunction", "guessedtype": "function"}, "_saveData": {"return": {"type": "Void", "description": ""}, "description": "Called when a method ends execution. Marks the start and end time of the \nmethod so it can calculate how long the function took to execute. Also \nupdates min\/max\/avg calculations for the function.", "private": "", "static": "", "guessedname": "_saveData", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function to mark as stopped."}, {"type": "int", "name": "duration", "description": " The number of milliseconds it took the function to\nexecute."}]}, "getAverage": {"return": {"type": "float", "description": "The average time it takes the function to execute."}, "description": "Returns the average amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "static": "", "guessedname": "getAverage", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "getMin": {"return": {"type": "float", "description": "The minimum time it takes the function to execute."}, "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}], "description": "Returns the minimum amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "guessedname": "getMin", "guessedtype": "function"}, "unregisterObject": {"return": {"type": "Void", "description": ""}, "description": "Unregisters an object for profiling. It takes the object and looks for functions.\nWhen a function is found, unregisterMethod() is called on it. If set to recrusive\nmode, it will also unregister objects found inside of this object, \nusing the same methodology.", "static": "", "guessedname": "unregisterObject", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the object to unregister."}, {"type": "Boolean", "name": "recurse", "description": " (Optional) Determines if subobject methods should also be\nunregistered."}]}, "getMax": {"return": {"type": "float", "description": "The maximum time it takes the function to execute."}, "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}], "description": "Returns the maximum amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "guessedname": "getMax", "guessedtype": "function"}, "registerConstructor": {"return": {"type": "Void", "description": ""}, "description": "Sets up a constructor for profiling, including all properties and methods on the prototype.", "static": "", "guessedname": "registerConstructor", "guessedtype": "function", "params": [{"type": "string", "name": "name", "description": " The fully-qualified name of the function including namespace information."}, {"type": "Object", "name": "owner", "description": " (Optional) The object that owns the function (namespace or containing object)."}]}, "registerObject": {"return": {"type": "Void", "description": ""}, "description": "Sets up an object for profiling. It takes the object and looks for functions.\nWhen a function is found, registerMethod() is called on it. If set to recrusive\nmode, it will also setup objects found inside of this object for profiling, \nusing the same methodology.", "static": "", "guessedname": "registerObject", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the object to profile (shows up in report)."}, {"type": "Object", "name": "owner", "description": " (Optional) The object represented by the name."}, {"type": "Boolean", "name": "recurse", "description": " (Optional) Determines if subobject methods are also profiled."}]}}, "static": "", "file": "Profiler.js", "guessedtype": "property", "shortname": "Profiler", "properties": {"_container": {"description": "Container object on which to put the original unprofiled methods.", "private": "", "static": "", "guessedname": "_container", "guessedtype": "property", "type": "Object"}, "_report": {"description": "Call information for functions.", "private": "", "static": "", "guessedname": "_report", "guessedtype": "property", "type": "Object"}}, "description": "Profiles functions in JavaScript."}, "YAHOO.widget.OverlayManager": {"name": "YAHOO.widget.OverlayManager", "configs": {"focusevent": {"default": "\"mousedown\"", "type": "String", "description": "The default DOM event that should be used to focus an Overlay", "guessedname": "value", "guessedtype": "property"}, "overlays": {"default": "null", "type": "YAHOO.widget.Overlay[]", "description": "The collection of registered Overlays in use by \nthe OverlayManager", "guessedname": "suppressEvent", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Array", "name": "overlays", "description": " Optional. A collection of Overlays to register \nwith the manager."}, {"type": "Object", "name": "userConfig", "description": "  The object literal representing the user \nconfiguration of the OverlayManager"}], "description": "OverlayManager is used for maintaining the focus status of \nmultiple Overlays."}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "OverlayManager", "methods": {"showAll": {"description": "Shows all Overlays in the manager.", "guessedname": "showAll", "guessedtype": "function"}, "hideAll": {"description": "Hides all Overlays in the manager.", "guessedname": "hideAll", "guessedtype": "function"}, "blurAll": {"description": "Removes focus from all registered Overlays in the manager", "guessedname": "blurAll", "guessedtype": "function"}, "register": {"return": {"type": "Boolean", "description": "True if any Overlays are registered."}, "params": [{"type": "Overlay", "name": "overlay", "description": "  An Overlay to register with the manager."}, {"type": "Overlay[]", "name": "overlay", "description": "  An array of Overlays to register with \nthe manager."}], "description": "Registers an Overlay or an array of Overlays with the manager. Upon \nregistration, the Overlay receives functions for focus and blur, \nalong with CustomEvents for each.", "guessedname": "register", "guessedtype": "function"}, "focus": {"params": [{"type": "Overlay", "name": "overlay", "description": " The Overlay to focus"}, {"type": "String", "name": "overlay", "description": " The id of the Overlay to focus"}], "description": "Focuses the specified Overlay", "guessedname": "focus", "guessedtype": "function"}, "remove": {"params": [{"type": "Overlay", "name": "overlay", "description": " The Overlay to remove"}, {"type": "String", "name": "overlay", "description": " The id of the Overlay to remove"}], "description": "Removes the specified Overlay from the manager", "guessedname": "remove", "guessedtype": "function"}, "bringToTop": {"params": [{"type": "YAHOO.widget.Overlay", "name": "p_oOverlay", "description": " Object representing an \nOverlay instance."}, {"type": "String", "name": "p_oOverlay", "description": " String representing the id of an \nOverlay instance."}], "description": "Places the specified Overlay instance on top of all other \nOverlay instances.", "guessedname": "bringToTop", "guessedtype": "function"}, "compareZIndexDesc": {"guessedname": "compareZIndexDesc", "return": {"type": "Number", "description": "0, 1, or -1, depending on where the Overlay should \nfall in the stacking order."}, "description": "Used for sorting the manager's Overlays by z-index.", "private": "", "guessedtype": "function"}, "init": {"params": [{"type": "Overlay[]", "name": "overlays", "description": " Optional. A collection of Overlays to \nregister with the manager."}, {"type": "Object", "name": "userConfig", "description": "  The object literal representing the user \nconfiguration of the OverlayManager"}], "description": "Initializes the OverlayManager", "guessedname": "init", "guessedtype": "function"}, "getActive": {"return": {"type": "Overlay", "description": "The currently focused Overlay"}, "description": "Returns the currently focused Overlay", "guessedname": "getActive", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the OverlayManager"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "_onOverlayElementFocus": {"guessedname": "_onOverlayElementFocus", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event \nobject passed back by the event utility (Event)."}], "description": "Event handler for the DOM event that is used to focus \nthe Overlay instance as specified by the \"focusevent\" \nconfiguration property.", "private": "", "guessedtype": "function"}, "_onOverlayDestroy": {"guessedname": "_onOverlayDestroy", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}, {"type": "Overlay", "name": "p_oOverlay", "description": " Object representing the menu that \nfired the event."}], "description": "\"destroy\" event handler for the Overlay.", "private": "", "guessedtype": "function"}, "find": {"return": {"type": "Overlay", "description": "The requested Overlay, if found, or null if it \ncannot be located."}, "params": [{"type": "Overlay", "name": "overlay", "description": "  An Overlay to locate within the manager"}, {"type": "String", "name": "overlay", "description": "  An Overlay id to locate within the manager"}], "description": "Attempts to locate an Overlay by instance or ID.", "guessedname": "find", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the default configuration of the OverlayManager", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "file": "OverlayManager.js", "guessedtype": "function", "shortname": "OverlayManager", "properties": {"activeOverlay": {"guessedname": "activeOverlay", "type": "YAHOO.widget.Overlay", "description": "The currently activated Overlay", "private": "", "guessedtype": "property"}, "cfg": {"type": "Config", "description": "The OverlayManager's Config object used for monitoring \nconfiguration properties.", "guessedname": "cfg", "guessedtype": "property"}, "contructor": {"type": "Function", "description": "The class's constructor function", "guessedname": "constructor", "guessedtype": "property"}, "overlays": {"type": "YAHOO.widget.Overlay[]", "description": "The array of Overlays that are currently registered", "guessedname": "overlays", "guessedtype": "property"}, "OverlayManager.CSS_FOCUSED": {"description": "The CSS class representing a focused Overlay", "static": "", "guessedname": "CSS_FOCUSED", "guessedtype": "property", "type": "String", "final": ""}}, "description": "OverlayManager is used for maintaining the focus status of \nmultiple Overlays."}, "YAHOO.widget.SimpleEditor": {"name": "YAHOO.widget.SimpleEditor", "configs": {"height": {"default": "Best guessed size of the textarea, for best results use CSS to style the height of the textarea or pass it in as an argument", "type": "String", "description": "The height of the editor iframe container, not including the toolbar.."}, "disabled": {"default": "false", "type": "Boolean", "description": "This will toggle the editor's disabled state. When the editor is disabled, designMode is turned off and a mask is placed over the iframe so no interaction can take place.\nAll Toolbar buttons are also disabled so they cannot be used."}, "focusAtStart": {"default": "false", "type": "Boolean", "description": "Should we focus the window when the content is ready?"}, "editor_wrapper": {"default": "null", "type": "HTMLElement", "description": "The outter wrapper for the entire editor.", "private": ""}, "animate": {"default": "false unless Animation is found, then true", "type": "Boolean", "description": "Should the editor animate window movements"}, "extracss": {"default": "''", "type": "String", "description": "Extra user defined css to load after the default SimpleEditor CSS"}, "width": {"default": "Best guessed size of the textarea, for best results use CSS to style the width of the textarea or pass it in as an argument", "type": "String", "description": "The width of the editor container."}, "html": {"default": "This HTML requires a few things if you are to override:\n<p><code>{TITLE}, {CSS}, {HIDDEN_CSS}, {EXTRA_CSS}<\/code> and <code>{CONTENT}<\/code> need to be there, they are passed to YAHOO.lang.substitute to be replace with other strings.<p>\n<p><code>onload=\"document.body._rteLoaded = true;\"<\/code> : the onload statement must be there or the editor will not finish loading.<\/p>\n<code>\n<pre>\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;{TITLE}&lt;\/title&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\" \/&gt;\n&lt;style&gt;\n{CSS}\n&lt;\/style&gt;\n&lt;style&gt;\n{HIDDEN_CSS}\n&lt;\/style&gt;\n&lt;style&gt;\n{EXTRA_CSS}\n&lt;\/style&gt;\n&lt;\/head&gt;\n&lt;body onload=\"document.body._rteLoaded = true;\"&gt;\n{CONTENT}\n&lt;\/body&gt;\n&lt;\/html&gt;\n<\/pre>\n<\/code>", "type": "String", "description": "The default HTML to be written to the iframe document before the contents are loaded (Note that the DOCTYPE attr will be added at render item)"}, "handleSubmit": {"default": "false", "type": "Boolean", "description": "Config handles if the editor will attach itself to the textareas parent form's submit handler.\nIf it is set to true, the editor will attempt to attach a submit listener to the textareas parent form.\nThen it will trigger the editors save handler and place the new content back into the text area before the form is submitted."}, "allowNoEdit": {"default": "false", "type": "Boolean", "description": "Should the editor check for non-edit fields. It should be noted that this technique is not perfect. If the user does the right things, they will still be able to make changes.\nSuch as highlighting an element below and above the content and hitting a toolbar button or a shortcut key."}, "css": {"default": "<code><pre>html {\nheight: 95%;\n}\nbody {\nheight: 100%;\npadding: 7px; background-color: #fff; font:13px\/1.22 arial,helvetica,clean,sans-serif;*font-size:small;*font:x-small;\n}\na {\ncolor: blue;\ntext-decoration: underline;\ncursor: pointer;\n}\n.warning-localfile {\nborder-bottom: 1px dashed red !important;\n}\n.yui-busy {\ncursor: wait !important;\n}\nimg.selected { \/\/Safari image selection\nborder: 2px dotted #808080;\n}\nimg {\ncursor: pointer !important;\nborder: none;\n}\n<\/pre><\/code>", "type": "String", "description": "The Base CSS used to format the content of the editor"}, "element_cont": {"default": "false", "type": "HTMLElement", "description": "Internal config for the editors container"}, "removeLineBreaks": {"default": "false", "type": "Boolean", "description": "Should we remove linebreaks and extra spaces on cleanup"}, "nodeChangeThreshold": {"default": "3", "type": "Number", "description": "The number of seconds that need to be in between nodeChange processing"}, "toolbar": {"type": "Object", "description": "The default toolbar config."}, "panel": {"default": "false", "type": "Boolean", "description": "A reference to the panel we are using for windows."}, "limitCommands": {"default": "false", "type": "Boolean", "description": "Should the Editor limit the allowed execCommands to the ones available in the toolbar. If true, then execCommand and keyboard shortcuts will fail if they are not defined in the toolbar."}, "toolbar_cont": {"default": "false", "type": "Boolean", "description": "Internal config for the toolbars container"}, "textarea": {"default": "null", "depreciated": "", "type": "HTMLElement", "description": "Internal config for holding the textarea element (replaced with element).", "private": ""}, "markup": {"default": "\"semantic\"", "type": "String", "description": "Should we try to adjust the markup for the following types: semantic, css, default or xhtml"}, "dompath": {"default": "false", "type": "Boolean", "description": "Toggle the display of the current Dom path below the editor"}, "blankimage": {"default": "The yahooapis.com address for the current release + 'assets\/blankimage.png'", "type": "String", "description": "The URL for the image placeholder to put in when inserting an image."}, "iframe": {"default": "null", "type": "HTMLElement", "description": "Internal config for holding the iframe element.", "private": ""}}, "constructors": [{"params": [{"type": "String\/HTMLElement", "name": "el", "description": " The textarea element to turn into an editor."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization."}], "namespace": "YAHOO.widget", "module": "editor", "events": {"beforeFocusatstartChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeFocusatstartChangeEvent", "description": "Fires before the value for the configuration attribute 'focusAtStart' changes. Return false to cancel the attribute change."}, "beforeHeightChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeHeightChangeEvent", "description": "Fires before the value for the configuration attribute 'height' changes. Return false to cancel the attribute change."}, "editorKeyUp": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "markupChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "markupChangeEvent", "description": "Fires when the value for the configuration attribute 'markup' changes."}, "beforeDisabledChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDisabledChangeEvent", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "beforeBlankimageChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeBlankimageChangeEvent", "description": "Fires before the value for the configuration attribute 'blankimage' changes. Return false to cancel the attribute change."}, "afterExecCommand": {"type": "YAHOO.util.CustomEvent", "description": "Event fires at the end of the execCommand process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "handleSubmitChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "handleSubmitChangeEvent", "description": "Fires when the value for the configuration attribute 'handleSubmit' changes."}, "heightChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "heightChangeEvent", "description": "Fires when the value for the configuration attribute 'height' changes."}, "cleanHTML": {"type": "YAHOO.util.CustomEvent", "description": "Event is fired after the cleanHTML method is called."}, "beforeMarkupChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeMarkupChangeEvent", "description": "Fires before the value for the configuration attribute 'markup' changes. Return false to cancel the attribute change."}, "beforeAnimateChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeAnimateChangeEvent", "description": "Fires before the value for the configuration attribute 'animate' changes. Return false to cancel the attribute change."}, "toolbarLoaded": {"type": "YAHOO.util.CustomEvent", "description": "Event is fired during the render process directly after the Toolbar is loaded. Allowing you to attach events to the toolbar. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "beforeExtracssChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeExtracssChangeEvent", "description": "Fires before the value for the configuration attribute 'extracss' changes. Return false to cancel the attribute change."}, "removeLineBreaksChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "removeLineBreaksChangeEvent", "description": "Fires when the value for the configuration attribute 'removeLineBreaks' changes."}, "editorMouseDown": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "extracssChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "extracssChangeEvent", "description": "Fires when the value for the configuration attribute 'extracss' changes."}, "beforeRemovelinebreaksChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeRemovelinebreaksChangeEvent", "description": "Fires before the value for the configuration attribute 'removeLineBreaks' changes. Return false to cancel the attribute change."}, "widthChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "widthChangeEvent", "description": "Fires when the value for the configuration attribute 'width' changes."}, "beforeToolbarChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeToolbarChangeEvent", "description": "Fires before the value for the configuration attribute 'toolbar' changes. Return false to cancel the attribute change."}, "animateChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "animateChangeEvent", "description": "Fires when the value for the configuration attribute 'animate' changes."}, "blankimageChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "blankimageChangeEvent", "description": "Fires when the value for the configuration attribute 'blankimage' changes."}, "disabledChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChangeEvent", "description": "Fires when the value for the configuration attribute 'disabled' changes."}, "focusAtStartChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "focusAtStartChangeEvent", "description": "Fires when the value for the configuration attribute 'focusAtStart' changes."}, "cssChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "cssChangeEvent", "description": "Fires when the value for the configuration attribute 'css' changes."}, "beforeDompathChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDompathChangeEvent", "description": "Fires before the value for the configuration attribute 'dompath' changes. Return false to cancel the attribute change."}, "beforeExecCommand": {"type": "YAHOO.util.CustomEvent", "description": "Event fires at the beginning of the execCommand process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "editorKeyDown": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "beforeHandlesubmitChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeHandlesubmitChangeEvent", "description": "Fires before the value for the configuration attribute 'handleSubmit' changes. Return false to cancel the attribute change."}, "toolbarChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "toolbarChangeEvent", "description": "Fires when the value for the configuration attribute 'toolbar' changes."}, "beforeHtmlChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeHtmlChangeEvent", "description": "Fires before the value for the configuration attribute 'html' changes. Return false to cancel the attribute change."}, "editorMouseUp": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "beforeWidthChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeWidthChangeEvent", "description": "Fires before the value for the configuration attribute 'width' changes. Return false to cancel the attribute change."}, "editorDoubleClick": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "editorContentLoaded": {"type": "YAHOO.util.CustomEvent", "description": "Event is fired after the editor iframe's document fully loads and fires it's onload event. From here you can start injecting your own things into the document. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "dompathChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "dompathChangeEvent", "description": "Fires when the value for the configuration attribute 'dompath' changes."}, "beforeCssChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeCssChangeEvent", "description": "Fires before the value for the configuration attribute 'css' changes. Return false to cancel the attribute change."}, "afterRender": {"type": "YAHOO.util.CustomEvent", "description": "Event is fired after the render process finishes. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "htmlChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "htmlChangeEvent", "description": "Fires when the value for the configuration attribute 'html' changes."}, "editorKeyPress": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Event", "name": "ev", "description": " The DOM Event that occured"}], "description": "Passed through HTML Event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "beforeNodeChange": {"type": "YAHOO.util.CustomEvent", "description": "Event fires at the beginning of the nodeChange process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "afterNodeChange": {"type": "YAHOO.util.CustomEvent", "description": "Event fires at the end of the nodeChange process. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}}, "guessedname": "SimpleEditor", "methods": {"_setCurrentEvent": {"guessedname": "_setCurrentEvent", "params": [{"type": "Event", "name": "ev", "description": " The event to cache"}], "description": "Sets the current event property", "private": "", "guessedtype": "function"}, "show": {"description": "This method needs to be called if the Editor was hidden (like in a TabView or Panel). It is used to reset the editor after being in a container that was set to display none.", "guessedname": "show", "guessedtype": "function"}, "cmd_inserthtml": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('inserthtml') is used.", "guessedname": "cmd_inserthtml", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Object literal specifying a set of \nconfiguration attributes used to create the editor."}], "description": "Initializes all of the configuration attributes used to create \nthe editor.", "guessedname": "initAttributes", "guessedtype": "function"}, "filter_invalid_lists": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " html The HTML string to filter"}], "description": "Filters invalid ol and ul list markup, converts this: <li><\/li><ol>..<\/ol> to this: <li><\/li><li><ol>..<\/ol><\/li>", "guessedname": "filter_invalid_lists", "guessedtype": "function"}, "_checkLoaded": {"description": "Called from a setTimeout loop to check if the iframes body.onload event has fired, then it will init the editor.", "private": "", "guessedname": "_checkLoaded", "guessedtype": "function"}, "_toggleDesignMode": {"guessedname": "_toggleDesignMode", "return": {"type": "String", "description": "The state that it was set to."}, "description": "Toggles the designMode of the iFrame document on and off.", "private": "", "guessedtype": "function"}, "render": {"description": "Causes the toolbar and the editor to render and replace the textarea.", "guessedname": "render", "guessedtype": "function"}, "_handleAfterNodeChange": {"description": "Fires after a nodeChange happens to setup the things that where reset on the node change (button state).", "private": "", "guessedname": "_handleAfterNodeChange", "guessedtype": "function"}, "init": {"description": "The Editor class' initialization method", "guessedname": "init", "guessedtype": "function"}, "closeWindow": {"description": "Override Method for Advanced Editor", "guessedname": "closeWindow", "guessedtype": "function"}, "_handleMouseDown": {"guessedname": "_handleMouseDown", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all mousedown events inside the iFrame document.", "private": "", "guessedtype": "function"}, "_handleFontSize": {"guessedname": "_handleFontSize", "params": [{"type": "Object", "name": "o", "description": " Object returned from Toolbar's buttonClick Event"}], "description": "Handles the font size button in the toolbar.", "private": "", "guessedtype": "function"}, "nodeChange": {"params": [{"type": "Boolean", "name": "force", "description": " Optional paramenter to skip the threshold counter"}], "description": "Handles setting up the toolbar buttons, getting the Dom path, fixing nodes.", "guessedname": "nodeChange", "guessedtype": "function"}, "_updateMenuChecked": {"guessedname": "_updateMenuChecked", "params": [{"type": "Object", "name": "button", "description": " The command identifier of the button you want to check"}, {"type": "String", "name": "value", "description": " The value of the menu item you want to check"}, {"type": "<a href=\"YAHOO.widget.Toolbar.html\">YAHOO.widget.Toolbar<\/a>", "name": "The", "description": " Toolbar instance the button belongs to (defaults to this.toolbar)"}], "description": "Gets the menu from a button instance, if the menu is not rendered it will render it. It will then search the menu for the specified value, unchecking all other items and checking the specified on.", "private": "", "guessedtype": "function"}, "_cleanClassName": {"return": {"type": "String", "description": ""}, "params": [{"type": "String", "name": "str", "description": " The classname to clean up"}], "description": "Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -'s.", "private": ""}, "_setDesignMode": {"guessedname": "_setDesignMode", "params": [{"type": "String", "name": "state", "description": " This should be either on or off"}], "description": "Sets the designMode of the iFrame document.", "private": "", "guessedtype": "function"}, "cmd_fontname": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('fontname') is used.", "guessedname": "cmd_fontname", "guessedtype": "function"}, "_handleMouseUp": {"guessedname": "_handleMouseUp", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all mouseup events inside the iFrame document.", "private": "", "guessedtype": "function"}, "_getSelection": {"guessedname": "_getSelection", "return": {"type": "Object", "description": "Selection Object"}, "description": "Handles the different selection objects across the A-Grade list.", "private": "", "guessedtype": "function"}, "_createIframe": {"return": {"type": "Object", "description": "iFrame object"}, "description": "_createIframe", "private": "", "params": [{"type": "String", "name": "id", "description": " The string ID to prefix the iframe with"}], "guessedname": "_createIframe", "guessedtype": "function"}, "cmd_forecolor": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('forecolor') is used.", "guessedname": "cmd_forecolor", "guessedtype": "function"}, "_getDoc": {"guessedname": "_getDoc", "return": {"type": "Object", "description": ""}, "description": "Get the Document of the IFRAME", "private": "", "guessedtype": "function"}, "filter_all_rgb": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " str The HTML string to filter"}], "description": "Converts all RGB color strings found in passed string to a hex color, example: style=\"color: rgb(0, 255, 0)\" converts to style=\"color: #00ff00\"", "guessedname": "filter_all_rgb", "guessedtype": "function"}, "_handleInsertImageWindowClose": {"description": "Handles the closing of the Image Properties Window.", "private": "", "guessedname": "_handleInsertImageWindowClose", "guessedtype": "function"}, "_handleToolbarClick": {"guessedname": "_handleToolbarClick", "params": [{"type": "Event", "name": "ev", "description": " The event that triggered the button click"}], "description": "This is an event handler attached to the Toolbar's buttonClick event. It will fire execCommand with the command identifier from the Toolbar Button.", "private": "", "guessedtype": "function"}, "filter_rgb": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " css The CSS string containing rgb(#,#,#);"}], "description": "Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00", "guessedname": "filter_rgb", "guessedtype": "function"}, "cmd_createlink": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('createlink') is used.", "guessedname": "cmd_createlink", "guessedtype": "function"}, "cmd_insertorderedlist": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('insertorderedlist ') is used.", "guessedname": "cmd_insertorderedlist", "guessedtype": "function"}, "_disableEditor": {"guessedname": "_disableEditor", "params": [{"type": "Boolean", "name": "disabled", "description": " Pass true to disable, false to enable"}], "description": "Creates a mask to place over the Editor.", "private": "", "guessedtype": "function"}, "cmd_insertunorderedlist": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('insertunorderedlist') is used.", "guessedname": "cmd_insertunorderedlist", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the editor.", "guessedname": "toString", "guessedtype": "function"}, "cmd_insertimage": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('insertimage') is used.", "guessedname": "cmd_insertimage", "guessedtype": "function"}, "getEditorHTML": {"description": "Gets the unprocessed\/unfiltered HTML from the editor", "guessedname": "getEditorHTML", "guessedtype": "function"}, "saveHTML": {"description": "Cleans the HTML with the cleanHTML method then places that string back into the textarea.", "guessedname": "saveHTML", "guessedtype": "function"}, "_setupAfterElement": {"description": "Creates the accessibility h2 header and places it after the iframe in the Dom for navigation.", "private": "", "guessedname": "_setupAfterElement", "guessedtype": "function"}, "_getDomPath": {"return": {"type": "Array", "description": "An array of node references that will create the DOM Path."}, "description": "This method will attempt to build the DOM path from the currently selected element.", "private": "", "params": [{"type": "", "name": "HTMLElement", "description": " el The element to start with, if not provided _getSelectedElement is used"}], "guessedname": "_getDomPath", "guessedtype": "function"}, "_hasParent": {"return": {"type": "", "description": "HTMLElement"}, "description": "_hasParent", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to check"}, {"type": "String", "name": "tag", "description": " The tag that the element needs to be"}], "guessedname": "_hasParent", "guessedtype": "function"}, "_listFix": {"guessedname": "_listFix", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles the Enter key, Tab Key and Shift + Tab keys for List Items.", "private": "", "guessedtype": "function"}, "_createCurrentElement": {"guessedname": "_createCurrentElement", "params": [{"type": "String", "name": "tagName", "description": " (optional defaults to a) The tagname of the element that you wish to create"}, {"type": "Object", "name": "tagStyle", "description": " (optional) Object literal containing styles to apply to the new element."}], "description": "This is a work around for the various browser issues with execCommand. This method will run <code>execCommand('fontname', false, 'yui-tmp')<\/code> on the given selection.\nIt will then search the document for an element with the font-family set to <strong>yui-tmp<\/strong> and replace that with another span that has other information in it, then assign the new span to the \n<code>this.currentElement<\/code> array, so we now have element references to the elements that were just modified. At this point we can use standard DOM manipulation to change them as we see fit.", "private": "", "guessedtype": "function"}, "cleanHTML": {"return": {"type": "String", "description": "The filtered HTML"}, "params": [{"type": "String", "name": "html", "description": " The unfiltered HTML"}], "description": "Process the HTML with a few regexes to clean it up and stabilize the output", "guessedname": "cleanHTML", "guessedtype": "function"}, "_handleKeyDown": {"guessedname": "_handleKeyDown", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all keydown events inside the iFrame document.", "private": "", "guessedtype": "function"}, "_closeWindow": {"description": "Override Method for Advanced Editor", "private": "", "guessedname": "_closeWindow", "guessedtype": "function"}, "_fixNodes": {"description": "Fix href and imgs as well as remove invalid HTML.", "private": "", "guessedname": "_fixNodes", "guessedtype": "function"}, "setEditorHTML": {"params": [{"type": "String", "name": "html", "description": " The html content to load into the editor"}], "description": "Loads HTML into the editors body", "guessedname": "setEditorHTML", "guessedtype": "function"}, "_cleanIncomingHTML": {"return": {"type": "String", "description": "The filtered HTML"}, "params": [{"type": "String", "name": "html", "description": " The unfiltered HTML"}], "description": "Process the HTML with a few regexes to clean it up and stabilize the input", "guessedname": "_cleanIncomingHTML", "guessedtype": "function"}, "_isLocalFile": {"guessedname": "_isLocalFile", "params": [{"type": "String", "name": "url", "description": " THe url\/string to check"}], "description": "Checks to see if a string (href or img src) is possibly a local file reference..", "private": "", "guessedtype": "function"}, "_swapEl": {"guessedname": "_swapEl", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to swap with"}, {"type": "String", "name": "tagName", "description": " The tagname of the element that you wish to create"}, {"type": "Function", "name": "callback", "description": " (optional) A function to run on the element after it is created, but before it is replaced. An element reference is passed to this function."}], "description": "This function will create a new element in the DOM and populate it with the contents of another element. Then it will assume it's place.", "private": "", "guessedtype": "function"}, "openWindow": {"description": "Override Method for Advanced Editor", "guessedname": "openWindow", "guessedtype": "function"}, "pre_filter_linebreaks": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " html The HTML to filter"}, {"type": "", "name": "String", "description": " markup The markup type to filter to"}], "description": "HTML Pre Filter", "guessedname": "pre_filter_linebreaks", "guessedtype": "function"}, "_getSelectedElement": {"guessedname": "_getSelectedElement", "return": {"type": "HTMLElement", "description": "The currently selected element."}, "description": "This method will attempt to locate the element that was last interacted with, either via selection, location or event.", "private": "", "guessedtype": "function"}, "clearEditorDoc": {"description": "Clear the doc of the Editor", "guessedname": "clearEditorDoc", "guessedtype": "function"}, "_handleInsertImageClick": {"description": "Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.", "private": "", "guessedname": "_handleInsertImageClick", "guessedtype": "function"}, "_renderPanel": {"description": "Override Method for Advanced Editor", "private": "", "guessedname": "_renderPanel", "guessedtype": "function"}, "_handleKeyPress": {"guessedname": "_handleKeyPress", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all keypress events inside the iFrame document.", "private": "", "guessedtype": "function"}, "_hasSelection": {"guessedname": "_hasSelection", "return": {"type": "Boolean", "description": ""}, "description": "Determines if there is a selection in the editor document.", "private": "", "guessedtype": "function"}, "_handleColorPicker": {"guessedname": "_handleColorPicker", "params": [{"type": "Object", "name": "o", "description": " Object returned from Toolbar's buttonClick Event"}], "description": "Handles the colorpicker buttons in the toolbar.", "private": "", "guessedtype": "function"}, "_selectNode": {"guessedname": "_selectNode", "params": [{"type": "HTMLElement", "name": "node", "description": " The node to select"}], "description": "Places the highlight around a given node", "private": "", "guessedtype": "function"}, "_handleAlign": {"guessedname": "_handleAlign", "params": [{"type": "Object", "name": "o", "description": " Object returned from Toolbar's buttonClick Event"}], "description": "Handles the alignment buttons in the toolbar.", "private": "", "guessedtype": "function"}, "cmd_backcolor": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('backcolor') is used.", "guessedname": "cmd_backcolor", "guessedtype": "function"}, "moveWindow": {"description": "Override Method for Advanced Editor", "guessedname": "moveWindow", "guessedtype": "function"}, "_focusWindow": {"guessedname": "_focusWindow", "params": [{"type": "Boolean", "name": "onLoad", "description": " Safari needs some special care to set the cursor in the iframe"}], "description": "Attempt to set the focus of the iframes window.", "private": "", "guessedtype": "function"}, "_isNonEditable": {"return": {"type": "", "description": "Boolean"}, "description": "Method is called at the beginning of all event handlers to check if this element or a parent element has the class yui-noedit (this.CLASS_NOEDIT) applied.\nIf it does, then this method will stop the event and return true. The event handlers will then return false and stop the nodeChange from occuring. This method will also\ndisable and enable the Editor's toolbar based on the noedit state.", "private": "", "params": [{"type": "", "name": "Event", "description": " ev The Dom event being checked"}], "guessedname": "_isNonEditable", "guessedtype": "function"}, "_isElement": {"return": {"type": "Boolean", "description": ""}, "description": "_isElement", "private": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to check"}, {"type": "String", "name": "tag", "description": " The tag that the element needs to be"}], "guessedname": "_isElement", "guessedtype": "function"}, "_initEditor": {"description": "This method is fired from _checkLoaded when the document is ready. It turns on designMode and set's up the listeners.", "private": "", "guessedname": "_initEditor", "guessedtype": "function"}, "_handleKeyUp": {"guessedname": "_handleKeyUp", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all keyup events inside the iFrame document.", "private": "", "guessedtype": "function"}, "_handleCreateLinkClick": {"description": "Handles the opening of the Link Properties Window when the Create Link button is clicked or an href is doubleclicked.", "private": "", "guessedname": "_handleCreateLinkClick", "guessedtype": "function"}, "_getBlankImage": {"guessedname": "_getBlankImage", "return": {"type": "String", "description": "The URL to the blank image"}, "description": "Retrieves the full url of the image to use as the blank image.", "private": "", "guessedtype": "function"}, "_setMarkupType": {"guessedname": "_setMarkupType", "params": [{"type": "String", "name": "action", "description": " The action to take. Possible values are: css, default or semantic"}], "description": "This method will turn on\/off the useCSS execCommand.", "private": "", "guessedtype": "function"}, "filter_safari": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " html The HTML string to filter"}], "description": "Filters strings specific to Safari", "guessedname": "filter_safari", "guessedtype": "function"}, "destroy": {"return": {"type": "Boolean", "description": ""}, "description": "Destroys the editor, all of it's elements and objects.", "guessedname": "destroy", "guessedtype": "function"}, "_handleCreateLinkWindowClose": {"description": "Handles the closing of the Link Properties Window.", "private": "", "guessedname": "_handleCreateLinkWindowClose", "guessedtype": "function"}, "filter_internals": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " html The HTML string to filter"}], "description": "Filters internal RTE strings and bogus attrs we don't want", "guessedname": "filter_internals", "guessedtype": "function"}, "cmd_list": {"params": [{"type": "", "name": "tag", "description": " The tag of the list you want to create (eg, ul or ol)"}], "description": "This is a combined execCommand override method. It is called from the cmd_insertorderedlist and cmd_insertunorderedlist methods.", "guessedname": "cmd_list", "guessedtype": "function"}, "cmd_fontsize": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('fontsize') is used.", "guessedname": "cmd_fontsize", "guessedtype": "function"}, "_setInitialContent": {"description": "This method will open the iframes content document and write the textareas value into it, then start the body.onload checking.", "private": "", "guessedname": "_setInitialContent", "guessedtype": "function"}, "_handleDoubleClick": {"guessedname": "_handleDoubleClick", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all doubleclick events inside the iFrame document.", "private": "", "guessedtype": "function"}, "hide": {"description": "This method needs to be called if the Editor is to be hidden (like in a TabView or Panel). It should be called to clear timeouts and close open editor windows.", "guessedname": "hide", "guessedtype": "function"}, "post_filter_linebreaks": {"return": {"type": "", "description": "String"}, "params": [{"type": "", "name": "String", "description": " html The HTML to filter"}, {"type": "", "name": "String", "description": " markup The markup type to filter to"}], "description": "HTML Pre Filter", "guessedname": "post_filter_linebreaks", "guessedtype": "function"}, "cmd_unlink": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('unlink') is used.", "guessedname": "cmd_unlink", "guessedtype": "function"}, "_getWindow": {"guessedname": "_getWindow", "return": {"type": "Object", "description": ""}, "description": "Get the Window of the IFRAME", "private": "", "guessedtype": "function"}, "_writeDomPath": {"description": "Write the current DOM path out to the dompath container below the editor.", "private": "", "guessedname": "_writeDomPath", "guessedtype": "function"}, "_handleClick": {"guessedname": "_handleClick", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Handles all click events inside the iFrame document.", "private": "", "guessedtype": "function"}, "execCommand": {"params": [{"type": "String", "name": "action", "description": " The \"execCommand\" action to try to execute (Example: bold, insertimage, inserthtml)"}, {"type": "String", "name": "value", "description": " (optional) The value for a given action such as action: fontname value: 'Verdana'"}], "description": "This method attempts to try and level the differences in the various browsers and their support for execCommand actions", "guessedname": "execCommand", "guessedtype": "function"}, "_getRange": {"guessedname": "_getRange", "return": {"type": "Object", "description": "Range Object"}, "description": "Handles the different range objects across the A-Grade list.", "private": "", "guessedtype": "function"}, "_setEditorStyle": {"params": [{"type": "Booleen", "name": "stat", "description": " True\/False"}], "description": "Set the editor to use CSS instead of HTML", "guessedname": "_setEditorStyle", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "simple-editor.js", "guessedtype": "function", "shortname": "SimpleEditor", "properties": {"CLASS_EDITABLE_CONT": {"protected": "", "type": "String", "description": "Default CSS class to apply to the editors iframe's parent element", "guessedname": "CLASS_EDITABLE_CONT", "guessedtype": "property"}, "_alwaysDisabled": {"guessedname": "_alwaysDisabled", "type": "Object", "description": "The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.", "private": "", "guessedtype": "property"}, "_blankImageLoaded": {"guessedname": "_blankImageLoaded", "type": "Date", "description": "Don't load the blank image more than once..", "private": "", "guessedtype": "property"}, "_showingHiddenElements": {"guessedname": "_showingHiddenElements", "type": "Boolean", "description": "Status of the hidden elements button", "private": "", "guessedtype": "property"}, "el": {"knownissue": "", "browser": "Safari 2.x", "description": "The issue here is that we have no way of knowing where the cursor position is\ninside of the iframe, so we have to place the newly inserted data in the best place that we can.", "guessedname": "el", "guessedtype": "property"}, "afterElement": {"type": "HTMLElement", "description": "A reference to the H2 placed after the editor for Accessibilty.", "guessedname": "afterElement", "guessedtype": "property"}, "_baseHREF": {"guessedname": "_baseHREF", "type": "String", "description": "The base location of the editable page (this page) so that relative paths for image work.", "private": "", "guessedtype": "function"}, "SEP_DOMPATH": {"type": "String", "description": "The value to place in between the Dom path items", "guessedname": "SEP_DOMPATH", "guessedtype": "property"}, "_selection": {"guessedname": "_selection", "type": "Object", "description": "Holder for caching iframe selections", "private": "", "guessedtype": "property"}, "STR_BEFORE_EDITOR": {"type": "String", "description": "The accessibility string for the element before the iFrame", "guessedname": "STR_BEFORE_EDITOR", "guessedtype": "property"}, "sel": {"knownissue": "Opera appears to stop the MouseDown, Click and DoubleClick events on an image inside of a document with designMode on..", "browser": "Opera", "description": "This work around traps the MouseUp event and sets a timer to check if another MouseUp event fires in so many seconds. If another event is fired, they we internally fire the DoubleClick event.", "guessedname": "sel", "guessedtype": "property"}, "_defaultCSS": {"type": "String", "description": "The default CSS used in the config for 'css'. This way you can add to the config like this: { css: YAHOO.widget.SimpleEditor.prototype._defaultCSS + 'ADD MYY CSS HERE' }", "guessedname": "_defaultCSS", "guessedtype": "property"}, "DOMReady": {"guessedname": "DOMReady", "type": "Boolean", "description": "Flag to determine if DOM is ready or not", "private": "", "guessedtype": "property"}, "_tag2cmd": {"guessedname": "_tag2cmd", "type": "Object", "description": "A tag map of HTML tags to convert to the different types of commands so we can select the proper toolbar button.", "private": "", "guessedtype": "property"}, "_lastNodeChangeEvent": {"guessedname": "_lastNodeChangeEvent", "type": "Event", "description": "Flag to determine the last event that fired a node change", "private": "", "guessedtype": "property"}, "STOP_NODE_CHANGE": {"protected": "", "type": "Boolean", "description": "Set to true when you want the default nodeChange function to not process anything", "guessedname": "STOP_NODE_CHANGE", "guessedtype": "property"}, "currentEvent": {"type": "Event", "description": "A reference to the current editor event", "guessedname": "currentEvent", "guessedtype": "property"}, "STR_TITLE": {"type": "String", "description": "The Title of the HTML document that is created in the iFrame", "guessedname": "STR_TITLE", "guessedtype": "property"}, "_rendered": {"guessedname": "_rendered", "type": "Boolean", "description": "Flag to determine if editor has been rendered or not", "private": "", "guessedtype": "property"}, "STR_LINK_URL": {"type": "String", "description": "The label string for the Link URL.", "guessedname": "STR_LINK_URL", "guessedtype": "property"}, "CLASS_PREFIX": {"protected": "", "type": "String", "description": "Default prefix for dynamically created class names", "guessedname": "CLASS_PREFIX", "guessedtype": "property"}, "CLASS_NOEDIT": {"protected": "", "type": "String", "description": "CSS class applied to elements that are not editable.", "guessedname": "CLASS_NOEDIT", "guessedtype": "property"}, "editorDirty": {"type": "Boolean", "description": "This flag will be set when certain things in the Editor happen. It is to be used by the developer to check to see if content has changed.", "guessedname": "editorDirty", "guessedtype": "property"}, "_semantic": {"guessedname": "_semantic", "type": "Object", "description": "The Toolbar commands that we should attempt to make tags out of instead of using styles.", "private": "", "guessedtype": "property"}, "_alwaysEnabled": {"guessedname": "_alwaysEnabled", "type": "Object", "description": "The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.", "private": "", "guessedtype": "property"}, "_contentTimerCounter": {"guessedname": "_contentTimerCounter", "type": "Number", "description": "Counter to check the number of times the body is polled for before giving up", "private": "", "guessedtype": "property"}, "_disabled": {"guessedname": "_disabled", "type": "Array", "description": "The Toolbar items that should be disabled if there is no selection present in the editor.", "private": "", "guessedtype": "property"}, "_lastImage": {"guessedname": "_lastImage", "type": "HTMLElement", "description": "Safari reference for the last image selected (for styling as selected).", "private": "", "guessedtype": "property"}, "_lastButton": {"guessedname": "_lastButton", "type": "Object", "description": "The last button pressed, so we don't disable it.", "private": "", "guessedtype": "property"}, "currentFont": {"type": "HTMLElement", "description": "A reference to the last font selected from the Toolbar", "guessedname": "currentFont", "guessedtype": "property"}, "_lastNodeChange": {"guessedname": "_lastNodeChange", "type": "Date", "description": "Flag to determine when the last node change was fired", "private": "", "guessedtype": "property"}, "_mask": {"guessedname": "_mask", "type": "Object", "description": "DOM Element holder for the editor Mask when disabled", "private": "", "guessedtype": "property"}, "_fixNodesTimer": {"guessedname": "_fixNodesTimer", "type": "Date", "description": "Holder for the fixNodes timer", "private": "", "guessedtype": "property"}, "currentWindow": {"type": "Object", "description": "A reference to the currently open EditorWindow", "guessedname": "currentWindow", "guessedtype": "property"}, "currentElement": {"type": "Array", "description": "A reference to the current working element in the editor", "guessedname": "currentElement", "guessedtype": "property"}, "_nodeChangeTimer": {"guessedname": "_nodeChangeTimer", "type": "Number", "description": "Holds a reference to the nodeChange setTimeout call", "private": "", "guessedtype": "property"}, "CLASS_CONTAINER": {"protected": "", "type": "String", "description": "Default CSS class to apply to the editors container element", "guessedname": "CLASS_CONTAINER", "guessedtype": "property"}, "STR_LEAVE_EDITOR": {"type": "String", "description": "The accessibility string for the element after the iFrame", "guessedname": "STR_LEAVE_EDITOR", "guessedtype": "property"}, "toolbar": {"type": "<a href=\"YAHOO.widget.Toolbar.html\">YAHOO.widget.Toolbar<\/a>", "description": "Local property containing the <a href=\"YAHOO.widget.Toolbar.html\">YAHOO.widget.Toolbar<\/a> instance", "guessedname": "toolbar", "guessedtype": "property"}, "_docType": {"type": "String", "description": "The DOCTYPE to use in the editable container.", "guessedname": "_docType", "guessedtype": "property"}, "CLASS_EDITABLE": {"protected": "", "type": "String", "description": "Default CSS class to apply to the editors iframe element", "guessedname": "CLASS_EDITABLE", "guessedtype": "property"}, "STR_IMAGE_HERE": {"type": "String", "description": "The text to place in the URL textbox when using the blankimage.", "guessedname": "STR_IMAGE_HERE", "guessedtype": "property"}, "EDITOR_PANEL_ID": {"type": "String", "description": "HTML id to give the properties window in the DOM.", "guessedname": "EDITOR_PANEL_ID", "guessedtype": "property"}, "operaEvent": {"guessedname": "operaEvent", "type": "Object", "description": "setTimeout holder for Opera and Image DoubleClick event..", "private": "", "guessedtype": "property"}, "dompath": {"type": "HTMLElement", "description": "A reference to the dompath container for writing the current working dom path to.", "guessedname": "dompath", "guessedtype": "property"}, "beforeElement": {"type": "HTMLElement", "description": "A reference to the H2 placed before the editor for Accessibilty.", "guessedname": "beforeElement", "guessedtype": "property"}, "STOP_EXEC_COMMAND": {"protected": "", "type": "Boolean", "description": "Set to true when you want the default execCommand function to not process anything", "guessedname": "STOP_EXEC_COMMAND", "guessedtype": "property"}, "_contentTimer": {"private": "", "description": "setTimeout holder for documentReady check", "guessedname": "_contentTimer", "guessedtype": "property"}, "_defaultToolbar": {"guessedname": "_defaultToolbar", "type": "Object", "description": "Default toolbar config.", "private": "", "guessedtype": "property"}, "invalidHTML": {"type": "Object", "description": "Contains a list of HTML elements that are invalid inside the editor. They will be removed when they are found. If you set the value of a key to \"{ keepContents: true }\", then the element will be replaced with a yui-non span to be filtered out when cleanHTML is called. The only tag that is ignored here is the span tag as it will force the Editor into a loop and freeze the browser. However.. all of these tags will be removed in the cleanHTML routine.", "guessedname": "invalidHTML", "guessedtype": "property"}, "browser": {"type": "Object", "description": "Standard browser detection", "guessedname": "browser", "guessedtype": "function"}}, "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization."}, "YAHOO.util.Get": {"name": "YAHOO.util.Get", "namespace": "YAHOO.util", "module": "get", "guessedname": "Get", "methods": {"_purge": {"private": "", "description": "Removes the nodes for the specified queue", "guessedname": "_purge", "guessedtype": "function"}, "_finalize": {"guessedname": "_finalize", "params": [{"type": "string", "name": "id", "description": "  the transaction id"}], "description": "Called by the the helper for detecting script load in Safari", "private": "", "guessedtype": "function"}, "_autoPurge": {"private": "", "description": "Removes processed queues and corresponding nodes", "guessedname": "_autoPurge", "guessedtype": "function"}, "_finish": {"guessedname": "_finish", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "description": "The request is complete, so executing the requester's callback", "private": "", "guessedtype": "function"}, "_linkNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a link node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the css file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_linkNode", "guessedtype": "function"}, "script": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.", "static": "", "guessedname": "script", "guessedtype": "function", "params": [{"type": "string|string[]", "name": "url", "description": "  the url or urls to the script(s)"}, {"type": "object", "name": "opts", "description": "  Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>onFailure<\/dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted successfully<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>scope<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>autopurge<\/dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge \nthe script once loaded\n<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n<\/dd>\n<dt>varName<\/dt>\n<dd>\nvariable that should be available when a script is finished\nloading.  Used to help Safari 2.x and below with script load \ndetection.  The type of this property should match what was\npassed into the url parameter: if loading a single url, a\nstring can be supplied.  If loading multiple scripts, you\nmust supply an array that contains the variable name for\neach script.\n<\/dd>\n<\/dl>\n<pre>\n\/\/ assumes yahoo, dom, and event are already on the page\n&nbsp;&nbsp;YAHOO.util.Get.script(\n&nbsp;&nbsp;[\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/dragdrop\/dragdrop-min.js\",\n&nbsp;&nbsp;&nbsp;\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/animation\/animation-min.js\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YAHOO.log(o.data); \/\/ foo\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new YAHOO.util.DDProxy(\"dd1\"); \/\/ also new o.reference(\"dd1\"); would work\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(\"won't cause error because YAHOO is the scope\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(o.nodes.length === 2) \/\/ true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/ o.purge(); \/\/ optionally remove the script nodes immediately\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YAHOO.log(\"transaction failed\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;data: \"foo\",\n&nbsp;&nbsp;&nbsp;&nbsp;scope: YAHOO,\n&nbsp;&nbsp;&nbsp;&nbsp;\/\/ win: otherframe \/\/ target another window\/frame\n&nbsp;&nbsp;&nbsp;&nbsp;autopurge: true \/\/ allow the utility to choose when to remove the nodes\n&nbsp;&nbsp;&#125;);\n<\/pre>"}]}, "_returnData": {"private": "", "description": "Returns the data payload for callback functions", "guessedname": "_returnData", "guessedtype": "function"}, "queue": {"guessedname": "_queue", "params": [{"type": "string", "name": "type", "description": "  the type of node to insert"}, {"type": "string", "name": "url", "description": "  the url to load"}, {"type": "", "name": "opts", "description": " the hash of options for this request"}], "description": "Saves the state for the request and begins loading\nthe requested urls", "private": "", "guessedtype": "function"}, "_scriptNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a script node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the script file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_scriptNode", "guessedtype": "function"}, "_node": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates an HTML element, this is not appended to a document", "private": "", "params": [{"type": "string", "name": "type", "description": "  the type of element"}, {"type": "string", "name": "attr", "description": "  the attributes"}, {"type": "Window", "name": "win", "description": "  optional window to create the element in"}], "guessedname": "_node", "guessedtype": "function"}, "abort": {"params": [{"type": "string|object", "name": "either", "description": " the tId or the object returned from\nscript() or css()"}], "description": "Abort a transaction", "guessedname": "abort", "guessedtype": "function"}, "_next": {"guessedname": "_next", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "loaded", "description": "  the url that was just loaded, if any"}], "description": "Loads the next item for a given request", "private": "", "guessedtype": "function"}, "_track": {"guessedname": "_track", "params": [{"type": "string", "name": "type", "description": "  the type of node to track"}, {"type": "HTMLElement", "name": "n", "description": "  the node to track"}, {"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "url", "description": "  the url that is being loaded"}, {"type": "Window", "name": "win", "description": "  the targeted window"}, {"type": "", "name": "qlength", "description": " the number of remaining items in the queue,\nincluding this one"}, {"type": "Function", "name": "trackfn", "description": "  function to execute when finished\nthe default is _next"}], "description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.", "private": "", "guessedtype": "function"}, "css": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more css link nodes into the \nhead of the current document or the document in a specified\nwindow.", "static": "", "guessedname": "css", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": "  the url or urls to the css file(s)"}, {"type": "", "name": "opts", "description": " Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win<\/dl>\n<dd>the window the link nodes(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>scope<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n<\/dd>\n<\/dl>\n<pre>\nYAHOO.util.Get.css(\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\");\n<\/pre>\n<pre>\nYAHOO.util.Get.css([\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\",\n\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/logger\/assets\/skins\/sam\/logger.css\"]);\n<\/pre>"}]}}, "file": "Get.js", "guessedtype": "function", "shortname": "Get", "properties": {"POLL_FREQ": {"description": "The default poll freqency in ms, when needed", "default": "10", "static": "", "guessedname": "POLL_FREQ", "guessedtype": "property", "type": "int"}, "qidx": {"guessedname": "qidx", "type": "int", "description": "queue index used to generate transaction ids", "private": "", "guessedtype": "property"}, "queues": {"private": "", "description": "hash of queues to manage multiple requests", "guessedname": "queues", "guessedtype": "property"}, "purging": {"guessedname": "purging", "type": "boolean", "description": "interal property used to prevent multiple simultaneous purge \nprocesses", "private": "", "guessedtype": "property"}, "TIMEOUT": {"description": "The length time to poll for varName when loading a script in\nSafari 2.x before the transaction fails.\nproperty TIMEOUT", "default": "2000", "static": "", "guessedname": "TIMEOUT", "guessedtype": "property", "type": "int"}, "nidx": {"guessedname": "nidx", "type": "int", "description": "node index used to generate unique node ids", "private": "", "guessedtype": "property"}, "PURGE_THRESH": {"description": "The number of request required before an automatic purge.\nproperty PURGE_THRESH", "default": "20", "static": "", "guessedname": "PURGE_THRESH", "guessedtype": "property", "type": "int"}}, "description": "Fetches and inserts one or more script or link nodes into the document"}, "YAHOO.widget.DS_XHR": {"name": "YAHOO.widget.DS_XHR", "constructors": [{"params": [{"type": "String", "name": "sScriptURI", "description": "  Absolute or relative URI to script that returns query\r\nresults as JSON, XML, or delimited flat-file data."}, {"type": "String[]", "name": "aSchema", "description": "  Data schema definition of results."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of config params."}], "description": "Implementation of YAHOO.widget.DataSource using XML HTTP requests that return\r\nquery results."}], "namespace": "YAHOO.widget", "module": "autocomplete", "guessedname": "DS_XHR", "methods": {"parseResponse": {"returns": "{Object[]} Array of result objects.", "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oResponse", "description": "  The raw response data to parse."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Parses raw response data into an array of result objects. The result data key\r\nis always stashed in the [0] element of each result object.", "guessedname": "parseResponse", "guessedtype": "function"}, "doQuery": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Queries the live data source defined by scriptURI for results. Results are\r\npassed back to a callback function.", "guessedname": "doQuery", "guessedtype": "function"}}, "extends": "YAHOO.widget.DataSource", "superclass": "YAHOO.widget.DataSource", "file": "DataSource.js", "guessedtype": "function", "shortname": "DS_XHR", "requires": "connection", "properties": {"responseType": {"default": "YAHOO.widget.DS_XHR.TYPE_JSON", "type": "String", "description": "XHR response data type. Other types that may be defined are YAHOO.widget.DS_XHR.TYPE_XML\r\nand YAHOO.widget.DS_XHR.TYPE_FLAT.", "guessedname": "responseType", "guessedtype": "property"}, "scriptQueryAppend": {"default": "\"\"", "type": "String", "description": "String of key\/value pairs to append to requests made to scriptURI. Define\r\nthis string when you want to send additional query parameters to your script.\r\nWhen defined, queries will be sent to\r\n&#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=userinput&#38;&#60;scriptQueryAppend&#62;", "guessedname": "scriptQueryAppend", "guessedtype": "property"}, "responseStripAfter": {"default": "\"\\n&#60;!-\"", "type": "String", "description": "String after which to strip results. If the results from the XHR are sent\r\nback as HTML, the gzip HTML comment appears at the end of the data and should\r\nbe ignored.", "guessedname": "responseStripAfter", "guessedtype": "property"}, "TYPE_XML": {"description": "XML data type.", "static": "", "guessedname": "TYPE_XML", "guessedtype": "property", "type": "Number", "final": ""}, "scriptURI": {"type": "String", "description": "Absolute or relative URI to script that returns query results. For instance,\r\nqueries will be sent to &#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=userinput", "guessedname": "scriptURI", "guessedtype": "property"}, "connTimeout": {"default": "0", "type": "Number", "description": "Number of milliseconds the XHR connection will wait for a server response. A\r\na value of zero indicates the XHR connection will wait forever. Any value\r\ngreater than zero will use the Connection utility's Auto-Abort feature.", "guessedname": "connTimeout", "guessedtype": "property"}, "_oConn": {"guessedname": "_oConn", "type": "Object", "description": "XHR connection object.", "private": "", "guessedtype": "property"}, "ERROR_DATAXHR": {"description": "Error message for XHR failure.", "static": "", "guessedname": "ERROR_DATAXHR", "guessedtype": "property", "type": "String", "final": ""}, "TYPE_FLAT": {"description": "Flat-file data type.", "static": "", "guessedname": "TYPE_FLAT", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_JSON": {"description": "JSON data type.", "static": "", "guessedname": "TYPE_JSON", "guessedtype": "property", "type": "Number", "final": ""}, "scriptQueryParam": {"default": "\"query\"", "type": "String", "description": "Query string parameter name sent to scriptURI. For instance, queries will be\r\nsent to &#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=userinput", "guessedname": "scriptQueryParam", "guessedtype": "property"}, "connMgr": {"default": "YAHOO.util.Connect", "type": "Object", "description": "Alias to YUI Connection Manager. Allows implementers to specify their own\r\nsubclasses of the YUI Connection Manager utility.", "guessedname": "connMgr", "guessedtype": "property"}}, "description": "Implementation of YAHOO.widget.DataSource using XML HTTP requests that return\r\nquery results."}, "YAHOO.widget.TVFadeIn": {"name": "YAHOO.widget.TVFadeIn", "constructors": [{"params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "function", "name": "callback", "description": "  function to invoke when the animation is finished"}], "description": "A 1\/2 second fade-in animation."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TVFadeIn", "methods": {"onComplete": {"description": "Clean up and invoke callback", "guessedname": "onComplete", "guessedtype": "function"}, "animate": {"description": "Performs the animation", "guessedname": "animate", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "the string representation of the instance"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}}, "file": "TVFadeIn.js", "guessedtype": "function", "shortname": "TVFadeIn", "properties": {"el": {"type": "HTMLElement", "description": "The element to animate", "guessedname": "el", "guessedtype": "property"}, "callback": {"type": "function", "description": "the callback to invoke when the animation is complete", "guessedname": "callback", "guessedtype": "property"}}, "description": "A 1\/2 second fade-in animation."}, "YAHOO.widget.CalendarGroup": {"name": "YAHOO.widget.CalendarGroup", "configs": {"MY_LABEL_YEAR_POSITION": {"default": "2", "type": "Number", "description": "The position of the year in the month year label string used as the Calendar header", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEKDAYS": {"default": "true", "type": "Boolean", "description": "True if the Calendar should show weekday labels. True by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "MY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "MONTHS_SHORT": {"default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]", "type": "String[]", "description": "The short month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MULTI_SELECT": {"default": "false", "type": "Boolean", "description": "True if the Calendar should allow multiple selections. False by default.", "guessedname": "value", "guessedtype": "property"}, "MY_LABEL_YEAR_SUFFIX": {"default": "\"\"", "type": "String", "description": "The suffix used after the year when rendering the Calendar header", "guessedname": "value", "guessedtype": "property"}, "DATE_FIELD_DELIMITER": {"default": "\"\/\"", "type": "String", "description": "The value used to delimit date fields in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "MY_YEAR_POSITION": {"default": "2", "type": "Number", "description": "The position of the year in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "close": {"default": "false", "type": "Boolean", "description": "Whether or not a close button should be displayed for this CalendarGroup", "guessedname": "value", "guessedtype": "property"}, "MONTHS_LONG": {"default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"", "type": "String[]", "description": "The long month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_MEDIUM": {"default": "[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]", "type": "String[]", "description": "The medium weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "LOCALE_WEEKDAYS": {"default": "\"short\"", "type": "String", "description": "The setting that determines which length of weekday labels should be used. Possible values are \"1char\", \"short\", \"medium\", and \"long\".", "guessedname": "value", "guessedtype": "property"}, "DATE_RANGE_DELIMITER": {"default": "\"-\"", "type": "String", "description": "The value used to delimit date ranges in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_HEADER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row headers. False by default.", "guessedname": "value", "guessedtype": "property"}, "title": {"default": "\"\"", "type": "String", "description": "The title to display above the CalendarGroup's month header", "guessedname": "value", "guessedtype": "property"}, "maxdate": {"default": "null", "type": "String", "description": "The maximum selectable date in the current Calendar (mm\/dd\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "selected": {"default": "[]", "type": "String", "description": "The date or range of dates representing the current Calendar selection", "guessedname": "value", "guessedtype": "property"}, "pages": {"default": "2", "type": "Number", "description": "The number of pages to include in the CalendarGroup. This value can only be set once, in the CalendarGroup's constructor arguments.", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_RIGHT": {"description": "The image that should be used for the right navigation arrow.", "default": "null", "deprecated": "You can customize the image by overriding the default CSS class for the right arrow - \"calnavright\"", "guessedname": "value", "guessedtype": "property", "type": "String"}, "HIDE_BLANK_WEEKS": {"default": "false", "type": "Boolean", "description": "True if the Calendar should suppress weeks that are not a part of the current month. False by default.", "guessedname": "value", "guessedtype": "property"}, "mindate": {"default": "null", "type": "String", "description": "The minimum selectable date in the current Calendar (mm\/dd\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "START_WEEKDAY": {"default": "0", "type": "number", "description": "The weekday the week begins on. Default is 0 (Sunday).", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_FOOTER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row footers. False by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_YEAR_POSITION": {"default": "3", "type": "Number", "description": "The position of the year in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_LONG": {"default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]", "type": "String[]", "description": "The long weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MDY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "pagedate": {"default": "today's date", "type": "String", "description": "The month\/year representing the current visible Calendar date (mm\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "MY_LABEL_MONTH_SUFFIX": {"default": "\" \"", "type": "String", "description": "The suffix used after the month when rendering the Calendar header", "guessedname": "value", "guessedtype": "property"}, "MD_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_LEFT": {"description": "The image that should be used for the left navigation arrow.", "default": "null", "deprecated": "You can customize the image by overriding the default CSS class for the left arrow - \"calnavleft\"", "guessedname": "value", "guessedtype": "property", "type": "String"}, "MY_LABEL_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in the month year label string used as the Calendar header", "guessedname": "value", "guessedtype": "property"}, "MD_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/day date string", "guessedname": "value", "guessedtype": "property"}, "DATE_DELIMITER": {"default": "\",\"", "type": "String", "description": "The value used to delimit individual dates in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "LOCALE_MONTHS": {"default": "\"long\"", "type": "String", "description": "The setting that determines which length of month labels should be used. Possible values are \"short\" and \"long\".", "guessedname": "value", "guessedtype": "property"}, "iframe": {"default": "true for IE6 and below, false for all other browsers", "type": "Boolean", "description": "Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.\nThis property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be \nenabled if required.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_1CHAR": {"default": "[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]", "type": "String[]", "description": "The 1-character weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_SHORT": {"default": "[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]", "type": "String[]", "description": "The short weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "NAV": {"default": "null", "type": "Object", "description": "Configuration for the Month Year Navigation UI. By default it is disabled", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "id", "description": " optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional."}, {"type": "String | HTMLElement", "name": "container", "description": " The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document."}, {"type": "Object", "name": "config", "description": " optional The configuration object containing the initial configuration values for the CalendarGroup."}], "description": "YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates\nthe ability to have multi-page calendar views that share a single dataset and are\ndependent on each other.\nThe calendar group instance will refer to each of its elements using a 0-based index.\nFor example, to construct the placeholder for a calendar group widget with id \"cal1\" and\ncontainerId of \"cal1Container\", the markup would be as follows:\n<xmp>\n<div id=\"cal1Container_0\"><\/div>\n<div id=\"cal1Container_1\"><\/div>\n<\/xmp>\nThe tables for the calendars (\"cal1_0\" and \"cal1_1\") will be inserted into those containers.\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.<\/strong>\nThe CalendarGroup can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.CalendarGroup(\"calContainer\", configOptions);\n<\/xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);\n<\/xmp>\n<\/p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the CalendarGroup's ID will be set to \"calContainer_t\".\n<\/p>"}], "namespace": "YAHOO.widget", "module": "calendar", "events": {"showNavEvent": {"description": "Fired after the CalendarNavigator is shown", "guessedname": "showNavEvent", "guessedtype": "property"}, "beforeDeselectEvent": {"description": "Fired before a selection is made", "guessedname": "beforeDeselectEvent", "guessedtype": "property"}, "beforeRenderNavEvent": {"description": "Fired just before the CalendarNavigator is to be rendered", "guessedname": "beforeRenderNavEvent", "guessedtype": "property"}, "beforeHideNavEvent": {"description": "Fired just before the CalendarNavigator is to be hidden", "guessedname": "beforeHideNavEvent", "guessedtype": "property"}, "hideEvent": {"description": "Fired after the CalendarGroup is hidden", "guessedname": "hideEvent", "guessedtype": "property"}, "hideNavEvent": {"description": "Fired after the CalendarNavigator is hidden", "guessedname": "hideNavEvent", "guessedtype": "property"}, "renderNavEvent": {"description": "Fired after the CalendarNavigator is rendered", "guessedname": "renderNavEvent", "guessedtype": "property"}, "beforeRenderEvent": {"description": "Fired before the Calendar is rendered", "guessedname": "beforeRenderEvent", "guessedtype": "property"}, "beforeShowEvent": {"description": "Fired just before the CalendarGroup is to be shown", "guessedname": "beforeShowEvent", "guessedtype": "property"}, "beforeSelectEvent": {"description": "Fired before a selection is made", "guessedname": "beforeSelectEvent", "guessedtype": "property"}, "renderEvent": {"description": "Fired when the Calendar is rendered", "guessedname": "renderEvent", "guessedtype": "property"}, "changePageEvent": {"description": "Fired when the Calendar page is changed", "guessedname": "changePageEvent", "guessedtype": "property"}, "resetEvent": {"description": "Fired when the Calendar is reset", "guessedname": "resetEvent", "guessedtype": "property"}, "clearEvent": {"description": "Fired when the Calendar is cleared", "guessedname": "clearEvent", "guessedtype": "property"}, "showEvent": {"description": "Fired after the CalendarGroup is shown", "guessedname": "showEvent", "guessedtype": "property"}, "selectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a selection is made", "guessedname": "selectEvent", "guessedtype": "property"}, "beforeHideEvent": {"description": "Fired just before the CalendarGroup is to be hidden", "guessedname": "beforeHideEvent", "guessedtype": "property"}, "beforeShowNavEvent": {"description": "Fired just before the CalendarNavigator is to be shown", "guessedname": "beforeShowNavEvent", "guessedtype": "property"}, "deselectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a selection is made", "guessedname": "deselectEvent", "guessedtype": "property"}}, "guessedname": "CalendarGroup", "methods": {"deselectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": "\tThe index of the cell to deselect."}], "description": "Deselects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.\ndeselectCell will deselect the cell at the specified index on each displayed Calendar page.", "guessedname": "deselectCell", "guessedtype": "function"}, "addWeekdayRenderer": {"params": [{"type": "Number", "name": "weekday", "description": "\t\tThe weekday (1-7) to associate with this renderer. 1=Sunday, 2=Monday etc."}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a weekday to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the weekday passed to this method.", "guessedname": "addWeekdayRenderer", "guessedtype": "function"}, "render": {"description": "Calls the render function of all child calendars within the group.", "guessedname": "render", "guessedtype": "function"}, "nextYear": {"description": "Navigates to the next year in the currently selected month in the calendar widget.", "guessedname": "nextYear", "guessedtype": "function"}, "delegateConfig": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "Delegates a configuration property to the CustomEvents associated with the CalendarGroup's children", "guessedname": "delegateConfig", "guessedtype": "function"}, "configPages": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default Config handler for the \"pages\" property", "guessedname": "configPages", "guessedtype": "function"}, "subtractYears": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of years to subtract from the current calendar"}], "description": "Subtcats the designated number of years from the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractYears", "guessedtype": "function"}, "previousMonth": {"description": "Navigates to the previous month page in the calendar widget.", "guessedname": "previousMonth", "guessedtype": "function"}, "select": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String\/Date\/Date[]", "name": "date", "description": "\tThe date string of dates to select in the current calendar. Valid formats are\nindividual date(s) (12\/24\/2005,12\/26\/2005) or date range(s) (12\/24\/2005-1\/1\/2006).\nMultiple comma-delimited dates can also be passed to this method (12\/24\/2005,12\/11\/2005-12\/13\/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Selects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once selection has completed, render must be \ncalled for the changes to be reflected visually.", "guessedname": "select", "guessedtype": "function"}, "callChildFunction": {"params": [{"type": "String", "name": "fnName", "description": "\t\tThe name of the function"}, {"type": "Array", "name": "args", "description": "\t\tThe arguments to pass to the function"}], "description": "Calls a function within all child Calendars within this CalendarGroup.", "guessedname": "callChildFunction", "guessedtype": "function"}, "deselect": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String\/Date\/Date[]", "name": "date", "description": "\tThe date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12\/24\/2005,12\/26\/2005) or date range(s) (12\/24\/2005-1\/1\/2006).\nMultiple comma-delimited dates can also be passed to this method (12\/24\/2005,12\/11\/2005-12\/13\/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Deselects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once deselection has completed, render must be \ncalled for the changes to be reflected visually.", "guessedname": "deselect", "guessedtype": "function"}, "sub": {"guessedname": "sub", "params": [{"type": "Function", "name": "fn", "description": "\tThe function to subscribe to this CustomEvent"}, {"type": "Object", "name": "obj", "description": "\tThe CustomEvent's scope object"}, {"type": "Boolean", "name": "bOverride", "description": "\tWhether or not to apply scope correction"}], "description": "Proxy subscriber to subscribe to the CalendarGroup's child Calendars' CustomEvents", "private": "", "guessedtype": "function"}, "initEvents": {"description": "Initializes CalendarGroup's built-in CustomEvents", "guessedname": "initEvents", "guessedtype": "function"}, "previousYear": {"description": "Navigates to the previous year in the currently selected month in the calendar widget.", "guessedname": "previousYear", "guessedtype": "function"}, "nextMonth": {"description": "Navigates to the next month page in the calendar widget.", "guessedname": "nextMonth", "guessedtype": "function"}, "configPageDate": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default Config handler for the \"pagedate\" property", "guessedname": "configPageDate", "guessedtype": "function"}, "setChildFunction": {"params": [{"type": "String", "name": "fnName", "description": "\t\tThe name of the function"}, {"type": "Function", "name": "fn", "description": "\t\t\tThe function to apply to each Calendar page object"}], "description": "Adds a function to all child Calendars within this CalendarGroup.", "guessedname": "setChildFunction", "guessedtype": "function"}, "addMonthRenderer": {"params": [{"type": "Number", "name": "month", "description": "\t\tThe month (1-12) to associate with this renderer"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a month to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the month passed to this method.", "guessedname": "addMonthRenderer", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "id", "description": " optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional."}, {"type": "String | HTMLElement", "name": "container", "description": " The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document."}, {"type": "Object", "name": "config", "description": " optional The configuration object containing the initial configuration values for the CalendarGroup."}], "description": "Initializes the calendar group. All subclasses must call this method in order for the\ngroup to be initialized properly.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the CalendarGroup object."}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "_setMonthOnDate": {"guessedname": "_setMonthOnDate", "params": [{"type": "Date", "name": "date", "description": "\tThe Date object on which to set the month index"}, {"type": "Number", "name": "iMonth", "description": "\tThe month index to set"}], "description": "Sets the month on a Date object, taking into account year rollover if the month is less than 0 or greater than 11.\nThe Date object passed in is modified. It should be cloned before passing it into this method if the original value needs to be maintained", "private": "", "guessedtype": "function"}, "removeRenderers": {"description": "Removes all custom renderers added to the CalendarGroup through the addRenderer, addMonthRenderer and \naddWeekRenderer methods. CalendarGroup's render method needs to be called to after removing renderers \nto see the changes applied.", "guessedname": "removeRenderers", "guessedtype": "function"}, "selectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": "\tThe index of the cell to be selected."}], "description": "Selects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.\nThe value of the MULTI_SELECT Configuration attribute will determine the set of dates which get selected. \n<ul>\n<li>If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed Calendar page.<\/li>\n<li>If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed Calendar page.<\/li>\n<\/ul>", "guessedname": "selectCell", "guessedtype": "function"}, "renderFooter": {"description": "Renders a footer for the 2-up calendar container. By default, this method is\nunimplemented.", "guessedname": "renderFooter", "guessedtype": "function"}, "configSelected": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default Config handler for the CalendarGroup \"selected\" property", "guessedname": "configSelected", "guessedtype": "function"}, "_fixWidth": {"private": "", "description": "Fixes the width of the CalendarGroup container element, to account for miswrapped floats", "guessedname": "_fixWidth", "guessedtype": "function"}, "unsub": {"guessedname": "unsub", "params": [{"type": "Function", "name": "fn", "description": "\tThe function to subscribe to this CustomEvent"}, {"type": "Object", "name": "obj", "description": "\tThe CustomEvent's scope object"}], "description": "Proxy unsubscriber to unsubscribe from the CalendarGroup's child Calendars' CustomEvents", "private": "", "guessedtype": "function"}, "getSelectedDates": {"type": "Date[]", "return": {"type": "", "description": "An array of currently selected JavaScript Date objects."}, "description": "Gets the list of currently selected dates from the calendar.", "guessedname": "getSelectedDates", "guessedtype": "function"}, "addRenderer": {"params": [{"type": "String", "name": "sDates", "description": "\t\tA date string to associate with the specified renderer. Valid formats\ninclude date (12\/24\/2005), month\/day (12\/24), and range (12\/1\/2004-1\/1\/2005)"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a renderer to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the conditions specified in the date string for this renderer.", "guessedname": "addRenderer", "guessedtype": "function"}, "reset": {"description": "Resets the calendar widget to the originally selected month and year, and \nsets the calendar to the initial selection(s).", "guessedname": "reset", "guessedtype": "function"}, "deselectAll": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected.\nAssuming that this function executes properly, the return value should be an empty array.\nHowever, the empty array is returned for the sake of being able to check the selection status\nof the calendar."}, "description": "Deselects all dates on the current calendar.", "guessedname": "deselectAll", "guessedtype": "function"}, "setMonth": {"params": [{"type": "Number", "name": "month", "description": "\t\tThe numeric month, from 0 (January) to 11 (December)"}], "description": "Sets the calendar group's month explicitly. This month will be set into the first\npage of the multi-page calendar, and all other months will be iterated appropriately.", "guessedname": "setMonth", "guessedtype": "function"}, "clear": {"description": "Clears the selected dates in the current calendar widget and sets the calendar\nto the current month and year.", "guessedname": "clear", "guessedtype": "function"}, "getCalendarPage": {"return": {"type": "Calendar", "description": "The Calendar page instance representing the month to which the date \nbelongs."}, "params": [{"type": "Date", "name": "date", "description": " The JavaScript Date object for which a Calendar page is to be found."}], "description": "Returns the Calendar page instance which has a pagedate (month\/year) matching the given date. \nReturns null if no match is found.", "guessedname": "getCalendarPage", "guessedtype": "function"}, "addMonths": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of months to add to the current calendar"}], "description": "Adds the designated number of months to the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "addMonths", "guessedtype": "function"}, "subtractMonths": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of months to subtract from the current calendar"}], "description": "Subtracts the designated number of months from the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractMonths", "guessedtype": "function"}, "constructChild": {"return": {"type": "YAHOO.widget.Calendar", "description": "The YAHOO.widget.Calendar instance that is constructed"}, "params": [{"type": "String", "name": "id", "description": "\t\t\tThe id of the table element that will represent the calendar widget"}, {"type": "String", "name": "containerId", "description": "\tThe id of the container div element that will wrap the calendar table"}, {"type": "Object", "name": "config", "description": "\t\tThe configuration object containing the Calendar's arguments"}], "description": "Constructs a child calendar. This method can be overridden if a subclassed version of the default\ncalendar is to be used.", "guessedname": "constructChild", "guessedtype": "function"}, "setYear": {"params": [{"type": "Number", "name": "year", "description": "\t\tThe numeric 4-digit year"}], "description": "Sets the calendar group's year explicitly. This year will be set into the first\npage of the multi-page calendar, and all other months will be iterated appropriately.", "guessedname": "setYear", "guessedtype": "function"}, "renderHeader": {"description": "Renders the header for the CalendarGroup.", "guessedname": "renderHeader", "guessedtype": "function"}, "addYears": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of years to add to the current calendar"}], "description": "Adds the designated number of years to the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "addYears", "guessedtype": "function"}}, "file": "CalendarGroup.js", "guessedtype": "function", "shortname": "CalendarGroup", "properties": {"YAHOO.widget.CalendarGroup.CSS_2UPCLOSE": {"description": "CSS class representing the close icon for the 2-up calendar", "deprecated": "Along with Calendar.IMG_ROOT and NAV_ARROW_LEFT, NAV_ARROW_RIGHT configuration properties.\nCalendar's <a href=\"YAHOO.widget.Calendar.html#Style.CSS_CLOSE\">Style.CSS_CLOSE<\/a> property now represents the CSS class used to render the close icon", "static": "", "guessedname": "CSS_2UPCLOSE", "guessedtype": "property", "type": "String", "final": ""}, "containerId": {"type": "String", "description": "The unique id associated with the CalendarGroup container", "guessedname": "containerId", "guessedtype": "property"}, "Locale": {"type": "Object", "description": "The local object which contains the CalendarGroup's locale settings", "guessedname": "Locale", "guessedtype": "property"}, "cfg": {"type": "YAHOO.util.Config", "description": "The Config object used to hold the configuration variables for the CalendarGroup", "guessedname": "cfg", "guessedtype": "property"}, "YAHOO.widget.CalendarGroup.CSS_2UPTITLE": {"description": "CSS class representing the title for the 2-up calendar", "static": "", "guessedname": "CSS_2UPTITLE", "guessedtype": "property", "type": "String", "final": ""}, "Options": {"type": "Object", "description": "The local object which contains the CalendarGroup's options", "guessedname": "Options", "guessedtype": "property"}, "YAHOO.widget.CalendarGroup.CSS_CONTAINER": {"description": "CSS class representing the container for the calendar", "static": "", "guessedname": "CSS_CONTAINER", "guessedtype": "property", "type": "String", "final": ""}, "id": {"type": "String", "description": "The unique id associated with the CalendarGroup", "guessedname": "id", "guessedtype": "property"}, "YAHOO.widget.CalendarGroup.CSS_MULTI_UP": {"description": "CSS class representing the container for the calendar", "static": "", "guessedname": "CSS_MULTI_UP", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.CalendarGroup._DEFAULT_CONFIG": {"description": "The set of default Config property keys and values for the CalendarGroup", "private": "", "static": "", "guessedname": "_DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "pages": {"type": "YAHOO.widget.Calendar[]", "description": "The collection of Calendar pages contained within the CalendarGroup", "guessedname": "pages", "guessedtype": "property"}}, "description": "YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates\nthe ability to have multi-page calendar views that share a single dataset and are\ndependent on each other.\nThe calendar group instance will refer to each of its elements using a 0-based index.\nFor example, to construct the placeholder for a calendar group widget with id \"cal1\" and\ncontainerId of \"cal1Container\", the markup would be as follows:\n<xmp>\n<div id=\"cal1Container_0\"><\/div>\n<div id=\"cal1Container_1\"><\/div>\n<\/xmp>\nThe tables for the calendars (\"cal1_0\" and \"cal1_1\") will be inserted into those containers.\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.<\/strong>\nThe CalendarGroup can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.CalendarGroup(\"calContainer\", configOptions);\n<\/xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);\n<\/xmp>\n<\/p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the CalendarGroup's ID will be set to \"calContainer_t\".\n<\/p>"}, "YAHOO.widget.CategoryAxis": {"name": "YAHOO.widget.CategoryAxis", "constructors": [{"description": "A type of axis that displays items in categories."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "CategoryAxis", "file": "CategoryAxis.js", "guessedtype": "function", "shortname": "CategoryAxis", "properties": {"categoryNames": {"type": "Array", "description": "A list of category names to display along this axis.", "guessedname": "categoryNames", "guessedtype": "property"}}, "description": "A type of axis that displays items in categories."}, "YAHOO.util.Assert": {"name": "YAHOO.util.Assert", "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "Assert", "methods": {"isArray": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an array.", "guessedname": "isArray", "guessedtype": "function"}, "isNaN": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not a number.", "guessedname": "isNaN", "guessedtype": "function"}, "isString": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a string.", "guessedname": "isString", "guessedtype": "function"}, "isBoolean": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a Boolean.", "guessedname": "isBoolean", "guessedtype": "function"}, "isTrue": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is true. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isTrue", "guessedtype": "function"}, "isNull": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is null. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNull", "guessedtype": "function"}, "areNotSame": {"static": "", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "areNotSame", "guessedtype": "function"}, "isNotNaN": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not the special NaN value.", "guessedname": "isNotNaN", "guessedtype": "function"}, "isNotUndefined": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not undefined. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNotUndefined", "guessedtype": "function"}, "areNotEqual": {"static": "", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not equal to another. This uses the double equals sign\nso type cohersion may occur.", "guessedname": "areNotEqual", "guessedtype": "function"}, "isFalse": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is false. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isFalse", "guessedtype": "function"}, "isObject": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an object.", "guessedname": "isObject", "guessedtype": "function"}, "isTypeOf": {"static": "", "params": [{"type": "String", "name": "expectedType", "description": " The expected type of the variable."}, {"type": "Object", "name": "actualValue", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is of a particular type.", "guessedname": "isTypeOf", "guessedtype": "function"}, "isNotNull": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not null. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNotNull", "guessedtype": "function"}, "areSame": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "areSame", "guessedtype": "function"}, "fail": {"static": "", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}], "description": "Forces an assertion error to occur.", "guessedname": "fail", "guessedtype": "function"}, "areEqual": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is equal to another. This uses the double equals sign\nso type cohersion may occur.", "guessedname": "areEqual", "guessedtype": "function"}, "isNumber": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a number.", "guessedname": "isNumber", "guessedtype": "function"}, "isFunction": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a function.", "guessedname": "isFunction", "guessedtype": "function"}, "isInstanceOf": {"static": "", "params": [{"type": "Function", "name": "expected", "description": " The function that the object should be an instance of."}, {"type": "Object", "name": "actual", "description": " The object to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an instance of a particular object. This may return\nincorrect results when comparing objects from one frame to constructors in\nanother frame. For best results, don't use in a cross-frame manner.", "guessedname": "isInstanceOf", "guessedtype": "function"}, "isUndefined": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is undefined. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isUndefined", "guessedtype": "function"}}, "static": "", "file": "Assert.js", "guessedtype": "property", "shortname": "Assert", "description": "The Assert object provides functions to test JavaScript values against\nknown and expected results. Whenever a comparison (assertion) fails,\nan error is thrown."}, "YAHOO.widget.LogMsg": {"name": "YAHOO.widget.LogMsg", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  Object literal of configuration params."}], "description": "The LogMsg class defines a single log message."}], "namespace": "YAHOO.widget", "module": "logger", "guessedname": "LogMsg", "file": "LogMsg.js", "guessedtype": "function", "shortname": "LogMsg", "properties": {"msg": {"type": "String", "description": "Log message.", "guessedname": "msg", "guessedtype": "property"}, "category": {"type": "String", "description": "Log category.", "guessedname": "category", "guessedtype": "property"}, "sourceDetail": {"type": "String", "description": "Log source detail. The remainder of the string passed in as the source argument, not\r\nincluding the first word (if any).", "guessedname": "sourceDetail", "guessedtype": "property"}, "source": {"type": "String", "description": "Log source. The first word passed in as the source argument.", "guessedname": "source", "guessedtype": "property"}, "time": {"type": "Date", "description": "Log timestamp.", "guessedname": "time", "guessedtype": "property"}}, "description": "The LogMsg class defines a single log message."}, "YAHOO.util.DragDropMgr.ElementWrapper": {"name": "YAHOO.util.DragDropMgr.ElementWrapper", "for": "DragDropMgr", "innerClasses": ["DragDropMgr"], "deprecated": "", "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "ElementWrapper", "private": "", "file": "DragDropMgr.js", "guessedtype": "function", "shortname": "DragDropMgr.ElementWrapper", "properties": {"el": {"description": "The element", "guessedname": "el", "guessedtype": "property"}, "id": {"description": "The element id", "guessedname": "id", "guessedtype": "property"}, "css": {"description": "A reference to the style property", "guessedname": "css", "guessedtype": "property"}}, "description": "Inner class for cached elements"}, "YAHOO.util.Bezier": {"name": "YAHOO.util.Bezier", "namespace": "YAHOO.util", "module": "animation", "guessedname": "Bezier", "methods": {"getPosition": {"return": {"type": "Array", "description": "An array containing int x and y member data"}, "params": [{"type": "Array", "name": "points", "description": " An array containing Bezier points"}, {"type": "Number", "name": "t", "description": " A number between 0 and 1 which is the basis for determining current position"}], "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.", "guessedname": "getPosition", "guessedtype": "function"}}, "file": "Bezier.js", "guessedtype": "function", "shortname": "Bezier", "description": "Used to calculate Bezier splines for any number of control points."}, "YAHOO.util.Subscriber": {"name": "YAHOO.util.Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The function to execute"}, {"type": "Object", "name": "obj", "description": "      An object to be passed along when the event fires"}, {"type": "boolean", "name": "override", "description": " If true, the obj passed in becomes the execution\nscope of the listener"}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "YAHOO.util", "module": "event", "guessedname": "Subscriber", "methods": {"getScope": {"params": [{"type": "Object", "name": "defaultScope", "description": " the scope to use if this listener does not\noverride it."}], "description": "Returns the execution scope for this listener.  If override was set to true\nthe custom obj will be the scope.  If override is an object, that is the\nscope, otherwise the default scope will be used.", "guessedname": "getScope", "guessedtype": "function"}, "contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this \nsubscriber's signature."}, "params": [{"type": "Function", "name": "fn", "description": " the function to execute"}, {"type": "Object", "name": "obj", "description": " an object to be passed along when the event fires"}], "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "guessedname": "contains", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}}, "file": "CustomEvent.js", "guessedtype": "function", "shortname": "Subscriber", "properties": {"override": {"type": "boolean|object", "description": "The default execution scope for the event listener is defined when the\nevent is created (usually the object which contains the event).\nBy setting override to true, the execution scope becomes the custom\nobject passed in by the subscriber.  If override is an object, that \nobject becomes the scope.", "guessedname": "override", "guessedtype": "property"}, "obj": {"type": "object", "description": "An optional custom object that will passed to the callback when\nthe event fires", "guessedname": "obj", "guessedtype": "property"}, "fn": {"type": "function", "description": "The callback that will be execute when the event fires", "guessedname": "fn", "guessedtype": "property"}}, "description": "Stores the subscriber information to be used when the event fires."}, "YAHOO.widget.MenuBar": {"name": "YAHOO.widget.MenuBar", "configs": {"position": {"default": "static", "type": "String", "description": "String indicating how a menu bar should be positioned on the \nscreen.  Possible values are \"static\" and \"dynamic.\"  Static menu bars \nare visible by default and reside in the normal flow of the document \n(CSS position: static).  Dynamic menu bars are hidden by default, reside\nout of the normal flow of the document (CSS position: absolute), and can \noverlay other elements on the screen."}, "submenualignment": {"default": "[\"tl\",\"bl\"]", "type": "Array", "description": "Array defining how submenus should be aligned to their \nparent menu bar item. The format is: [itemCorner, submenuCorner]."}, "autosubmenudisplay": {"default": "false", "type": "Boolean", "description": "Boolean indicating if submenus are automatically made \nvisible when the user mouses over the menu bar's items."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the menu bar."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source for the \nmenu bar."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;div&#62;<\/code> element of the menu bar."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;select&#62;<\/code> element to be used as the data \nsource for the menu bar."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar. See configuration class documentation for\nmore details."}], "description": "Horizontal collection of items, each of which can contain a submenu."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuBar", "methods": {"init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the menu bar."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source for the \nmenu bar."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;div&#62;<\/code> element of the menu bar."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;select&#62;<\/code> element to be used as the data \nsource for the menu bar."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar. See configuration class documentation for\nmore details."}], "description": "The MenuBar class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu bar.", "guessedname": "toString", "guessedtype": "function"}, "_onClick": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuBar", "name": "p_oMenuBar", "description": " Object representing the menu bar \nthat fired the event."}], "description": "\"click\" event handler for the menu bar.", "guessedname": "_onClick", "guessedtype": "function"}, "checkPosition": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "p_sPosition", "description": " String specifying the position of the menu."}], "description": "Checks to make sure that the value of the \"position\" property \nis one of the supported strings. Returns true if the position is supported.", "private": ""}, "_onKeyDown": {"guessedname": "_onKeyDown", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuBar", "name": "p_oMenuBar", "description": " Object representing the menu bar \nthat fired the event."}], "description": "\"keydown\" Custom Event handler for the menu bar.", "private": "", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be\nchanged using the menu bar's Config object (\"cfg\").", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Menu", "superclass": "YAHOO.widget.Menu", "file": "menubar.js", "guessedtype": "function", "shortname": "MenuBar", "properties": {"CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the menu \nbar's <code>&#60;div&#62;<\/code> element.", "default": "\"yuimenubar\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "DEFAULT_CONFIG": {"description": "Constant representing the MenuBar's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}}, "description": "Horizontal collection of items, each of which can contain a submenu."}, "YAHOO.env": {"name": "YAHOO.env", "namespace": "", "module": "yahoo", "guessedname": "env", "methods": {"getVersion": {"return": {"type": "Object", "description": "The version info"}, "description": "Returns the version data for the specified module:\n<dl>\n<dt>name:<\/dt>      <dd>The name of the module<\/dd>\n<dt>version:<\/dt>   <dd>The version in use<\/dd>\n<dt>build:<\/dt>     <dd>The build number in use<\/dd>\n<dt>versions:<\/dt>  <dd>All versions that were registered<\/dd>\n<dt>builds:<\/dt>    <dd>All builds that were registered.<\/dd>\n<dt>mainClass:<\/dt> <dd>An object that was was stamped with the\ncurrent version and build. If \nmainClass.VERSION != version or mainClass.BUILD != build,\nmultiple versions of pieces of the library have been\nloaded, potentially causing issues.<\/dd>\n<\/dl>", "static": "", "guessedname": "getVersion", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " the name of the module (event, slider, etc)"}]}}, "static": "", "file": "Env.js", "guessedtype": "property", "shortname": "YAHOO.env", "properties": {"listeners": {"type": "Function[]", "description": "List of functions that should be executed every time a YUI module\nreports itself.", "guessedname": "listeners", "guessedtype": "property"}, "modules": {"type": "Object[]", "description": "Keeps the version info for all YUI modules that have reported themselves", "guessedname": "modules", "guessedtype": "property"}}, "description": "YAHOO.env is used to keep track of what is known about the YUI library and\nthe browsing environment"}, "YAHOO.util.ShouldFail": {"name": "YAHOO.util.ShouldFail", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldFail is subclass of AssertionError that is thrown whenever\na test was expected to fail but did not."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "ShouldFail", "extends": "YAHOO.util.AssertionError", "superclass": "YAHOO.util.AssertionError", "file": "Assert.js", "guessedtype": "function", "shortname": "ShouldFail", "properties": {"name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "ShouldFail is subclass of AssertionError that is thrown whenever\na test was expected to fail but did not."}, "YAHOO.widget.SliderThumb": {"name": "YAHOO.widget.SliderThumb", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the slider html element"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop items"}, {"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}], "description": "A drag and drop implementation to be used as the thumb of a slider."}], "namespace": "YAHOO.widget", "module": "slider", "guessedname": "SliderThumb", "methods": {"onChange": {"private": "", "description": "The onchange event for the handle\/thumb is delegated to the YAHOO.widget.Slider\ninstance it belongs to.", "guessedname": "onChange", "guessedtype": "function"}, "getValue": {"return": {"type": "int", "description": "the number of pixels (positive or negative) the\nslider has moved from the start position."}, "description": "Gets the current offset from the element's start position in\npixels.", "guessedname": "getValue", "guessedtype": "function"}, "getOffsetFromParent": {"type": "[int, int]", "params": [{"type": "[int, int]", "name": "parentPos", "description": " Optionally accepts the position of the parent"}], "description": "Returns the difference between the location of the thumb and its parent.", "guessedname": "getOffsetFromParent0", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the instance"}, "description": "Thumb toString", "guessedname": "toString", "guessedtype": "function"}, "getYValue": {"return": {"type": "int", "description": "the number of pixels (positive or negative) the\nslider has moved vertically from the start position."}, "description": "Gets the current Y offset from the element's start position in\npixels.", "guessedname": "getYValue", "guessedtype": "function"}, "initSlider": {"params": [{"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " the width of the tick interval."}], "description": "Set up the slider, must be called in the constructor of all subclasses", "guessedname": "initSlider", "guessedtype": "function"}, "getXValue": {"return": {"type": "int", "description": "the number of pixels (positive or negative) the\nslider has moved horizontally from the start position."}, "description": "Gets the current X offset from the element's start position in\npixels.", "guessedname": "getXValue", "guessedtype": "function"}, "clearTicks": {"description": "Clear's the slider's ticks", "guessedname": "clearTicks", "guessedtype": "function"}}, "extends": "YAHOO.util.DD", "superclass": "YAHOO.util.DD", "file": "SliderThumb.js", "guessedtype": "function", "shortname": "SliderThumb", "properties": {"isTarget": {"private": "", "description": "Overrides the isTarget property in YAHOO.util.DragDrop", "guessedname": "isTarget", "guessedtype": "property"}, "maintainOffset": {"guessedname": "maintainOffset", "type": "boolean", "description": "Informs the drag and drop util that the offsets should remain when\nresetting the constraints.  This preserves the slider value when\nthe constraints are reset", "private": "", "guessedtype": "property"}, "parentElId": {"type": "string", "description": "The id of the thumbs parent HTML element (the slider background \nelement).", "guessedname": "parentElId", "guessedtype": "property"}, "_isHoriz": {"guessedname": "_isHoriz", "type": "boolean", "description": "Flag used to figure out if this is a horizontal or vertical slider", "private": "", "guessedtype": "property"}, "tickSize": {"guessedname": "tickSize", "type": "int", "description": "The tick size for this slider", "private": "", "guessedtype": "property"}, "_prevVal": {"guessedname": "_prevVal", "type": "int", "description": "Cache the last value so we can check for change", "private": "", "guessedtype": "property"}, "startOffset": {"type": "[int, int]", "description": "The (X and Y) difference between the thumb location and its parent \n(the slider background) when the control is instantiated.", "guessedname": "startOffset", "guessedtype": "property"}, "_graduated": {"guessedname": "_graduated", "type": "boolean", "description": "The slider is _graduated if there is a tick interval defined", "private": "", "guessedtype": "property"}, "scroll": {"private": "", "description": "Turns off the autoscroll feature in drag and drop", "guessedname": "scroll", "guessedtype": "property"}}, "description": "A drag and drop implementation to be used as the thumb of a slider."}, "YAHOO.util.AttributeProvider": {"name": "YAHOO.util.AttributeProvider", "namespace": "YAHOO.util", "module": "element", "guessedname": "AttributeProvider", "methods": {"set": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "params": [{"type": "String", "name": "key", "description": " The name of the attribute"}, {"type": "Any", "name": "value", "description": " The value to apply to the attribute"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets the value of a config.", "guessedname": "set", "guessedtype": "function"}, "fireBeforeChangeEvent": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Obj", "name": "e", "description": " The event object to pass to handlers."}], "description": "Fires the attribute's beforeChange event.", "guessedname": "fireBeforeChangeEvent", "guessedtype": "function"}, "resetValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set"}, "params": [{"type": "String", "name": "key", "description": " The name of the attribute"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Resets the specified attribute's value to its initial value.", "guessedname": "resetValue", "guessedtype": "function"}, "get": {"params": [{"type": "String", "name": "key", "description": " The attribute whose value will be returned."}], "description": "Returns the current value of the attribute.", "guessedname": "get", "guessedtype": "function"}, "setAttributeConfig": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Object", "name": "map", "description": " A key-value map of attribute properties"}, {"type": "Boolean", "name": "init", "description": " Whether or not this should become the intial config."}], "description": "Sets or updates an Attribute instance's properties.", "guessedname": "setAttributeConfig", "guessedtype": "function"}, "resetAttributeConfig": {"guessedname": "resetAttributeConfig", "params": [{"type": "String", "name": "key", "description": " The attribute's name."}], "description": "Resets an attribute to its intial configuration.", "private": "", "guessedtype": "function"}, "register": {"deprecated": "Use setAttributeConfig", "params": [{"type": "String", "name": "key", "description": " The attribute's name"}, {"type": "Object", "name": "map", "description": " A key-value map containing the\nattribute's properties."}], "description": "Adds an Attribute to the AttributeProvider instance.", "guessedname": "register", "guessedtype": "function"}, "getAttributeConfig": {"return": {"type": "object", "description": "A key-value map containing all of the\nattribute's properties."}, "description": "Returns the attribute's properties.", "private": "", "params": [{"type": "String", "name": "key", "description": " The attribute's name"}], "guessedname": "getAttributeConfig", "guessedtype": "function"}, "refresh": {"params": [{"type": "String | Array", "name": "key", "description": " The attribute(s) to refresh"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets the attribute's value to its current value.", "guessedname": "refresh", "guessedtype": "function"}, "configureAttribute": {"deprecated": "Use setAttributeConfig", "params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Object", "name": "map", "description": " A key-value map of attribute properties"}, {"type": "Boolean", "name": "init", "description": " Whether or not this should become the intial config."}], "description": "Sets or updates an Attribute instance's properties.", "guessedname": "configureAttribute", "guessedtype": "function"}, "getAttributeKeys": {"return": {"type": "Array", "description": "An array of attribute names."}, "description": "Returns an array of attribute names.", "guessedname": "getAttributeKeys", "guessedtype": "function"}, "fireChangeEvent": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Obj", "name": "e", "description": " The event object to pass to the handlers."}], "description": "Fires the attribute's change event.", "guessedname": "fireChangeEvent", "guessedtype": "function"}, "setAttributes": {"params": [{"type": "Object", "name": "map", "description": "  A key-value map of attributes"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets multiple attribute values.", "guessedname": "setAttributes", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "AttributeProvider.js", "guessedtype": "function", "shortname": "AttributeProvider", "properties": {"_configs": {"description": "A key-value map of Attribute configurations", "private": "", "protected": "", "guessedname": "_configs", "guessedtype": "property", "type": "{Object}"}}, "description": "Provides and manages YAHOO.util.Attribute instances"}, "YAHOO.widget.Column": {"name": "YAHOO.widget.Column", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  Object literal of configuration values."}], "description": "The Column class defines and manages attributes of DataTable Columns"}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "Column", "methods": {"getParent": {"return": {"type": "YAHOO.widget.Column", "description": "Column's parent instance."}, "description": "Public accessor returns Column's parent instance if any, or null otherwise.", "guessedname": "getParent", "guessedtype": "function"}, "getColspan": {"return": {"type": "Number", "description": "Column's COLSPAN value."}, "description": "Public accessor returns Column's calculated COLSPAN value.", "guessedname": "getColspan", "guessedtype": "function"}, "getId": {"return": {"type": "String", "description": "Unique ID string."}, "description": "Returns unique ID string.", "guessedname": "getId", "guessedtype": "function"}, "getKey": {"return": {"type": "String", "description": "Column key."}, "description": "Returns unique Column key.", "guessedname": "getKey", "guessedtype": "function"}, "getKeyIndex": {"return": {"type": "Number", "description": "Position index, or null."}, "description": "Public accessor returns Column's current position index within its ColumnSet's keys array, if applicable.", "guessedname": "getKeyIndex", "guessedtype": "function"}, "getRowspan": {"return": {"type": "Number", "description": "Column's ROWSPAN value."}, "description": "Public accessor returns Column's calculated ROWSPAN value.", "guessedname": "getRowspan", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Column's unique name."}, "description": "Public accessor to the unique name of the Column instance.", "guessedname": "toString", "guessedtype": "function"}}, "file": "ColumnSet.js", "guessedtype": "function", "shortname": "Column", "properties": {"sortOptions.sortFunction": {"default": "null", "type": "Function", "description": "Custom sort handler.", "guessedname": "sortOptions", "guessedtype": "property"}, "editorOptions": {"type": "Object", "description": "Defines editor options for Column in an object literal of param:value pairs.", "guessedname": "editorOptions", "guessedtype": "property"}, "_minWidth": {"guessedname": "_minWidth", "type": "Number", "description": "Minimum width the Column can support (in pixels). Value is populated only if table\r\nis fixedWidth, null otherwise.", "private": "", "guessedtype": "property"}, "resizeable": {"default": "false", "type": "Boolean", "description": "True if Column is resizeable, false otherwise.", "guessedname": "resizeable", "guessedtype": "property"}, "children": {"type": "Object[]", "description": "Array of object literals that define children (nested headers) of a Column.", "guessedname": "children", "guessedtype": "property"}, "width": {"type": "String", "description": "Column width.", "guessedname": "width", "guessedtype": "property"}, "label": {"type": "String", "description": "Text or HTML for display as Column's label in the TH element.", "guessedname": "label", "guessedtype": "property"}, "_parent": {"guessedname": "_parent", "type": "YAHOO.widget.Column", "description": "Column's parent Column instance, or null.", "private": "", "guessedtype": "property"}, "sortOptions.defaultOrder": {"default": "null", "type": "String", "description": "Default sort order for Column: \"asc\" or \"desc\"."}, "editor": {"type": "String || HTMLFunction", "description": "Defines an editor function, otherwise Column is not editable.", "guessedname": "editor", "guessedtype": "property"}, "formatter": {"type": "String || HTMLFunction", "description": "Defines a format function.", "guessedname": "formatter", "guessedtype": "property"}, "_rowspan": {"guessedname": "_rowspan", "type": "Number", "description": "Number of table rows the Column spans.", "private": "", "guessedtype": "property"}, "Column._nCount": {"description": "Internal class variable to index multiple Column instances.", "private": "", "static": "", "guessedname": "_nCount", "guessedtype": "property", "type": "Number"}, "_nKeyIndex": {"guessedname": "_nKeyIndex", "type": "Number", "description": "Reference to Column's current position index within its ColumnSet's keys array, if applicable.", "private": "", "guessedtype": "property"}, "abbr": {"type": "String", "description": "Column head cell ABBR for accessibility.", "guessedname": "abbr", "guessedtype": "property"}, "key": {"type": "String", "description": "Associated database field, or null.", "guessedname": "key", "guessedtype": "property"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Unique instance name.", "private": "", "guessedtype": "property"}, "sortable": {"default": "false", "type": "Boolean", "description": "True if Column is sortable, false otherwise.", "guessedname": "sortable", "guessedtype": "property"}, "_colspan": {"guessedname": "_colspan", "type": "Number", "description": "Number of table cells the Column spans.", "private": "", "guessedtype": "property"}, "_sId": {"guessedname": "_sId", "type": "String", "description": "Unique String identifier assigned at instantiation.", "private": "", "guessedtype": "property"}, "_width": {"guessedname": "_width", "type": "Number", "description": "Current offsetWidth of the Column (in pixels).", "private": "", "guessedtype": "property"}, "className": {"type": "String || String[]", "description": "Custom CSS class or array of classes to be applied to every cell in the Column.", "guessedname": "className", "guessedtype": "property"}}, "description": "The Column class defines and manages attributes of DataTable Columns"}, "YAHOO.env.ua": {"name": "YAHOO.env.ua", "namespace": "", "module": "yahoo", "guessedname": "ua", "static": "", "file": "Env.js", "guessedtype": "function", "shortname": "YAHOO.env.ua", "properties": {"opera": {"type": "float", "description": "Opera version number or 0.  Example: 9.2", "guessedname": "opera", "guessedtype": "property"}, "gecko": {"type": "float", "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko \nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8\nFirefox 3 alpha: 1.9a4   <-- Reports 1.9\n<\/pre>", "guessedname": "gecko", "guessedtype": "property"}, "ie": {"type": "float", "description": "Internet Explorer version number or 0.  Example: 6", "guessedname": "ie", "guessedtype": "property"}, "webkit": {"type": "float", "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers \nwill evaluate to 1, other browsers 0.  Example: 418.9.1\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the \nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Current Safari release\nWebkit 212 nightly:   522+    <-- Safari 3.0 (with native SVG) should\nbe higher than this\n<\/pre>\nhttp:\/\/developer.apple.com\/internet\/safari\/uamatrix.html", "guessedname": "webkit", "guessedtype": "property"}, "mobile": {"type": "string", "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone\/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini.", "guessedname": "mobile", "guessedtype": "property"}}, "description": "Do not fork for a browser if it can be avoided.  Use feature detection when\nyou can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version\nnumber for the browser engine, 0 otherwise.  This value may or may not map\nto the version number of the browser using the engine.  The value is \npresented as a float so that it can easily be used for boolean evaluation \nas well as for looking for a particular range of versions.  Because of this, \nsome of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 \nreports 1.8)."}, "YAHOO.widget.LogWriter": {"name": "YAHOO.widget.LogWriter", "constructors": [{"params": [{"type": "String", "name": "sSource", "description": "  Source of LogWriter instance."}], "description": "The LogWriter class provides a mechanism to log messages through\r\nYAHOO.widget.Logger from a named source."}], "namespace": "YAHOO.widget", "module": "logger", "guessedname": "LogWriter", "methods": {"getSource": {"return": {"type": "String", "description": "The LogWriter source."}, "description": "Public accessor to get the source name.", "guessedname": "getSource", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the LogWriter instance."}, "description": "Public accessor to the unique name of the LogWriter instance.", "guessedname": "toString", "guessedtype": "function"}, "log": {"params": [{"type": "String", "name": "sMsg", "description": "  The log message."}, {"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Logs a message attached to the source of the LogWriter.", "guessedname": "log", "guessedtype": "function"}, "setSource": {"params": [{"type": "String", "name": "sSource", "description": "  Source of LogWriter instance."}], "description": "Public accessor to set the source name.", "guessedname": "setSource", "guessedtype": "function"}}, "file": "LogWriter.js", "guessedtype": "function", "shortname": "LogWriter", "properties": {"_source": {"guessedname": "_source", "type": "String", "description": "Source of the LogWriter instance.", "private": "", "guessedtype": "property"}}, "description": "The LogWriter class provides a mechanism to log messages through\r\nYAHOO.widget.Logger from a named source."}, "YAHOO.widget.PieSeries": {"name": "YAHOO.widget.PieSeries", "constructors": [{"description": "PieSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "PieSeries", "file": "Series.js", "guessedtype": "function", "shortname": "PieSeries", "properties": {"deconcept": {"description": "SWFObject v1.5: Flash Player detection and embed - http:\/\/blog.deconcept.com\/swfobject\/\nSWFObject is (c) 2007 Geoff Stearns and is released under the MIT License:\nhttp:\/\/www.opensource.org\/licenses\/mit-license.php", "guessedname": "deconcept", "guessedtype": "property"}}, "description": "PieSeries class for the YUI Charts widget."}, "YAHOO_config": {"name": "YAHOO_config", "namespace": "", "module": "yahoo", "static": "", "file": "YAHOO.js", "shortname": "YAHOO_config", "properties": {"listener": {"default": "undefined", "type": "Function", "static": "", "description": "A reference to a function that will be executed every time a YAHOO module\nis loaded.  As parameter, this function will receive the version\ninformation for the module. See <a href=\"YAHOO.env.html#getVersion\">\nYAHOO.env.getVersion<\/a> for the description of the version data structure."}, "load": {"default": "undefined", "see": "yuiloader", "static": "", "description": "Instructs the yuiloader component to dynamically load yui components and\ntheir dependencies.  See the yuiloader documentation for more information\nabout dynamic loading"}, "locale": {"description": "Forces the use of the supplied locale where applicable in the library", "default": "undefined", "static": "", "guessedname": "YAHOO", "guessedtype": "property", "type": "string"}, "injecting": {"default": "undefined", "type": "boolean", "static": "", "description": "Set to true if the library will be dynamically loaded after window.onload.\nDefaults to false"}}, "description": "YAHOO_config is not included as part of the library.  Instead it is an \nobject that can be defined by the implementer immediately before \nincluding the YUI library.  The properties included in this object\nwill be used to configure global properties needed as soon as the \nlibrary begins to load."}, "YAHOO.widget.Dialog": {"name": "YAHOO.widget.Dialog", "configs": {"buttons": {"default": "\"none\"", "type": "{Array|String}", "description": "Array of object literals, each containing a set of properties \ndefining a button to be appended into the Dialog's footer.\nEach button object in the buttons array can have three properties:\n<dt>text:<\/dt>\n<dd>The text that will display on the face of the button.  <em>\nPlease note:<\/em> As of version 2.3, the text can include \nHTML.<\/dd>\n<dt>handler:<\/dt>\n<dd>Can be either:\n<ol>\n<li>A reference to a function that should fire when the \nbutton is clicked.  (In this case scope of this function is \nalways its Dialog instance.)<\/li>\n<li>An object literal representing the code to be \nexecuted when the button is clicked.  Format:<br> <code> {<br>  \n<strong>fn:<\/strong> Function,   &#47;&#47; The handler to call \nwhen  the event fires.<br> <strong>obj:<\/strong> Object, \n&#47;&#47; An  object to pass back to the handler.<br> <strong>\nscope:<\/strong>  Object &#47;&#47; The object to use for the \nscope of the handler. <br> } <\/code> <br><em>Please note: this \nfunctionality was added in version 2.3.<\/em><\/li>\n<\/ol>\n<\/dd>\n<dt>isDefault:<\/dt>\n<dd>An optional boolean value that specifies that a button \nshould be highlighted and focused by default.<\/dd>"}, "postmethod": {"default": "async", "type": "String", "description": "The method to use for posting the Dialog's form. Possible values \nare \"async\", \"form\", and \"manual\"."}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the Dialog <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Dialog"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal containing \nthe configuration that should be set for this Dialog. See configuration \ndocumentation for more details."}], "description": "Dialog is an implementation of Panel that can be used to submit form \ndata. Built-in functionality for buttons with event handlers is included, \nand button sets can be build dynamically, or the preincluded ones for \nSubmit\/Cancel and OK\/Cancel can be utilized. Forms can be processed in 3\nways -- via an asynchronous Connection utility call, a simple form \nPOST or GET, or manually."}], "namespace": "YAHOO.widget", "module": "container", "events": {"beforeSubmitEvent": {"description": "CustomEvent fired prior to submission", "guessedname": "beforeSubmitEvent", "guessedtype": "property"}, "asyncSubmitEvent": {"description": "CustomEvent fired prior to asynchronous submission", "guessedname": "asyncSubmitEvent", "guessedtype": "property"}, "submitEvent": {"description": "CustomEvent fired after submission", "guessedname": "submitEvent", "guessedtype": "property"}, "manualSubmitEvent": {"description": "CustomEvent fired prior to manual submission", "guessedname": "manualSubmitEvent", "guessedtype": "property"}, "formSubmitEvent": {"description": "CustomEvent fired prior to form-based submission", "guessedname": "formSubmitEvent", "guessedtype": "property"}, "cancelEvent": {"description": "CustomEvent fired after cancel", "guessedname": "cancelEvent", "guessedtype": "property"}}, "guessedname": "Dialog", "methods": {"configButtons": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler for the \"buttons\" configuration property", "guessedname": "configButtons", "guessedtype": "function"}, "getButtons": {"return": {"type": "Array", "description": ""}, "description": "Returns an array containing each of the Dialog's \nbuttons, by default an array of HTML <code>&#60;BUTTON&#60;<\/code> \nelements.  If the Dialog's buttons were created using the \nYAHOO.widget.Button class (via the inclusion of the optional Button \ndependancy on the page), an array of YAHOO.widget.Button instances \nis returned.", "guessedname": "getButtons", "guessedtype": "function"}, "focusFirstButton": {"description": "Sets the focus to the first button created via the \"buttons\"\nconfiguration property.", "guessedname": "focusFirstButton", "guessedtype": "function"}, "doSubmit": {"description": "Submits the Dialog's form depending on the value of the \n\"postmethod\" configuration property.  <strong>Please note:\n<\/strong> As of version 2.3 this method will automatically handle \nasyncronous file uploads should the Dialog instance's form contain \n<code>&#60;input type=\"file\"&#62;<\/code> elements.  If a Dialog \ninstance will be handling asyncronous file uploads, its \n<code>callback<\/code> property will need to be setup with a \n<code>upload<\/code> handler rather than the standard \n<code>success<\/code> and, or <code>failure<\/code> handlers.  For more \ninformation, see the <a href=\"http:\/\/developer.yahoo.com\/yui\/\nconnection\/#file\">Connection Manager documenation on file uploads<\/a>.", "guessedname": "doSubmit", "guessedtype": "function"}, "configClose": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For \nconfiguration handlers, args[0] will equal the newly applied value \nfor the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"close\" property is \nchanged. The method controls the appending or hiding of the close\nicon at the top right of the Dialog.", "guessedname": "configClose", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Dialog which are fired \nautomatically at appropriate times by the Dialog class.", "guessedname": "initEvents", "guessedtype": "function"}, "focusFirst": {"description": "Sets focus to the first element in the Dialog's form or the first \nbutton defined via the \"buttons\" configuration property. Called \nwhen the Dialog is made visible.", "guessedname": "focusFirst", "guessedtype": "function"}, "focusLastButton": {"description": "Sets the focus to the last button created via the \"buttons\" \nconfiguration property.", "guessedname": "focusLastButton", "guessedtype": "function"}, "getData": {"return": {"type": "Object", "description": "A JSON object reprsenting the data of the \ncurrent form."}, "description": "Returns a JSON-compatible data structure representing the data \ncurrently contained in the form.", "guessedname": "getData", "guessedtype": "function"}, "submit": {"description": "Executes a submit of the Dialog followed by a hide, if validation \nis successful.", "guessedname": "submit", "guessedtype": "function"}, "focusLast": {"description": "Sets focus to the last element in the Dialog's form or the last \nbutton defined via the \"buttons\" configuration property.", "guessedname": "focusLast", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the Dialog <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Dialog"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal \ncontaining the configuration that should be set for this Dialog. \nSee configuration documentation for more details."}], "description": "The Dialog initialization method, which is executed for Dialog and \nall of its subclasses. This method is automatically called by the \nconstructor, and  sets up all DOM references for pre-existing markup, \nand creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Dialog"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "destroy": {"description": "Removes the Panel element from the DOM and sets all child elements \nto null.", "guessedname": "destroy", "guessedtype": "function"}, "cancel": {"description": "Executes the cancel of the Dialog followed by a hide.", "guessedname": "cancel", "guessedtype": "function"}, "focusDefaultButton": {"description": "Sets the focus to the button that is designated as the default via \nthe \"buttons\" configuration property. By default, this method is \ncalled when the Dialog is made visible.", "guessedname": "focusDefaultButton", "guessedtype": "function"}, "validate": {"description": "Built-in function hook for writing a validation function that will \nbe checked for a \"true\" value prior to a submit. This function, as \nimplemented by default, always returns true, so it should be \noverridden if validation is necessary.", "guessedname": "validate", "guessedtype": "function"}, "configPostMethod": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For \nconfiguration handlers, args[0] will equal the newly applied value \nfor the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler for the \"postmethod\" configuration property", "guessedname": "configPostMethod", "guessedtype": "function"}, "registerForm": {"description": "Prepares the Dialog's internal FORM object, creating one if one is\nnot currently present.", "guessedname": "registerForm", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed \nusing the Dialog's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "blurButtons": {"description": "Blurs all the buttons defined via the \"buttons\" \nconfiguration property.", "guessedname": "blurButtons", "guessedtype": "function"}}, "extends": "YAHOO.widget.Panel", "superclass": "YAHOO.widget.Panel", "file": "Dialog.js", "guessedtype": "function", "shortname": "Dialog", "properties": {"YAHOO.widget.Dialog.CSS_DIALOG": {"description": "Constant representing the default CSS class used for a Dialog", "static": "", "guessedname": "CSS_DIALOG", "guessedtype": "property", "type": "String", "final": ""}, "form": {"default": "null", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-40002357\">HTMLFormElement<\/a>", "description": "Object reference to the Dialog's \n<code>&#60;form&#62;<\/code> element.", "guessedname": "form", "guessedtype": "property"}, "callback.success": {"type": "Function", "description": "The function to execute upon success of the \nConnection submission", "guessedname": "success", "guessedtype": "property"}, "callback.failure": {"type": "Function", "description": "The function to execute upon failure of the \nConnection submission", "guessedname": "failure", "guessedtype": "property"}, "callback": {"type": "Object", "description": "The internally maintained callback object for use with the \nConnection utility", "guessedname": "callback", "guessedtype": "property"}, "EVENT_TYPES": {"description": "Constant representing the name of the Dialog's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "DEFAULT_CONFIG": {"description": "Constant representing the Dialog's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "callback.argument": {"type": "Object", "description": "The arbitraty argument or arguments to pass to the Connection \ncallback functions", "guessedname": "argument", "guessedtype": "property"}}, "description": "Dialog is an implementation of Panel that can be used to submit form \ndata. Built-in functionality for buttons with event handlers is included, \nand button sets can be build dynamically, or the preincluded ones for \nSubmit\/Cancel and OK\/Cancel can be utilized. Forms can be processed in 3\nways -- via an asynchronous Connection utility call, a simple form \nPOST or GET, or manually."}, "YAHOO.tool.TestSuite": {"name": "YAHOO.tool.TestSuite", "constructors": [{"params": [{"type": "String||Object", "name": "data", "description": " The name of the test suite or an object containing\na name property as well as setUp and tearDown methods."}], "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}], "namespace": "YAHOO.tool", "module": "yuitest", "guessedname": "TestSuite", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "params": [{"type": "YAHOO.tool.TestSuite||YAHOO.tool.TestCase", "name": "testObject", "description": " The test suite or test case to add."}], "description": "Adds a test suite or test case to the test suite.", "guessedname": "add", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}}, "file": "TestSuite.js", "guessedtype": "function", "shortname": "TestSuite", "properties": {"name": {"type": "String", "description": "The name of the test suite."}}, "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}, "YAHOO.util.ColumnResizer": {"name": "YAHOO.util.ColumnResizer", "constructors": [{"params": [{"type": "YAHOO.widget.DataTable", "name": "oDataTable", "description": "  DataTable instance."}, {"type": "YAHOO.widget.Column", "name": "oColumn", "description": "  Column instance."}, {"type": "HTMLElement", "name": "elThead", "description": "  TH element reference."}, {"type": "String", "name": "sHandleElId", "description": "  DOM ID of the handle element that causes the resize."}, {"type": "String", "name": "sGroup", "description": "  Group name of related DragDrop items."}, {"type": "Object", "name": "oConfig", "description": "  (Optional) Object literal of config values."}], "description": "ColumnResizer subclasses DragDrop to support resizeable Columns."}], "namespace": "YAHOO.util", "module": "datatable", "guessedname": "ColumnResizer", "methods": {"onDrag": {"params": [{"type": "string", "name": "e", "description": "  The drag event"}], "description": "Handles drag events on the Column resizer.", "guessedname": "onDrag", "guessedtype": "function"}, "onMouseUp": {"params": [{"type": "string", "name": "e", "description": "  The mouseup event"}], "description": "Handles mouseup events on the Column resizer.", "guessedname": "onMouseUp", "guessedtype": "function"}, "onMouseDown": {"params": [{"type": "string", "name": "e", "description": "  The mousedown event"}], "description": "Handles mousedown events on the Column resizer.", "guessedname": "onMouseDown", "guessedtype": "function"}}, "extends": "YAHOO.util.DragDrop", "superclass": "YAHOO.util.DragDrop", "file": "ColumnSet.js", "guessedtype": "function", "shortname": "ColumnResizer", "description": "ColumnResizer subclasses DragDrop to support resizeable Columns."}, "YAHOO.util.YUILoader": {"name": "YAHOO.util.YUILoader", "namespace": "YAHOO.util", "module": "yuiloader", "methods": {"_setup": {"private": "", "description": "Investigates the current YUI configuration on the page.  By default,\nmodules already detected will not be loaded again unless a force\noption is encountered.  Called by calculate()", "guessedname": "_setup", "guessedtype": "function"}, "_explode": {"private": "", "description": "Inspects the required modules list looking for additional \ndependencies.  Expands the required list to include all \nrequired modules.  Called by calculate()", "guessedname": "_explode", "guessedtype": "function"}, "parseSkin": {"return": {"type": "skin: string, module: string", "description": "the parsed skin name \nand module name, or null if the supplied string does not match\nthe skin pattern"}, "params": [{"type": "string", "name": "mod", "description": "  the module name to parse"}], "description": "Reverses <code>formatSkin<\/code>, providing the skin name and\nmodule name if the string matches the pattern for skins.", "guessedname": "parseSkin", "guessedtype": "function"}, "calculate": {"params": [{"type": "", "name": "o", "description": " optional options object"}], "description": "Calculates the dependency tree, the result is stored in the sorted \nproperty", "guessedname": "calculate", "guessedtype": "function"}, "onFailure": {"type": "function", "description": "Callback that will be executed if there is a failure", "guessedname": "onFailure", "guessedtype": "property"}, "insert": {"params": [{"type": "", "name": "o", "description": " optional options object"}, {"type": "string", "name": "type", "description": "  the type of dependency to insert"}], "description": "inserts the requested modules and their dependencies.  \n<code>type<\/code> can be \"js\" or \"css\".  Both script and \ncss are inserted if type is not provided.", "guessedname": "insert", "guessedtype": "function"}, "onProgress": {"type": "function", "description": "Callback that will be executed each time a new module is loaded", "guessedname": "onProgress", "guessedtype": "property"}, "require": {"params": [{"type": "string[] | string*", "name": "what", "description": "  the modules to load"}], "description": "Add a requirement for one or more module", "guessedname": "require", "guessedtype": "function"}, "getRequires": {"params": [{"type": "", "name": "mod", "description": " The module definition from moduleInfo"}], "description": "Returns an object containing properties for all modules required\nin order to load the requested module", "guessedname": "getRequires", "guessedtype": "function"}, "addModule": {"return": {"type": "boolean", "description": "true if the module was added, false if \nthe object passed in did not provide all required attributes"}, "params": [{"type": "", "name": "o", "description": " An object containing the module data"}], "description": "Add a new module to the component metadata.         \n<dl>\n<dt>name:<\/dt>       <dd>required, the component name<\/dd>\n<dt>type:<\/dt>       <dd>required, the component type (js or css)<\/dd>\n<dt>path:<\/dt>       <dd>required, the path to the script from \"base\"<\/dd>\n<dt>requires:<\/dt>   <dd>the modules required by this component<\/dd>\n<dt>optional:<\/dt>   <dd>the optional modules for this component<\/dd>\n<dt>supersedes:<\/dt> <dd>the modules this component replaces<\/dd>\n<dt>rollup:<\/dt>     <dd>the number of superseded modules required for automatic rollup<\/dd>\n<dt>fullpath:<\/dt>   <dd>If fullpath is specified, this is used instead of the configured base + path<\/dd>\n<dt>skinnable:<\/dt>  <dd>flag to determine if skin assets should automatically be pulled in<\/dd>\n<\/dl>", "guessedname": "addModule", "guessedtype": "function"}, "onSuccess": {"type": "function", "description": "Callback that will be executed when the loader is finished\nwith an insert", "guessedname": "onSuccess", "guessedtype": "property"}, "loadNext": {"params": [{"type": "string", "name": "mname", "description": "  optional the name of the module that has\nbeen loaded (which is usually why it is time to load the next\none)"}], "description": "Executed every time a module is loaded, and if we are in a load\ncycle, we attempt to load the next script.  Public so that it\nis possible to call this if using a method other than\nYAHOO.register to determine when scripts are fully loaded", "guessedname": "loadNext", "guessedtype": "function"}, "_sort": {"private": "", "description": "Sorts the dependency tree.  The last step of calculate()", "guessedname": "_sort", "guessedtype": "function"}, "_pushEvents": {"guessedname": "_pushEvents", "params": [{"type": "Function", "name": "optional", "description": " function reference"}], "description": "In IE, the onAvailable\/onDOMReady events need help when Event is\nloaded dynamically", "private": "", "guessedtype": "function"}, "_skin": {"private": "", "description": "Sets up the requirements for the skin assets if any of the\nrequested modules are skinnable", "guessedname": "_skin", "guessedtype": "function"}, "_url": {"return": {"type": "string", "description": "the full url"}, "description": "Generates the full url for a module\nmethod _url", "private": "", "params": [{"type": "string", "name": "path", "description": "  the path fragment"}], "guessedname": "_url", "guessedtype": "function"}, "_addSkin": {"private": "", "description": "Adds the skin def to the module info", "guessedname": "_addSkin", "guessedtype": "function"}, "getProvides": {"return": {"type": "", "description": "what this module provides"}, "params": [{"type": "", "name": "mod", "description": " The module definition from moduleInfo"}], "description": "Returns an object literal of the modules the supplied module satisfies", "guessedname": "getProvides", "guessedtype": "function"}, "formatSkin": {"return": {"type": "string", "description": "the full skin module name"}, "params": [{"type": "string", "name": "skin", "description": "  the name of the skin"}, {"type": "string", "name": "mod", "description": "  optional: the name of a module to skin"}], "description": "Returns the skin module name for the specified skin name.  If a\nmodule name is supplied, the returned skin module name is \nspecific to the module passed in.", "guessedname": "formatSkin", "guessedtype": "function"}, "_reduce": {"private": "", "description": "Remove superceded modules and loaded modules.  Called by\ncalculate() after we have the mega list of all dependencies", "guessedname": "_reduce", "guessedtype": "function"}, "_rollup": {"private": "", "description": "Look for rollup packages to determine if all of the modules a\nrollup supersedes are required.  If so, include the rollup to\nhelp reduce the total number of connections required.  Called\nby calculate()", "guessedname": "_rollup", "guessedtype": "function"}}, "file": "yuiloader.js", "shortname": "YUILoader", "todo": "version management, automatic sandboxing", "properties": {"ignore": {"type": "string[]", "description": "A list of modules that should not be loaded, even if\nthey turn up in the dependency tree", "guessedname": "ignore", "guessedtype": "property"}, "force": {"type": "string", "description": "A list of modules that should always be loaded, even\nif they have already been inserted into the page.", "guessedname": "force", "guessedtype": "property"}, "_useYahooListener": {"private": "", "description": "Use the YAHOO environment listener to detect script load.  This\nis only switched on for Safari 2.x and below.", "guessedname": "_useYahooListener", "guessedtype": "property"}, "varName": {"type": "string", "description": "The name of the variable in a sandbox or script node \n(for external script support in Safari 2.x and earlier)\nto reference when the load is complete.  If this variable \nis not available in the specified scripts, the operation will \nfail.", "guessedname": "Name", "guessedtype": "property"}, "rollups": {"description": "List of rollup files found in the library metadata", "guessedname": "rollups", "guessedtype": "property"}, "required": {"type": "{string: boolean}", "description": "The list of requested modules", "guessedname": "required", "guessedtype": "property"}, "loadOptional": {"default": "false", "type": "boolean", "description": "Whether or not to load optional dependencies for \nthe requested modules", "guessedname": "loadOptional", "guessedtype": "property"}, "moduleInfo": {"description": "The library metadata", "guessedname": "moduleInfo", "guessedtype": "property"}, "_internalCallback": {"private": "", "description": "Internal callback to handle multiple internal insert() calls\nso that css is inserted prior to js", "guessedname": "_internalCallback", "guessedtype": "property"}, "base": {"default": "http:\/\/yui.yahooapis.com\/[YUI VERSION]\/build\/", "type": "string", "description": "The base directory.", "guessedname": "base", "guessedtype": "property"}, "dirty": {"default": "true", "type": "boolean", "description": "Flag to indicate the dependency tree needs to be recomputed\nif insert is called again.", "guessedname": "dirty", "guessedtype": "property"}, "allowRollup": {"default": "true", "type": "boolean", "description": "Should we allow rollups", "guessedname": "allowRollup", "guessedtype": "property"}, "sorted": {"type": "string[]", "description": "All of the derived dependencies in sorted order, which\nwill be populated when either calculate() or insert()\nis called", "guessedname": "sorted", "guessedtype": "property"}, "skin": {"description": "Provides the information used to skin the skinnable components.\nThe following skin definition would result in 'skin1' and 'skin2'\nbeing loaded for calendar (if calendar was requested), and\n'sam' for all other skinnable components:\n<code>\nskin: {\n\/\/ The default skin, which is automatically applied if not\n\/\/ overriden by a component-specific skin definition.\n\/\/ Change this in to apply a different skin globally\ndefaultSkin: 'sam', \n\/\/ This is combined with the loader base property to get\n\/\/ the default root directory for a skin. ex:\n\/\/ http:\/\/yui.yahooapis.com\/2.3.0\/build\/assets\/skins\/sam\/\nbase: 'assets\/skins\/',\n\/\/ The name of the rollup css file for the skin\npath: 'skin.css',\n\/\/ The number of skinnable components requested that are\n\/\/ required before using the rollup file rather than the\n\/\/ individual component css files\nrollup: 3,\n\/\/ Any component-specific overrides can be specified here,\n\/\/ making it possible to load different skins for different\n\/\/ components.  It is possible to load more than one skin\n\/\/ for a given component as well.\noverrides: {\ncalendar: ['skin1', 'skin2']\n}\n}\n<\/code>", "guessedname": "self", "guessedtype": "property"}, "scope": {"default": "this", "description": "The execution scope for all callbacks", "guessedname": "scope", "guessedtype": "property"}, "data": {"description": "Data that is passed to all callbacks", "guessedname": "data", "guessedtype": "property"}, "filter": {"type": "string|{searchExp: string, replaceStr: string}", "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG<\/dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the logger widget<\/dd>\n<dt>RAW<\/dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).\n<\/dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n<\/pre>", "guessedname": "filter", "guessedtype": "property"}, "loaded": {"type": "{string: boolean}", "propery": "loaded", "description": "Set when beginning to compute the dependency tree. \nComposed of what YAHOO reports to be loaded combined\nwith what has been loaded by the tool", "guessedname": "loaded", "guessedtype": "property"}, "inserted": {"type": "{string: boolean}", "description": "List of modules inserted by the utility", "guessedname": "inserted", "guessedtype": "property"}}, "description": "YUILoader provides dynamic loading for YUI."}, "YAHOO.widget.Editor": {"name": "YAHOO.widget.Editor", "configs": {"hiddencss": {"default": "<code><pre>\n.yui-hidden font, .yui-hidden strong, .yui-hidden b, .yui-hidden em, .yui-hidden i, .yui-hidden u, .yui-hidden div, .yui-hidden p, .yui-hidden span, .yui-hidden img, .yui-hidden ul, .yui-hidden ol, .yui-hidden li, .yui-hidden table {\nborder: 1px dotted #ccc;\n}\n.yui-hidden .yui-non {\nborder: none;\n}\n.yui-hidden img {\npadding: 2px;\n}<\/pre><\/code>", "type": "String", "description": "The CSS used to show\/hide hidden elements on the page, these rules must be prefixed with the class provided in <code>this.CLASS_HIDDEN<\/code>"}, "localFileWarning": {"default": "true", "type": "Boolean", "description": "Should we throw the warning if we detect a file that is local to their machine?"}}, "constructors": [{"params": [{"type": "String\/HTMLElement", "name": "el", "description": " The textarea element to turn into an editor."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization."}], "namespace": "YAHOO.widget", "module": "editor", "events": {"localFileWarningChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "localFileWarningChangeEvent", "description": "Fires when the value for the configuration attribute 'localFileWarning' changes."}, "beforeLocalfilewarningChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeLocalfilewarningChangeEvent", "description": "Fires before the value for the configuration attribute 'localFileWarning' changes. Return false to cancel the attribute change."}, "hiddencssChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "hiddencssChangeEvent", "description": "Fires when the value for the configuration attribute 'hiddencss' changes."}, "beforeHiddencssChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeHiddencssChangeEvent", "description": "Fires before the value for the configuration attribute 'hiddencss' changes. Return false to cancel the attribute change."}}, "guessedname": "Editor", "methods": {"_fixNodes": {"description": "Fix href and imgs as well as remove invalid HTML.", "private": "", "guessedname": "_fixNodes", "guessedtype": "function"}, "_handleInsertImageWindowClose": {"description": "Handles the closing of the Image Properties Window.", "private": "", "guessedname": "_handleInsertImageWindowClose", "guessedtype": "function"}, "moveWindow": {"params": [{"type": "Boolean", "name": "force", "description": " Boolean to tell it to move but not use any animation (Usually done the first time the window is loaded.)"}], "description": "Realign the window with the currentElement and reposition the knob above the panel.", "guessedname": "moveWindow", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Object literal specifying a set of \nconfiguration attributes used to create the editor."}], "description": "Initializes all of the configuration attributes used to create \nthe editor.", "guessedname": "initAttributes", "guessedtype": "function"}, "openWindow": {"params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">YAHOO.widget.EditorWindow<\/a>", "name": "win", "description": " A <a href=\"YAHOO.widget.EditorWindow.html\">YAHOO.widget.EditorWindow<\/a> instance"}], "description": "Opens a new \"window\/panel\"", "guessedname": "openWindow", "guessedtype": "function"}, "cmd_superscript": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('superscript') is used.", "guessedname": "cmd_superscript", "guessedtype": "function"}, "_handleInsertImageClick": {"description": "Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.", "private": "", "guessedname": "_handleInsertImageClick", "guessedtype": "function"}, "_renderPanel": {"guessedname": "_renderPanel", "return": {"type": "<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay<\/a>", "description": ""}, "description": "Renders the panel used for Editor Windows to the document so we can start using it..", "private": "", "guessedtype": "function"}, "init": {"description": "The Editor class' initialization method", "guessedname": "init", "guessedtype": "function"}, "closeWindow": {"description": "Close the currently open EditorWindow.", "guessedname": "closeWindow", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the editor.", "guessedname": "toString", "guessedtype": "function"}, "cmd_script": {"params": [{"type": "", "name": "action", "description": " action passed from the execCommand method"}, {"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is a combined execCommand override method. It is called from the cmd_superscript and cmd_subscript methods.", "guessedname": "cmd_script", "guessedtype": "function"}, "cmd_hiddenelements": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('hiddenelements') is used.", "guessedname": "cmd_hiddenelements", "guessedtype": "function"}, "_handleCreateLinkWindowClose": {"description": "Handles the closing of the Link Properties Window.", "private": "", "guessedname": "_handleCreateLinkWindowClose", "guessedtype": "function"}, "cmd_indent": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('indent') is used.", "guessedname": "cmd_indent", "guessedtype": "function"}, "_cleanClassName": {"return": {"type": "String", "description": ""}, "params": [{"type": "String", "name": "str", "description": " The classname to clean up"}], "description": "Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -'s.", "private": ""}, "cmd_heading": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('heading') is used.", "guessedname": "cmd_heading", "guessedtype": "function"}, "cmd_subscript": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('subscript') is used.", "guessedname": "cmd_subscript", "guessedtype": "function"}, "_handleKeyDown": {"guessedname": "_handleKeyDown", "params": [{"type": "Event", "name": "ev", "description": " The event we are working on."}], "description": "Override method that handles some new keydown events inside the iFrame document.", "private": "", "guessedtype": "function"}, "cmd_outdent": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('outdent') is used.", "guessedname": "cmd_outdent", "guessedtype": "function"}, "_closeWindow": {"guessedname": "_closeWindow", "params": [{"type": "Event", "name": "ev", "description": " The keypress Event that we are trapping"}], "description": "Close the currently open EditorWindow with the Escape key.", "private": "", "guessedtype": "function"}, "cmd_removeformat": {"params": [{"type": "", "name": "value", "description": " Value passed from the execCommand method"}], "description": "This is an execCommand override method. It is called from execCommand when the execCommand('removeformat') is used.", "guessedname": "cmd_removeformat", "guessedtype": "function"}}, "extends": "YAHOO.widget.SimpleEditor", "superclass": "YAHOO.widget.SimpleEditor", "file": "editor.js", "guessedtype": "function", "shortname": "Editor", "properties": {"_alwaysDisabled": {"guessedname": "_alwaysDisabled", "type": "Object", "description": "The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.", "private": "", "guessedtype": "property"}, "STR_LOCAL_FILE_WARNING": {"type": "String", "description": "The label string for the local file warning.", "guessedname": "STR_LOCAL_FILE_WARNING", "guessedtype": "property"}, "STR_CLOSE_WINDOW_NOTE": {"type": "String", "description": "A note appearing in the Editor Window to tell the user that the Escape key will close the window", "guessedname": "STR_CLOSE_WINDOW_NOTE", "guessedtype": "property"}, "CLASS_HIDDEN": {"protected": "", "type": "String", "description": "CSS class applied to the body when the hiddenelements button is pressed.", "guessedname": "CLASS_HIDDEN", "guessedtype": "property"}, "STR_IMAGE_SIZE": {"type": "String", "description": "The label string for Image Size", "guessedname": "STR_IMAGE_SIZE", "guessedtype": "property"}, "STR_IMAGE_COPY": {"type": "String", "description": "The label string for the image copy and paste message for Opera and Safari", "guessedname": "STR_IMAGE_COPY", "guessedtype": "property"}, "STR_LINK_NEW_WINDOW": {"type": "String", "description": "The string for the open in a new window label.", "guessedname": "STR_LINK_NEW_WINDOW", "guessedtype": "property"}, "STR_CLOSE_WINDOW": {"type": "String", "description": "The Title of the close button in the Editor Window", "guessedname": "STR_CLOSE_WINDOW", "guessedtype": "property"}, "STR_LINK_TITLE": {"type": "String", "description": "The string for the link description.", "guessedname": "STR_LINK_TITLE", "guessedtype": "property"}, "_disabled": {"guessedname": "_disabled", "type": "Array", "description": "The Toolbar items that should be disabled if there is no selection present in the editor.", "private": "", "guessedtype": "property"}, "STR_IMAGE_BORDER": {"type": "String", "description": "The label string for the image border.", "guessedname": "STR_IMAGE_BORDER", "guessedtype": "property"}, "STR_IMAGE_TITLE": {"type": "String", "description": "The label string for Image Description", "guessedname": "STR_IMAGE_TITLE", "guessedtype": "property"}, "_alwaysEnabled": {"guessedname": "_alwaysEnabled", "type": "Object", "description": "The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.", "private": "", "guessedtype": "property"}, "STR_BEFORE_EDITOR": {"type": "String", "description": "The accessibility string for the element before the iFrame", "guessedname": "STR_BEFORE_EDITOR", "guessedtype": "property"}, "STR_IMAGE_URL": {"type": "String", "description": "The label string for Image URL", "guessedname": "STR_IMAGE_URL", "guessedtype": "property"}, "STR_IMAGE_TEXTFLOW": {"type": "String", "description": "The label string for the image text flow.", "guessedname": "STR_IMAGE_TEXTFLOW", "guessedtype": "property"}, "STR_LINK_PROP_TITLE": {"type": "String", "description": "The label string for the Link Property Editor Window.", "guessedname": "STR_LINK_PROP_TITLE", "guessedtype": "property"}, "STR_IMAGE_ORIG_SIZE": {"type": "String", "description": "The label string for Original Image Size", "guessedname": "STR_IMAGE_ORIG_SIZE", "guessedtype": "property"}, "STR_IMAGE_PADDING": {"type": "String", "description": "The label string for the image padding.", "guessedname": "STR_IMAGE_PADDING", "guessedtype": "property"}, "STR_IMAGE_PROP_TITLE": {"type": "String", "description": "The title for the Image Property Editor Window", "guessedname": "STR_IMAGE_PROP_TITLE", "guessedtype": "property"}, "CLASS_LOCAL_FILE": {"protected": "", "type": "String", "description": "CSS class applied to an element when it's found to have a local url.", "guessedname": "CLASS_LOCAL_FILE", "guessedtype": "property"}, "STR_LINK_PROP_REMOVE": {"type": "String", "description": "The label string for the Remove link from text link inside the property editor.", "guessedname": "STR_LINK_PROP_REMOVE", "guessedtype": "property"}, "_defaultToolbar": {"guessedname": "_defaultToolbar", "type": "Object", "description": "Default toolbar config.", "private": "", "guessedtype": "property"}}, "description": "The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization."}, "YAHOO.util.Element": {"name": "YAHOO.util.Element", "configs": {"element": {"type": "HTMLElement", "description": "The HTMLElement the Element instance refers to."}}, "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": "  The html element that \nrepresents the Element."}, {"type": "Object", "name": "map", "description": " A key-value map of initial config names and values"}], "description": "Element provides an wrapper object to simplify adding\nevent listeners, using dom methods, and managing attributes."}], "namespace": "YAHOO.util", "module": "element", "events": {"available": {"description": "Fires when the Element's HTMLElement can be retrieved by Id.\n<p>See: <a href=\"#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> available<br>\n<code>&lt;HTMLElement&gt;\ntarget<\/code> the HTMLElement bound to this Element instance<br>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('available', handler);<\/code><\/p>"}, "contentReady": {"description": "Fires when the Element's HTMLElement subtree is rendered.\n<p>See: <a href=\"#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> contentReady<br>\n<code>&lt;HTMLElement&gt;\ntarget<\/code> the HTMLElement bound to this Element instance<br>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('contentReady', handler);<\/code><\/p>"}}, "guessedname": "Element", "methods": {"fireQueue": {"description": "Apply any queued set calls.", "guessedname": "fireQueue", "guessedtype": "function"}, "appendChild": {"params": [{"type": "YAHOO.util.Element || HTMLElement", "name": "child", "description": " The element to append."}], "description": "Wrapper for HTMLElement method.", "guessedname": "appendChild", "guessedtype": "function"}, "addListener": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Adds a listener for the given event.  These may be DOM or \ncustomEvent listeners.  Any event that is fired via fireEvent\ncan be listened for.  All handlers receive an event object.", "guessedname": "addListener", "guessedtype": "function"}, "removeClass": {"params": [{"type": "String", "name": "className", "description": " The className to remove"}], "description": "Wrapper for Dom method.", "guessedname": "removeClass", "guessedtype": "function"}, "insertBefore": {"params": [{"type": "HTMLElement", "name": "element", "description": " The HTMLElement to insert"}, {"type": "HTMLElement", "name": "before", "description": " The HTMLElement to insert\nthe element before."}], "description": "Wrapper for HTMLElement method.", "guessedname": "insertBefore", "guessedtype": "function"}, "on": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Alias for addListener", "guessedname": "on", "guessedtype": "function"}, "getElementsByTagName": {"params": [{"type": "String", "name": "tag", "description": " The tagName to collect"}], "description": "Wrapper for HTMLElement method.", "guessedname": "getElementsByTagName", "guessedtype": "function"}, "getElementsByClassName": {"return": {"type": "Array", "description": "Array of HTMLElements"}, "params": [{"type": "String", "name": "className", "description": " The className to collect"}, {"type": "String", "name": "tag", "description": " (optional) The tag to use in\nconjunction with class name"}], "description": "Wrapper for Dom method.", "guessedname": "getElementsByClassName", "guessedtype": "function"}, "subscribe": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Alias for addListener", "guessedname": "subscribe", "guessedtype": "function"}, "appendTo": {"params": [{"type": "HTMLElement | Element", "name": "parentNode", "description": " The node to append to"}, {"type": "HTMLElement | Element", "name": "before", "description": " An optional node to insert before"}], "description": "Appends the HTMLElement into either the supplied parentNode.", "guessedname": "appendTo", "guessedtype": "function"}, "getStyle": {"return": {"type": "String", "description": "The current value of the property"}, "params": [{"type": "String", "name": "property", "description": " The style property to retrieve"}], "description": "Wrapper for Dom method.", "guessedname": "getStyle", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String", "name": "property", "description": " The style property to set"}, {"type": "String", "name": "value", "description": " The value to apply to the style property"}], "description": "Wrapper for Dom method.", "guessedname": "setStyle", "guessedtype": "function"}, "removeChild": {"params": [{"type": "HTMLElement", "name": "child", "description": " The HTMLElement to remove"}], "description": "Wrapper for HTMLElement method.", "guessedname": "removeChild", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "map", "description": " A key-value map of initial attribute configs"}], "description": "Registers Element specific attributes.", "guessedname": "initAttributes", "guessedtype": "function"}, "hasChildNodes": {"return": {"type": "Boolean", "description": "Whether or not the element has childNodes"}, "description": "Wrapper for HTMLElement method.", "guessedname": "hasChildNodes", "guessedtype": "function"}, "replaceClass": {"params": [{"type": "String", "name": "oldClassName", "description": " The className to replace"}, {"type": "String", "name": "newClassName", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "replaceClass", "guessedtype": "function"}, "replaceChild": {"params": [{"type": "HTMLElement", "name": "newNode", "description": " The HTMLElement to insert"}, {"type": "HTMLElement", "name": "oldNode", "description": " The HTMLElement to replace"}], "description": "Wrapper for HTMLElement method.", "guessedname": "replaceChild", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the element has the class name"}, "params": [{"type": "String", "name": "className", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "hasClass", "guessedtype": "function"}, "_registerHTMLAttr": {"guessedname": "_registerHTMLAttr", "params": [{"type": "YAHOO.util.Element", "name": "element", "description": " The Element instance to\nregister the config to."}, {"type": "String", "name": "key", "description": " The name of the config to register"}, {"type": "Object", "name": "map", "description": " A key-value map of the config's params"}], "description": "Sets the value of the property and fires beforeChange and change events.", "private": "", "guessedtype": "function"}, "removeListener": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}], "description": "Remove an event listener", "guessedname": "removeListener", "guessedtype": "function"}, "addClass": {"params": [{"type": "String", "name": "className", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "addClass", "guessedtype": "function"}}, "uses": ["YAHOO.util.AttributeProvider"], "file": "Element.js", "guessedtype": "function", "shortname": "Element", "properties": {"DOM_EVENTS": {"type": "Object", "description": "Dom events supported by the Element instance.", "guessedname": "DOM_EVENTS", "guessedtype": "property"}}, "description": "Element provides an wrapper object to simplify adding\nevent listeners, using dom methods, and managing attributes."}, "YAHOO.util.DragDrop": {"name": "YAHOO.util.DragDrop", "constructors": [{"params": [{"type": "String", "name": "id", "description": " of the element that is linked to this instance"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop objects"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DragDrop: \npadding, isTarget, maintainOffset, primaryButtonOnly,"}], "description": "Defines the interface and base operation of items that that can be \ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver, onDragOut.\nUp to three html elements can be associated with a DragDrop instance:\n<ul>\n<li>linked element: the element that is passed into the constructor.\nThis is the element which defines the boundaries for interaction with \nother DragDrop objects.<\/li>\n<li>handle element(s): The drag operation only occurs if the element that \nwas clicked matches a handle element.  By default this is the linked \nelement, but there are times that you will want only a portion of the \nlinked element to initiate the drag operation, and the setHandleElId() \nmethod provides a way to define this.<\/li>\n<li>drag element: this represents an the element that would be moved along\nwith the cursor during a drag operation.  By default, this is the linked\nelement itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define\na separate element that would be moved, as in {@link YAHOO.util.DDProxy}\n<\/li>\n<\/ul>\nThis class should not be instantiated until the onload event to ensure that\nthe associated elements are available.\nThe following would define a DragDrop obj that would interact with any \nother DragDrop obj in the \"group1\" group:\n<pre>\ndd = new YAHOO.util.DragDrop(\"div1\", \"group1\");\n<\/pre>\nSince none of the event handlers have been implemented, nothing would \nactually happen if you were to run the code above.  Normally you would \noverride this class or one of the default implementations, but you can \nalso override the methods you want on an instance of the class...\n<pre>\ndd.onDragDrop = function(e, id) {\n&nbsp;&nbsp;alert(\"dd was dropped on \" + id);\n}\n<\/pre>"}], "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DragDrop", "methods": {"addToGroup": {"params": [{"type": "string", "name": "sGroup", "description": "  the name of the group"}], "description": "Add this instance to a group of related drag\/drop objects.  All \ninstances belong to at least one group, and can belong to as many \ngroups as needed.", "guessedname": "addToGroup", "guessedtype": "function"}, "startDrag": {"params": [{"type": "int", "name": "X", "description": " click location"}, {"type": "int", "name": "Y", "description": " click location"}], "description": "Abstract method called after a drag\/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.", "guessedname": "startDrag", "guessedtype": "function"}, "isValidHandleChild": {"return": {"type": "boolean", "description": "true if this is a valid tag type, false if not"}, "params": [{"type": "HTMLElement", "name": "node", "description": " the HTMLElement to evaluate"}], "description": "Checks the tag exclusion list to see if this click should be ignored", "guessedname": "isValidHandleChild", "guessedtype": "function"}, "b4Drag": {"private": "", "description": "Code that executes immediately before the onDrag event", "guessedname": "b4Drag", "guessedtype": "function"}, "lock": {"description": "Lock this instance", "guessedname": "lock", "guessedtype": "function"}, "onDragEnter": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of one or more \ndragdrop items being hovered over."}], "description": "Abstract method called when this element fist begins hovering over \nanother DragDrop obj", "guessedname": "onDragEnter", "guessedtype": "function"}, "b4StartDrag": {"private": "", "description": "Code that executes immediately before the startDrag event", "guessedname": "b4StartDrag", "guessedtype": "function"}, "onMouseDown": {"params": [{"type": "Event", "name": "e", "description": " the mousedown event"}], "description": "Event handler that fires when a drag\/drop obj gets a mousedown", "guessedname": "onMouseDown", "guessedtype": "function"}, "setOuterHandleElId": {"params": [{"type": "", "name": "id", "description": " the id of the element that will be used to initiate the drag"}], "description": "Allows you to set an element outside of the linked element as a drag \nhandle", "guessedname": "setOuterHandleElId", "guessedtype": "function"}, "unlock": {"description": "Unlock this instace", "guessedname": "unlock", "guessedtype": "function"}, "clearTicks": {"description": "Clears any tick interval defined for this instance", "guessedname": "clearTicks", "guessedtype": "function"}, "setStartPosition": {"guessedname": "setStartPosition", "params": [{"type": "", "name": "pos", "description": " current position (from previous lookup)"}], "description": "Sets the start position of the element.  This is set when the obj\nis initialized, the reset when a drag is started.", "private": "", "guessedtype": "function"}, "resetConstraints": {"description": "resetConstraints must be called if you manually reposition a dd element.", "guessedname": "resetConstraints", "guessedtype": "function"}, "clickValidator": {"guessedname": "clickValidator", "params": [{"type": "Event", "name": "e", "description": ""}], "description": "Method validates that the clicked element\nwas indeed the handle or a valid child of the handle", "private": "", "guessedtype": "function"}, "handleMouseDown": {"guessedname": "handleMouseDown", "params": [{"type": "Event", "name": "e", "description": ""}, {"type": "YAHOO.util.DragDrop", "name": "oDD", "description": " the clicked dd object (this dd obj)"}], "description": "Fired when this object is clicked", "private": "", "guessedtype": "function"}, "onDragOver": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of dd items \nbeing hovered over."}], "description": "Abstract method called when this element is hovering over another \nDragDrop obj", "guessedname": "onDragOver", "guessedtype": "function"}, "addInvalidHandleType": {"params": [{"type": "string", "name": "tagName", "description": " the type of element to exclude"}], "description": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.", "guessedname": "addInvalidHandleType", "guessedtype": "function"}, "setDragElId": {"params": [{"type": "string", "name": "id", "description": "  the id of the element that will be used to initiate the drag"}], "description": "Allows you to specify that an element other than the linked element \nwill be moved with the cursor during a drag", "guessedname": "setDragElId", "guessedtype": "function"}, "setXConstraint": {"params": [{"type": "int", "name": "iLeft", "description": " the number of pixels the element can move to the left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move to the \nright"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the \nelement\nshould move iTickSize pixels at a time."}], "description": "By default, the element can be dragged any place on the screen.  Use \nthis method to limit the horizontal travel of the element.  Pass in \n0,0 for the parameters if you want to lock the drag to the y axis.", "guessedname": "setXConstraint", "guessedtype": "function"}, "getTick": {"return": {"type": "int", "description": "the closest tick"}, "description": "Normally the drag element is moved pixel by pixel, but we can specify \nthat it move a number of pixels at a time.  This method resolves the \nlocation when we have it set up like this.", "private": "", "params": [{"type": "int", "name": "val", "description": " where we want to place the object"}, {"type": "int[]", "name": "tickArray", "description": " sorted array of valid points"}], "guessedname": "getTick", "guessedtype": "function"}, "init": {"params": [{"type": "", "name": "id", "description": " the id of the linked element"}, {"type": "String", "name": "sGroup", "description": " the group of related items"}, {"type": "object", "name": "config", "description": " configuration attributes"}], "description": "Sets up the DragDrop object.  Must be called in the constructor of any\nYAHOO.util.DragDrop subclass", "guessedname": "init", "guessedtype": "function"}, "clearConstraints": {"description": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.", "guessedname": "clearConstraints", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "the html element"}, "description": "Returns a reference to the linked element", "guessedname": "getEl", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the dd obj"}, "description": "toString method", "guessedname": "toString", "guessedtype": "function"}, "onMouseUp": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}], "description": "Event handler that fires when a drag\/drop obj gets a mouseup", "guessedname": "onMouseUp", "guessedtype": "function"}, "removeInvalidHandleType": {"params": [{"type": "string", "name": "tagName", "description": " the type of element to unexclude"}], "description": "Unsets an excluded tag name set by addInvalidHandleType", "guessedname": "removeInvalidHandleType", "guessedtype": "function"}, "getTargetCoord": {"return": {"type": "", "description": "an object that contains the coordinates (Object.x and Object.y)"}, "description": "Finds the location the element should be placed if we want to move\nit to where the mouse location less the click offset would place us.", "private": "", "params": [{"type": "int", "name": "iPageX", "description": " the X coordinate of the click"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the click"}], "guessedname": "getTargetCoord", "guessedtype": "function"}, "setHandleElId": {"params": [{"type": "string", "name": "id", "description": "  the id of the element that will be used to \ninitiate the drag."}], "description": "Allows you to specify a child of the linked element that should be \nused to initiate the drag operation.  An example of this would be if \nyou have a content div with text and links.  Clicking anywhere in the \ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element \nthat starts the drag operation.", "guessedname": "setHandleElId", "guessedtype": "function"}, "onDragOut": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this was hovering over.  In INTERSECT mode, an array of dd items \nthat the mouse is no longer over."}], "description": "Abstract method called when we are no longer hovering over an element", "guessedname": "onDragOut", "guessedtype": "function"}, "onInvalidDrop": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}], "description": "Abstract method called when this item is dropped on an area with no\ndrop target", "guessedname": "onInvalidDrop", "guessedtype": "function"}, "setInitialPosition": {"guessedname": "setInitPosition", "params": [{"type": "int", "name": "diffX", "description": "   the X offset, default 0"}, {"type": "int", "name": "diffY", "description": "   the Y offset, default 0"}], "description": "Stores the initial placement of the linked element.", "private": "", "guessedtype": "function"}, "b4DragDrop": {"private": "", "description": "Code that executes immediately before the onDragDrop event", "guessedname": "b4DragDrop", "guessedtype": "function"}, "removeFromGroup": {"params": [{"type": "string", "name": "sGroup", "description": "  The group to drop"}], "description": "Remove's this instance from the supplied interaction group", "guessedname": "removeFromGroup", "guessedtype": "function"}, "initTarget": {"params": [{"type": "", "name": "id", "description": " the id of the linked element"}, {"type": "String", "name": "sGroup", "description": " the group of related items"}, {"type": "object", "name": "config", "description": " configuration attributes"}], "description": "Initializes Targeting functionality only... the object does not\nget a mousedown handler.", "guessedname": "initTarget", "guessedtype": "function"}, "removeInvalidHandleClass": {"params": [{"type": "string", "name": "cssClass", "description": " the class of the element(s) you wish to \nre-enable"}], "description": "Unsets an invalid css class", "guessedname": "removeInvalidHandleClass", "guessedtype": "function"}, "onDragDrop": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this was dropped on.  In INTERSECT mode, an array of dd items this \nwas dropped on."}], "description": "Abstract method called when this item is dropped on another DragDrop \nobj", "guessedname": "onDragDrop", "guessedtype": "function"}, "setYTicks": {"private": "", "description": "Create the array of vertical tick marks if an interval was specified in \nsetYConstraint().", "guessedname": "setYTicks", "guessedtype": "function"}, "b4EndDrag": {"private": "", "description": "Code that executes immediately before the endDrag event", "guessedname": "b4EndDrag", "guessedtype": "function"}, "removeInvalidHandleId": {"params": [{"type": "string", "name": "id", "description": " the id of the element to re-enable"}], "description": "Unsets an invalid handle id", "guessedname": "removeInvalidHandleId", "guessedtype": "function"}, "onAvailable": {"description": "Override the onAvailable method to do what is needed after the initial\nposition was determined.", "guessedname": "onAvailable", "guessedtype": "function"}, "getDragEl": {"return": {"type": "HTMLElement", "description": "the html element"}, "description": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another \nelement. An example of this can be found in YAHOO.util.DDProxy", "guessedname": "getDragEl", "guessedtype": "function"}, "onDrag": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}], "description": "Abstract method called during the onMouseMove event while dragging an \nobject.", "guessedname": "onDrag", "guessedtype": "function"}, "applyConfig": {"description": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and \nDragDrop in order to get all of the parameters that are available in\neach object.", "guessedname": "applyConfig", "guessedtype": "function"}, "b4DragOver": {"private": "", "description": "Code that executes immediately before the onDragOver event", "guessedname": "b4DragOver", "guessedtype": "function"}, "setYConstraint": {"params": [{"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the \nelement should move iTickSize pixels at a time."}], "description": "By default, the element can be dragged any place on the screen.  Set \nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.", "guessedname": "setYConstraint", "guessedtype": "function"}, "endDrag": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}], "description": "Fired when we are done dragging the object", "guessedname": "endDrag", "guessedtype": "function"}, "isLocked": {"return": {"type": "boolean", "description": "true if this obj or all drag\/drop is locked, else \nfalse"}, "description": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag\/drop is disabled on the page.)", "guessedname": "isLocked", "guessedtype": "function"}, "addInvalidHandleClass": {"params": [{"type": "string", "name": "cssClass", "description": " the class of the elements you wish to ignore"}], "description": "Lets you specify a css class of elements that will not initiate a drag", "guessedname": "addInvalidHandleClass", "guessedtype": "function"}, "handleOnAvailable": {"private": "", "description": "Executed when the linked element is available", "guessedname": "handleOnAvailable", "guessedtype": "function"}, "setPadding": {"params": [{"type": "int", "name": "iTop", "description": "    Top pad"}, {"type": "int", "name": "iRight", "description": "  Right pad"}, {"type": "int", "name": "iBot", "description": "    Bot pad"}, {"type": "int", "name": "iLeft", "description": "   Left pad"}], "description": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.  \nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.", "guessedname": "setPadding", "guessedtype": "function"}, "unreg": {"description": "Remove all drag and drop hooks for this element", "guessedname": "unreg", "guessedtype": "function"}, "b4MouseDown": {"guessedname": "b4MouseDown", "params": [{"type": "Event", "name": "e", "description": " the mousedown event"}], "description": "Code executed immediately before the onMouseDown event", "private": "", "guessedtype": "function"}, "b4DragOut": {"private": "", "description": "Code that executes immediately before the onDragOut event", "guessedname": "b4DragOut", "guessedtype": "function"}, "addInvalidHandleId": {"params": [{"type": "string", "name": "id", "description": " the element id of the element you wish to ignore"}], "description": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag", "guessedname": "addInvalidHandleId", "guessedtype": "function"}, "setXTicks": {"private": "", "description": "Create the array of horizontal tick marks if an interval was specified\nin setXConstraint().", "guessedname": "setXTicks", "guessedtype": "function"}}, "file": "DragDrop.js", "guessedtype": "function", "shortname": "DragDrop", "properties": {"maxX": {"guessedname": "maxX", "type": "int", "description": "The right constraint", "private": "", "guessedtype": "property"}, "maxY": {"guessedname": "maxY", "type": "int", "description": "The down constraint", "private": "", "guessedtype": "property"}, "hasOuterHandles": {"default": "false", "type": "boolean", "description": "By default, drags can only be initiated if the mousedown occurs in the\nregion the linked element is.  This is done in part to work around a\nbug in some browsers that mis-report the mousedown if the previous\nmouseup happened outside of the window.  This property is set to true\nif outer handles are defined.", "guessedname": "hasOuterHandles", "guessedtype": "property"}, "_domRef": {"private": "", "description": "Cached reference to the linked element", "guessedname": "_domRef", "guessedtype": "property"}, "yTicks": {"type": "int[]", "description": "Array of pixel locations the element will snap to if we specified a \nvertical graduation\/interval.  This array is generated automatically \nwhen you define a tick interval.", "guessedname": "yTicks", "guessedtype": "property"}, "startPageY": {"guessedname": "startPageY", "type": "int", "description": "The linked element's absolute X position at the time the drag was \nstarted", "private": "", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of the element associated with this object.  This is what we \nrefer to as the \"linked element\" because the size and position of \nthis element is used to determine when the drag and drop objects have \ninteracted.", "guessedname": "id", "guessedtype": "property"}, "deltaX": {"guessedname": "deltaX", "type": "int", "description": "The difference between the click position and the source element's location", "private": "", "guessedtype": "property"}, "deltaY": {"guessedname": "deltaY", "type": "int", "description": "The difference between the click position and the source element's location", "private": "", "guessedtype": "property"}, "__ygDragDrop": {"private": "", "description": "Internal typeof flag", "guessedname": "__ygDragDrop", "guessedtype": "property"}, "overlap": {"type": "YAHOO.util.Region", "description": "Property that is assigned to a drag and drop object when testing to\nsee if it is being targeted by another dd object.  This is a region\nthat represents the area the draggable element overlaps this target.\nDDM.getBestMatch uses this property to compare the size of the overlap\nto that of other targets in order to determine the closest match in\nINTERSECT mode when multiple targets are part of the same interaction.", "guessedname": "overlap", "guessedtype": "property"}, "minX": {"guessedname": "minX", "type": "int", "description": "The left constraint", "private": "", "guessedtype": "property"}, "minY": {"guessedname": "minY", "type": "int", "description": "The up constraint", "private": "", "guessedtype": "property"}, "invalidHandleIds": {"type": "{string: string}", "description": "An associative array of ids for elements that will be ignored if clicked", "guessedname": "invalidHandleIds", "guessedtype": "property"}, "config": {"type": "object", "description": "Configuration attributes passed into the constructor", "guessedname": "config", "guessedtype": "property"}, "dragElId": {"guessedname": "dragElId", "type": "String", "description": "The id of the element that will be dragged.  By default this is same \nas the linked element , but could be changed to another element. Ex: \nYAHOO.util.DDProxy", "private": "", "guessedtype": "property"}, "available": {"type": "boolean", "description": "The availabe property is false until the linked dom element is accessible.", "guessedname": "available", "guessedtype": "property"}, "invalidHandleClasses": {"type": "string[]", "description": "An indexted array of css class names for elements that will be ignored\nif clicked.", "guessedname": "invalidHandleClasses", "guessedtype": "property"}, "isTarget": {"type": "boolean", "description": "By default, all instances can be a drop target.  This can be disabled by\nsetting isTarget to false.", "guessedname": "isTarget", "guessedtype": "property"}, "invalidHandleTypes": {"type": "{string: string}", "description": "An associative array of HTML tags that will be ignored if clicked.", "guessedname": "invalidHandleTypes", "guessedtype": "property"}, "startPageX": {"guessedname": "startPageX", "type": "int", "description": "The linked element's absolute X position at the time the drag was \nstarted", "private": "", "guessedtype": "property"}, "cursorIsOver": {"type": "boolean", "description": "Property that is assigned to a drag and drop object when testing to\nsee if it is being targeted by another dd object.  This property\ncan be used in intersect mode to help determine the focus of\nthe mouse interaction.  DDM.getBestMatch uses this property first to\ndetermine the closest match in INTERSECT mode when multiple targets\nare part of the same interaction.", "guessedname": "cursorIsOver", "guessedtype": "property"}, "constrainY": {"guessedname": "constrainY", "type": "boolean", "description": "Set to true when vertical contraints are applied", "private": "", "guessedtype": "property"}, "constrainX": {"guessedname": "constrainX", "type": "boolean", "description": "Set to true when horizontal contraints are applied", "private": "", "guessedtype": "property"}, "padding": {"type": "int[]", "description": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.", "guessedname": "padding", "guessedtype": "property"}, "dragOnly": {"type": "Boolean", "description": "If this flag is true, do not fire drop events. The element is a drag only element (for movement not dropping)", "guessedname": "dragOnly", "guessedtype": "property"}, "groups": {"type": "{string: string}", "description": "The group defines a logical collection of DragDrop objects that are \nrelated.  Instances only get events when interacting with other \nDragDrop object in the same group.  This lets us define multiple \ngroups using a single DragDrop subclass if we want.", "guessedname": "groups", "guessedtype": "property"}, "maintainOffset": {"type": "boolean", "description": "Maintain offsets when we resetconstraints.  Set to true when you want\nthe position of the element relative to its parent to stay the same\nwhen the page changes", "guessedname": "maintainOffset", "guessedtype": "property"}, "handleElId": {"guessedname": "handleElId", "type": "String", "description": "the id of the element that initiates the drag operation.  By default \nthis is the linked element, but could be changed to be a child of this\nelement.  This lets us do things like only starting the drag when the \nheader element within the linked html element is clicked.", "private": "", "guessedtype": "property"}, "xTicks": {"type": "int[]", "description": "Array of pixel locations the element will snap to if we specified a \nhorizontal graduation\/interval.  This array is generated automatically\nwhen you define a tick interval.", "guessedname": "xTicks", "guessedtype": "property"}, "locked": {"guessedname": "locked", "type": "boolean", "description": "Individual drag\/drop instances can be locked.  This will prevent \nonmousedown start drag.", "private": "", "guessedtype": "property"}, "primaryButtonOnly": {"type": "boolean", "description": "By default the drag and drop instance will only respond to the primary\nbutton click (left button for a right-handed mouse).  Set to true to\nallow drag and drop to start with any mouse click that is propogated\nby the browser", "guessedname": "primaryButtonOnly", "guessedtype": "property"}}, "description": "Defines the interface and base operation of items that that can be \ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver, onDragOut.\nUp to three html elements can be associated with a DragDrop instance:\n<ul>\n<li>linked element: the element that is passed into the constructor.\nThis is the element which defines the boundaries for interaction with \nother DragDrop objects.<\/li>\n<li>handle element(s): The drag operation only occurs if the element that \nwas clicked matches a handle element.  By default this is the linked \nelement, but there are times that you will want only a portion of the \nlinked element to initiate the drag operation, and the setHandleElId() \nmethod provides a way to define this.<\/li>\n<li>drag element: this represents an the element that would be moved along\nwith the cursor during a drag operation.  By default, this is the linked\nelement itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define\na separate element that would be moved, as in {@link YAHOO.util.DDProxy}\n<\/li>\n<\/ul>\nThis class should not be instantiated until the onload event to ensure that\nthe associated elements are available.\nThe following would define a DragDrop obj that would interact with any \nother DragDrop obj in the \"group1\" group:\n<pre>\ndd = new YAHOO.util.DragDrop(\"div1\", \"group1\");\n<\/pre>\nSince none of the event handlers have been implemented, nothing would \nactually happen if you were to run the code above.  Normally you would \noverride this class or one of the default implementations, but you can \nalso override the methods you want on an instance of the class...\n<pre>\ndd.onDragDrop = function(e, id) {\n&nbsp;&nbsp;alert(\"dd was dropped on \" + id);\n}\n<\/pre>"}, "YAHOO.widget.ColumnSet": {"name": "YAHOO.widget.ColumnSet", "constructors": [{"params": [{"type": "Object[]", "name": "aHeaders", "description": "  Array of object literals that define header cells."}], "description": "The ColumnSet class defines and manages a DataTable's Columns,\r\nincluding nested hierarchies and access to individual Column instances."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "ColumnSet", "methods": {"getColumn": {"return": {"type": "YAHOO.widget.Column", "description": "Column instance."}, "params": [{"type": "String | Number", "name": "column", "description": "  Column key or ColumnSet key index."}], "description": "Returns Column instance with given key or ColumnSet key index.", "guessedname": "getColumn", "guessedtype": "function"}, "getColumnById": {"return": {"type": "YAHOO.widget.Column", "description": "Column instance."}, "params": [{"type": "String", "name": "column", "description": "  Column ID."}], "description": "Returns Column instance with given ID.", "guessedname": "getColumnById", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the ColumnSet instance."}, "description": "Public accessor to the unique name of the ColumnSet instance.", "guessedname": "toString", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "ColumnSet.js", "guessedtype": "function", "shortname": "ColumnSet", "properties": {"flat": {"default": "[]", "type": "YAHOO.widget.Column[]", "description": "Flattened representation of all Columns.", "guessedname": "flat", "guessedtype": "property"}, "keys": {"default": "[]", "type": "YAHOO.widget.Column[]", "description": "Array of Columns that map one-to-one to a table column.", "guessedname": "keys", "guessedtype": "property"}, "tree": {"type": "YAHOO.widget.Column[]", "description": "Top-down tree representation of Column hierarchy.", "guessedname": "tree", "guessedtype": "property"}, "ColumnSet._nCount": {"description": "Internal class variable to index multiple ColumnSet instances.", "private": "", "static": "", "guessedname": "_nCount", "guessedtype": "property", "type": "Number"}, "headers": {"default": "[]", "type": "String[]", "description": "ID index of nested parent hierarchies for HEADERS accessibility attribute.", "guessedname": "headers", "guessedtype": "property"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Unique instance name.", "private": "", "guessedtype": "property"}}, "description": "The ColumnSet class defines and manages a DataTable's Columns,\r\nincluding nested hierarchies and access to individual Column instances."}, "YAHOO": {"name": "YAHOO", "description": "The YAHOO global namespace object.  If YAHOO is already defined, the\nexisting YAHOO object will not be overwritten so that defined\nnamespaces are preserved.", "namespace": "", "module": "yahoo", "guessedname": "YAHOO", "static": "", "file": "YAHOO.js", "guessedtype": "property", "shortname": "YAHOO", "methods": {"register": {"static": "", "params": [{"type": "String", "name": "name", "description": "    the name of the module (event, slider, etc)"}, {"type": "Function", "name": "mainClass", "description": " a reference to class in the module.  This\nclass will be tagged with the version info\nso that it will be possible to identify the\nversion that is in use when multiple versions\nhave loaded"}, {"type": "Object", "name": "data", "description": "      metadata object for the module.  Currently it\nis expected to contain a \"version\" property\nand a \"build\" property at minimum."}], "description": "Registers a module with the YAHOO object", "guessedname": "register", "guessedtype": "function"}, "namespace": {"return": {"type": "Object", "description": "A reference to the last namespace object created"}, "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYAHOO.namespace(\"property.package\");\nYAHOO.namespace(\"YAHOO.property.package\");\n<\/pre>\nEither of the above would create YAHOO.property, then\nYAHOO.property.package\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYAHOO.namespace(\"really.long.nested.namespace\");\n<\/pre>\nThis fails because \"long\" is a future reserved word in ECMAScript", "static": "", "guessedname": "namespace", "guessedtype": "function", "params": [{"type": "String*", "name": "arguments", "description": " 1-n namespaces to create"}]}, "extend": {"static": "", "params": [{"type": "Function", "name": "subc", "description": "   the object to modify"}, {"type": "Function", "name": "superc", "description": " the object to inherit"}, {"type": "Object", "name": "overrides", "description": "  additional properties\/methods to add to the\nsubclass prototype.  These will override the\nmatching items obtained from the superclass if present."}], "description": "An alias for <a href=\"YAHOO.lang.html#extend\">YAHOO.lang.extend<\/a>", "guessedname": "extend", "guessedtype": "property"}, "augment": {"static": "", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*", "name": "arguments", "description": " zero or more properties methods to \naugment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver"}], "description": "An alias for <a href=\"YAHOO.lang.html#augment\">YAHOO.lang.augment<\/a>", "guessedname": "augment", "guessedtype": "property"}, "log": {"return": {"type": "Boolean", "description": "True if the log operation was successful."}, "description": "Uses YAHOO.widget.Logger to output a log message, if the widget is\navailable.", "static": "", "guessedname": "log", "guessedtype": "function", "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)"}]}}}, "YAHOO.util.Anim": {"name": "YAHOO.util.Anim", "constructors": [{"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Base animation class that provides the interface for building animated effects.\n<p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);<\/p>"}], "namespace": "YAHOO.util", "module": "animation", "events": {"onComplete": {"description": "Custom event that fires when animation ends\nListen via subscribe method (e.g. myAnim.onComplete.subscribe(someFunction)", "guessedname": "onComplete", "guessedtype": "property"}, "onStart": {"description": "Custom event that fires when animation begins\nListen via subscribe method (e.g. myAnim.onStart.subscribe(someFunction)", "guessedname": "onStart", "guessedtype": "property"}, "onTween": {"description": "Custom event that fires between each frame\nListen via subscribe method (e.g. myAnim.onTween.subscribe(someFunction)", "guessedname": "onTween", "guessedtype": "property"}}, "guessedname": "Anim", "methods": {"isAnimated": {"return": {"type": "Boolean", "description": "current value of isAnimated."}, "description": "Checks whether the element is currently animated.", "guessedname": "isAnimated", "guessedtype": "function"}, "setEl": {"description": "Changes the animated element", "guessedname": "setEl", "guessedtype": "function"}, "getAttribute": {"return": {"type": "Number", "description": "val The current value of the attribute."}, "params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}], "description": "Returns current value of the attribute.", "guessedname": "getAttribute", "guessedtype": "function"}, "setAttribute": {"params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}, {"type": "Number", "name": "val", "description": " The value to be applied to the attribute."}, {"type": "String", "name": "unit", "description": " The unit ('px', '%', etc.) of the value."}], "description": "Applies a value to an attribute.", "guessedname": "setAttribute", "guessedtype": "function"}, "onTween": {"private": "", "description": "Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s).", "guessedname": "onTween", "guessedtype": "function"}, "doMethod": {"return": {"type": "Number", "description": "The Value to be applied to the attribute."}, "params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}, {"type": "Number", "name": "start", "description": " The value this attribute should start from for this animation."}, {"type": "Number", "name": "end", "description": "  The value this attribute should end at for this animation."}], "description": "Returns the value computed by the animation's \"method\".", "guessedname": "doMethod", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": ""}, "description": "Returns a reference to the animated element.", "guessedname": "getEl", "guessedtype": "function"}, "setRuntimeAttribute": {"guessedname": "setRuntimeAttribute", "params": [{"type": "Object", "name": "attr", "description": " The attribute object"}], "description": "Sets the actual values to be used during the animation.  Should only be needed for subclass use.", "private": "", "guessedtype": "function"}, "stop": {"params": [{"type": "Boolean", "name": "finish", "description": " (optional) If true, animation will jump to final frame."}], "description": "Stops the animation.  Normally called by AnimMgr when animation completes.", "guessedname": "stop", "guessedtype": "function"}, "init": {"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Constructor for Anim instance.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Provides a readable name for the Anim instance.", "guessedname": "toString", "guessedtype": "function"}, "getDefaultUnit": {"return": {"type": "String", "description": "The default unit to be used."}, "params": [{"type": "attr", "name": "attr", "description": " The name of the attribute."}], "description": "Returns the unit to use when none is supplied.", "guessedname": "getDefaultUnit", "guessedtype": "function"}, "animate": {"description": "Starts the animation by registering it with the animation manager.", "guessedname": "animate", "guessedtype": "function"}, "getStartTime": {"return": {"type": "Date", "description": "current value of startTime."}, "description": "Returns the animation start time.", "guessedname": "getStartTime", "guessedtype": "function"}}, "file": "Anim.js", "guessedtype": "function", "shortname": "Anim", "requires": "YAHOO.util.AnimMgr", "properties": {"isAnimated": {"guessedname": "isAnimated", "type": "Boolean", "description": "Whether or not the animation is running.", "private": "", "guessedtype": "property"}, "_onTween": {"private": "", "description": "Custom event that fires after onTween", "guessedname": "_onTween", "guessedtype": "property"}, "el": {"guessedname": "el", "type": "HTMLElement", "description": "The element to be animated.", "private": "", "guessedtype": "property"}, "actualFrames": {"guessedname": "actualFrames", "type": "Int", "description": "The number of frames this animation was able to execute.", "private": "", "guessedtype": "property"}, "useSeconds": {"type": "Boolean", "description": "Whether or not the duration should be treated as seconds.\nDefaults to true.", "guessedname": "useSeconds", "guessedtype": "property"}, "totalFrames": {"type": "Int", "description": "The total number of frames to be executed.\nIn time-based animations, this is used by AnimMgr to ensure the animation finishes on time.", "guessedname": "totalFrames", "guessedtype": "property"}, "_onStart": {"private": "", "description": "Custom event that fires after onStart, useful in subclassing", "guessedname": "_onStart", "guessedtype": "property"}, "_onComplete": {"private": "", "description": "Custom event that fires after onComplete", "guessedname": "_onComplete", "guessedtype": "property"}, "startTime": {"guessedname": "startTime", "type": "Date", "description": "A Date object that is created when the animation begins.", "private": "", "guessedtype": "property"}, "duration": {"type": "Number", "description": "The length of the animation.  Defaults to \"1\" (second).", "guessedname": "duration", "guessedtype": "property"}, "attributes": {"type": "Object", "description": "The collection of attributes to be animated.  \nEach attribute must have at least a \"to\" or \"by\" defined in order to animate.  \nIf \"to\" is supplied, the animation will end with the attribute at that value.  \nIf \"by\" is supplied, the animation will end at that value plus its starting value. \nIf both are supplied, \"to\" is used, and \"by\" is ignored. \nOptional additional member include \"from\" (the value the attribute should start animating from, defaults to current value), and \"unit\" (the units to apply to the values).", "guessedname": "attributes", "guessedtype": "property"}, "method": {"type": "Function", "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"YAHOO.util.Easing.easeNone\".", "guessedname": "method", "guessedtype": "property"}, "currentFrame": {"type": "Int", "description": "The location of the current animation on the timeline.\nIn time-based animations, this is used by AnimMgr to ensure the animation finishes on time.", "guessedname": "currentFrame", "guessedtype": "property"}}, "description": "Base animation class that provides the interface for building animated effects.\n<p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);<\/p>"}, "YAHOO.util.Sort": {"name": "YAHOO.util.Sort", "namespace": "YAHOO.util", "module": "datatable", "guessedname": "Sort", "methods": {"compare": {"params": [{"type": "Object", "name": "a", "description": "  First sort argument."}, {"type": "Object", "name": "b", "description": "  Second sort argument."}, {"type": "Boolean", "name": "desc", "description": "  True if sort direction is descending, false if\r\nsort direction is ascending."}], "description": "Comparator function for simple case-insensitive string sorting.", "guessedname": "compare", "guessedtype": "function"}}, "static": "", "file": "ColumnSet.js", "guessedtype": "property", "shortname": "Sort", "description": "Sort static utility to support Column sorting."}, "YAHOO.util.UserAction": {"name": "YAHOO.util.UserAction", "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "UserAction", "methods": {"fireKeyEvent": {"description": "Fires an event that normally would be fired by the keyboard (keyup,\nkeydown, keypress). Make sure to specify either keyCode or charCode as\nan option.", "private": "", "static": "", "guessedname": "fireKeyEvent", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": " The type of event (\"keyup\", \"keydown\" or \"keypress\")."}, {"type": "HTMLElement", "name": "target", "description": " The target of the event."}, {"type": "Object", "name": "options", "description": " Options for the event. Either keyCode or charCode\nare required."}]}, "mouseEvent": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to click on."}, {"type": "String", "name": "type", "description": " The type of event to fire. This can be any one of\nthe following: click, dblclick, mousedown, mouseup, mouseout,\nmouseover, and mousemove."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouse event on a particular element.", "guessedname": "fireMouseEvent", "guessedtype": "function"}, "keypress": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a keypress on a particular element.", "guessedname": "keypress", "guessedtype": "function"}, "keyup": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a keyup event on a particular element.", "guessedname": "keyup", "guessedtype": "function"}, "mouseup": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouseup on a particular element.", "guessedname": "mouseup", "guessedtype": "function"}, "keydown": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a keydown event on a particular element.", "guessedname": "keydown", "guessedtype": "function"}, "mousemove": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mousemove on a particular element.", "guessedname": "mousemove", "guessedtype": "function"}, "simulateMouseEvent": {"description": "Simulates a mouse event using the given event information to populate\nthe generated event object. This method does browser-equalizing\ncalculations to account for differences in the DOM and IE event models\nas well as different browser quirks.", "private": "", "static": "", "guessedname": "simulateMouseEvent", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "target", "description": " The target of the given event."}, {"type": "String", "name": "type", "description": " The type of event to fire. This can be any one of\nthe following: click, dblclick, mousedown, mouseup, mouseout,\nmouseover, and mousemove."}, {"type": "Boolean", "name": "bubbles", "description": " (Optional) Indicates if the event can be\nbubbled up. DOM Level 2 specifies that all mouse events bubble by\ndefault. The default is true."}, {"type": "Boolean", "name": "cancelable", "description": " (Optional) Indicates if the event can be\ncanceled using preventDefault(). DOM Level 2 specifies that all\nmouse events except mousemove can be cancelled. The default \nis true for all events except mousemove, for which the default \nis false."}, {"type": "Window", "name": "view", "description": " (Optional) The view containing the target. This is\ntypically the window object. The default is window."}, {"type": "int", "name": "detail", "description": " (Optional) The number of times the mouse button has\nbeen used. The default value is 1."}, {"type": "int", "name": "screenX", "description": " (Optional) The x-coordinate on the screen at which\npoint the event occured. The default is 0."}, {"type": "int", "name": "screenY", "description": " (Optional) The y-coordinate on the screen at which\npoint the event occured. The default is 0."}, {"type": "int", "name": "clientX", "description": " (Optional) The x-coordinate on the client at which\npoint the event occured. The default is 0."}, {"type": "int", "name": "clientY", "description": " (Optional) The y-coordinate on the client at which\npoint the event occured. The default is 0."}, {"type": "Boolean", "name": "ctrlKey", "description": " (Optional) Indicates if one of the CTRL keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "altKey", "description": " (Optional) Indicates if one of the ALT keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "shiftKey", "description": " (Optional) Indicates if one of the SHIFT keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "metaKey", "description": " (Optional) Indicates if one of the META keys\nis pressed while the event is firing. The default is false."}, {"type": "int", "name": "button", "description": " (Optional) The button being pressed while the event\nis executing. The value should be 0 for the primary mouse button\n(typically the left button), 1 for the terciary mouse button\n(typically the middle button), and 2 for the secondary mouse button\n(typically the right button). The default is 0."}, {"type": "HTMLElement", "name": "relatedTarget", "description": " (Optional) For mouseout events,\nthis is the element that the mouse has moved to. For mouseover\nevents, this is the element that the mouse has moved from. This\nargument is ignored for all other events. The default is null."}]}, "mousedown": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mousedown on a particular element.", "guessedname": "mousedown", "guessedtype": "function"}, "mouseout": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouseout event on a particular element. Use \"relatedTarget\"\non the options object to specify where the mouse moved to.\nQuirks: Firefox less than 2.0 doesn't set relatedTarget properly, so\ntoElement is assigned in its place. IE doesn't allow toElement to be\nbe assigned, so relatedTarget is assigned in its place. Both of these\nconcessions allow YAHOO.util.Event.getRelatedTarget() to work correctly\nin both browsers.", "guessedname": "mouseout", "guessedtype": "function"}, "simulateKeyEvent": {"description": "Simulates a key event using the given event information to populate\nthe generated event object. This method does browser-equalizing\ncalculations to account for differences in the DOM and IE event models\nas well as different browser quirks. Note: keydown causes Safari 2.x to\ncrash.", "private": "", "static": "", "guessedname": "simulateKeyEvent", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "target", "description": " The target of the given event."}, {"type": "String", "name": "type", "description": " The type of event to fire. This can be any one of\nthe following: keyup, keydown, and keypress."}, {"type": "Boolean", "name": "bubbles", "description": " (Optional) Indicates if the event can be\nbubbled up. DOM Level 3 specifies that all key events bubble by\ndefault. The default is true."}, {"type": "Boolean", "name": "cancelable", "description": " (Optional) Indicates if the event can be\ncanceled using preventDefault(). DOM Level 3 specifies that all\nkey events can be cancelled. The default \nis true."}, {"type": "Window", "name": "view", "description": " (Optional) The view containing the target. This is\ntypically the window object. The default is window."}, {"type": "Boolean", "name": "ctrlKey", "description": " (Optional) Indicates if one of the CTRL keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "altKey", "description": " (Optional) Indicates if one of the ALT keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "shiftKey", "description": " (Optional) Indicates if one of the SHIFT keys\nis pressed while the event is firing. The default is false."}, {"type": "Boolean", "name": "metaKey", "description": " (Optional) Indicates if one of the META keys\nis pressed while the event is firing. The default is false."}, {"type": "int", "name": "keyCode", "description": " (Optional) The code for the key that is in use. \nThe default is 0."}, {"type": "int", "name": "charCode", "description": " (Optional) The Unicode code for the character\nassociated with the key being used. The default is 0."}]}, "mouseover": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouseover event on a particular element. Use \"relatedTarget\"\non the options object to specify where the mouse moved from.\nQuirks: Firefox less than 2.0 doesn't set relatedTarget properly, so\nfromElement is assigned in its place. IE doesn't allow fromElement to be\nbe assigned, so relatedTarget is assigned in its place. Both of these\nconcessions allow YAHOO.util.Event.getRelatedTarget() to work correctly\nin both browsers.", "guessedname": "mouseover", "guessedtype": "function"}, "click": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to click on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a click on a particular element.", "guessedname": "click", "guessedtype": "function"}, "dblclick": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to double click on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a double click on a particular element.", "guessedname": "dblclick", "guessedtype": "function"}}, "static": "", "file": "UserAction.js", "guessedtype": "property", "shortname": "UserAction", "description": "The UserAction object provides functions that simulate events occurring in\nthe browser. Since these are simulated events, they do not behave exactly\nas regular, user-initiated events do, but can be used to test simple\nuser interactions safely."}, "YAHOO.widget.Tab": {"name": "YAHOO.widget.Tab", "configs": {"disabled": {"type": "Boolean", "description": "Whether or not the tab is disabled."}, "dataTimeout": {"default": "null", "type": "Number", "description": "Number if milliseconds before aborting and calling failure handler."}, "contentEl": {"type": "HTMLElement", "description": "The HTMLElement that contains the tab's content."}, "href": {"default": "'#'", "type": "String", "description": "The href of the tab's anchor element."}, "cacheData": {"default": "false", "type": "Boolean", "description": "Whether or not content should be reloaded for every view."}, "dataSrc": {"type": "String", "description": "The tab's data source, used for loading content dynamically."}, "label": {"type": "String", "description": "The tab's label text (or innerHTML)."}, "content": {"type": "String", "description": "The tab's content."}, "loadMethod": {"default": "\"GET\"", "type": "String", "description": "The method to use for the data request."}, "contentVisible": {"default": "false", "type": "Boolean", "description": "The Whether or not the tab's content is visible."}, "activationEvent": {"type": "String", "description": "The event that triggers the tab's activation."}, "active": {"type": "Boolean", "description": "Whether or not the tab is currently active.\nIf a dataSrc is set for the tab, the content will be loaded from\nthe given source."}, "labelEl": {"type": "HTMLElement", "description": "The element that contains the tab's label."}, "dataLoaded": {"type": "Boolean", "description": "Whether or not any data has been loaded from the server."}}, "constructors": [{"params": [{"type": "HTMLElement | String", "name": "element", "description": "  (optional) The html element that \nrepresents the TabView. An element will be created if none provided."}, {"type": "Object", "name": "properties", "description": " A key map of initial properties"}], "description": "A representation of a Tab's label and content."}], "namespace": "YAHOO.widget", "module": "tabview", "events": {"contentChange": {"description": "Fires after the tab content is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> contentChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the previous value<br>\n<code>&lt;Boolean&gt;\nnewValue<\/code> the updated value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('contentChange', handler);<\/code><\/p>"}, "activeChange": {"description": "Fires after the active state is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> activeChange<br>\n<code>&lt;Boolean&gt;\nprevValue<\/code> the previous value<br>\n<code>&lt;Boolean&gt;\nnewValue<\/code> the updated value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('activeChange', handler);<\/code><\/p>"}, "beforeContentChange": {"description": "Fires before the tab content is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeContentChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the current value<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeContentChange', handler);<\/code><\/p>"}, "beforeActiveChange": {"description": "Fires before the active state is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeActiveChange<br>\n<code>&lt;Boolean&gt;\nprevValue<\/code> the current value<br>\n<code>&lt;Boolean&gt;\nnewValue<\/code> the new value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeActiveChange', handler);<\/code><\/p>"}, "labelChange": {"description": "Fires after the tab label is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> labelChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the previous value<br>\n<code>&lt;String&gt;\nnewValue<\/code> the updated value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('labelChange', handler);<\/code><\/p>"}, "beforeLabelChange": {"description": "Fires before the tab label is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeLabelChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the current value<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeLabelChange', handler);<\/code><\/p>"}}, "guessedname": "Tab", "methods": {"initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Hash of initial attributes"}], "description": "setAttributeConfigs TabView specific properties.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String"}, "description": "Provides a readable name for the tab.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "Tab.js", "guessedtype": "function", "shortname": "Tab", "properties": {"DISABLED_CLASSNAME": {"default": "\"disabled\"", "type": "String", "description": "The class name applied to disabled tabs.", "guessedname": "DISABLED_CLASSNAME", "guessedtype": "property"}, "LOADING_CLASSNAME": {"default": "\"disabled\"", "type": "String", "description": "The class name applied to dynamic tabs while loading.", "guessedname": "LOADING_CLASSNAME", "guessedtype": "property"}, "LABEL_INNER_TAGNAME": {"default": "\"em\"", "type": "String", "description": "The default tag name for a Tab's inner element.", "guessedname": "LABEL_TAGNAME", "guessedtype": "property"}, "ACTIVE_CLASSNAME": {"default": "\"selected\"", "type": "String", "description": "The class name applied to active tabs.", "guessedname": "ACTIVE_CLASSNAME", "guessedtype": "property"}, "loadHandler": {"type": "object", "description": "Object containing success and failure callbacks for loading data.", "guessedname": "loadHandler", "guessedtype": "property"}, "dataConnection": {"type": "Object", "description": "Provides a reference to the connection request object when data is\nloaded dynamically.", "guessedname": "dataConnection", "guessedtype": "property"}}, "description": "A representation of a Tab's label and content."}, "YAHOO.widget.Menu": {"name": "YAHOO.widget.Menu", "configs": {"constraintoviewport": {"default": "true", "type": "Boolean", "description": "Boolean indicating if the menu will try to remain inside \nthe boundaries of the size of viewport.  This property is only applied \nwhen the \"position\" configuration property is set to dynamic and is \nautomatically applied to all submenus."}, "maxheight": {"default": "0", "type": "Number", "description": "Number defining the maximum height (in pixels) for a menu's \nbody element (<code>&#60;div class=\"bd\"&#60;<\/code>).  Once a menu's body \nexceeds this height, the contents of the body are scrolled to maintain \nthis value.  This value cannot be set lower than the value of the \n\"minscrollheight\" configuration property."}, "classname": {"default": "null", "type": "String", "description": "String representing the CSS class to be applied to the \nmenu's root <code>&#60;div&#62;<\/code> element.  The specified class(es)  \nare appended in addition to the default class as specified by the menu's\nCSS_CLASS_NAME constant. When set this property is automatically \napplied to all submenus."}, "visible": {"default": "false", "type": "Boolean", "description": "Boolean indicating whether or not the menu is visible.  If \nthe menu's \"position\" configuration property is set to \"dynamic\" (the \ndefault), this property toggles the menu's <code>&#60;div&#62;<\/code> \nelement's \"visibility\" style property between \"visible\" (true) or \n\"hidden\" (false).  If the menu's \"position\" configuration property is \nset to \"static\" this property toggles the menu's \n<code>&#60;div&#62;<\/code> element's \"display\" style property \nbetween \"block\" (true) or \"none\" (false)."}, "xy": {"default": "null", "type": "Number[]", "description": "Array of the absolute x and y positions of the Menu.  This \nproperty is only applied when the \"position\" configuration property is \nset to dynamic."}, "container": {"default": "document.body", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>|String", "description": "HTML element reference or string specifying the id \nattribute of the HTML element that the menu's markup should be \nrendered into."}, "scrollincrement": {"default": "1", "type": "Number", "description": "Number used to control the scroll speed of a menu.  Used to \nincrement the \"scrollTop\" property of the menu's body by when a menu's \ncontent is scrolling.  When set this property is automatically applied \nto all submenus."}, "zindex": {"default": "null", "type": "Number", "description": "Number representing the CSS z-index of the Menu.  This \nproperty is only applied when the \"position\" configuration property is \nset to dynamic."}, "minscrollheight": {"default": "90", "type": "Number", "description": "Number defining the minimum threshold for the \"maxheight\" \nconfiguration property.  When set this property is automatically applied \nto all submenus."}, "fixedcenter": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the Menu should be anchored to the \ncenter of the viewport.  This property is only applied when the \n\"position\" configuration property is set to dynamic."}, "autosubmenudisplay": {"default": "true", "type": "Boolean", "description": "Boolean indicating if submenus are automatically made \nvisible when the user mouses over the menu's items."}, "context": {"default": "null", "type": "Array", "description": "Array of context arguments for context-sensitive positioning.  \nThe format is: [id or element, element corner, context corner]. \nFor example, setting this property to [\"img1\", \"tl\", \"bl\"] would \nalign the Mnu's top left corner to the context element's \nbottom left corner.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic."}, "clicktohide": {"default": "true", "type": "Boolean", "description": "Boolean indicating if the menu will automatically be \nhidden if the user clicks outside of it.  This property is only \napplied when the \"position\" configuration property is set to dynamic \nand is automatically applied to all submenus."}, "submenualignment": {"default": "[\"tl\",\"tr\"]", "type": "Array", "description": "Array defining how submenus should be aligned to their \nparent menu item. The format is: [itemCorner, submenuCorner]. By default\na submenu's top left corner is aligned to its parent menu item's top \nright corner."}, "disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu should be disabled.  \nDisabling a menu disables each of its items.  (Disabled menu items are \ndimmed and will not respond to user input or fire events.)  Disabled\nmenus have a corresponding \"disabled\" CSS class applied to their root\n<code>&#60;div&#62;<\/code> element."}, "effect": {"default": "null", "type": "Object", "description": "Object or array of objects representing the ContainerEffect \nclasses that are active for animating the container.  When set this \nproperty is automatically applied to all submenus."}, "showdelay": {"default": "250", "type": "Number", "description": "Number indicating the time (in milliseconds) that should \nexpire before a submenu is made visible when the user mouses over \nthe menu's items.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic and is automatically applied \nto all submenus."}, "x": {"default": "null", "type": "Number", "description": "Number representing the absolute x-coordinate position of \nthe Menu.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic."}, "hidedelay": {"default": "0", "type": "Number", "description": "Number indicating the time (in milliseconds) that should \nexpire before the menu is hidden.  This property is only applied when \nthe \"position\" configuration property is set to dynamic and is \nautomatically applied to all submenus."}, "submenuhidedelay": {"default": "250", "type": "Number", "description": "Number indicating the time (in milliseconds) that should \nexpire before a submenu is hidden when the user mouses out of a menu item \nheading in the direction of a submenu.  The value must be greater than or \nequal to the value specified for the \"showdelay\" configuration property.\nThis property is only applied when the \"position\" configuration property \nis set to dynamic and is automatically applied to all submenus."}, "iframe": {"default": "true for IE6 and below, false for all other browsers.", "type": "Boolean", "description": "Boolean indicating whether or not the Menu should \nhave an IFRAME shim; used to prevent SELECT elements from \npoking through an Overlay instance in IE6.  When set to \"true\", \nthe iframe shim is created when the Menu instance is intially\nmade visible.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic and is automatically applied \nto all submenus."}, "y": {"default": "null", "type": "Number", "description": "Number representing the absolute y-coordinate position of \nthe Menu.  This property is only applied when the \"position\" \nconfiguration property is set to dynamic."}, "position": {"default": "dynamic", "type": "String", "description": "String indicating how a menu should be positioned on the \nscreen.  Possible values are \"static\" and \"dynamic.\"  Static menus are \nvisible by default and reside in the normal flow of the document \n(CSS position: static).  Dynamic menus are hidden by default, reside \nout of the normal flow of the document (CSS position: absolute), and \ncan overlay other elements on the screen."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source \nfor the menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;<\/code> element of the menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " \nObject specifying the <code>&#60;select&#62;<\/code> element to be used as \nthe data source for the menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu. See configuration class documentation for \nmore details."}], "description": "The Menu class creates a container that holds a vertical list representing \na set of options or commands.  Menu is the base class for all \nmenu containers."}], "namespace": "YAHOO.widget", "module": "menu", "events": {"mouseOutEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the mouse has left the menu.  Passes back the DOM \nEvent object as an argument.", "guessedname": "mouseOutEvent", "guessedtype": "property"}, "mouseUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a mouse button while the mouse is \nover the menu.  Passes back the DOM Event object as an argument.", "guessedname": "mouseUpEvent", "guessedtype": "property"}, "keyUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a key when one of the menu's items \nhas focus.  Passes back the DOM Event object as an argument.", "guessedname": "keyUpEvent", "guessedtype": "property"}, "keyPressEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses an alphanumeric key when one of the\nmenu's items has focus.  Passes back the DOM Event object as an argument.", "guessedname": "keyPressEvent", "guessedtype": "property"}, "itemAddedEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when an item is added to the menu.", "guessedname": "itemAddedEvent", "guessedtype": "property"}, "mouseOverEvent": {"description": "Fires when the mouse has entered the menu.  Passes back \nthe DOM Event object as an argument.", "guessedname": "mouseOverEvent", "guessedtype": "property"}, "itemRemovedEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when an item is removed to the menu.", "guessedname": "itemRemovedEvent", "guessedtype": "property"}, "mouseDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user mouses down on the menu.  Passes back the \nDOM Event object as an argument.", "guessedname": "mouseDownEvent", "guessedtype": "property"}, "clickEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user clicks the on the menu.  Passes back the \nDOM Event object as an argument.", "guessedname": "clickEvent", "guessedtype": "property"}, "keyDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses a key when one of the menu's items \nhas focus.  Passes back the DOM Event object as an argument.", "guessedname": "keyDownEvent", "guessedtype": "property"}}, "guessedname": "Menu", "methods": {"_onRender": {"guessedname": "_onRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"render\" event handler for the menu.", "private": "", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu.", "guessedname": "toString", "guessedtype": "function"}, "_onMenuItemBlur": {"guessedname": "_onMenuItemBlur", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"blur\" event handler for the menu's items.", "private": "", "guessedtype": "function"}, "configMaxHeight": {"params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " The Menu instance fired\nthe event."}], "description": "Event handler for when the \"maxheight\" configuration property of \na Menu changes.", "guessedname": "configMaxHeight", "guessedtype": "function"}, "configDisabled": {"params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " The Menu instance fired the event."}], "description": "Event handler for when the \"disabled\" configuration property of \na menu changes.", "guessedname": "configDisabled", "guessedtype": "function"}, "getSubmenus": {"return": {"type": "Array", "description": ""}, "description": "Returns an array of all of the submenus that are immediate \nchildren of the menu.", "guessedname": "getSubmenus", "guessedtype": "function"}, "_onVisibleChange": {"guessedname": "_onVisibleChange", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "Change event handler for the the menu's \"visible\" configuration\nproperty.", "private": "", "guessedtype": "function"}, "positionOffScreen": {"description": "Positions the menu outside of the boundaries of the browser's \nviewport.  Called automatically when a menu is hidden to ensure that \nit doesn't force the browser to render uncessary scrollbars.", "guessedname": "positionOffScreen", "guessedtype": "function"}, "_onMenuItemDestroy": {"guessedname": "_onMenuItemDestroy", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item \nthat fired the event."}], "description": "\"destroy\" event handler for the menu's items.", "private": "", "guessedtype": "function"}, "getItemGroups": {"return": {"type": "Array", "description": ""}, "description": "Multi-dimensional Array representing the menu items as they \nare grouped in the menu.", "guessedname": "getItemGroups", "guessedtype": "function"}, "destroy": {"description": "Removes the menu's <code>&#60;div&#62;<\/code> element \n(and accompanying child nodes) from the document.", "guessedname": "destroy", "guessedtype": "function"}, "_onBeforeRender": {"guessedname": "_onBeforeRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"beforerender\" event handler for the menu.  Appends all of the \n<code>&#60;ul&#62;<\/code>, <code>&#60;li&#62;<\/code> and their accompanying \ntitle elements to the body element of the menu.", "private": "", "guessedtype": "function"}, "_cancelShowDelay": {"description": "Cancels the call to the \"showMenu.\"", "private": "", "guessedname": "_cancelShowDelay", "guessedtype": "function"}, "_getItemGroup": {"return": {"type": "Array", "description": ""}, "description": "Returns the menu item group at the specified index.", "private": "", "params": [{"type": "Number", "name": "p_nIndex", "description": " Number indicating the index of the menu item group \nto be retrieved."}], "guessedname": "_getItemGroup", "guessedtype": "function"}, "setInitialSelection": {"description": "Sets the \"selected\" configuration property of the menu's first \nenabled item to \"true.\"", "guessedname": "setInitialSelection", "guessedtype": "function"}, "_onClick": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"click\" event handler for the menu.", "guessedname": "_onClick", "guessedtype": "function"}, "_onInit": {"guessedname": "_onInit", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"init\" event handler for the menu.", "private": "", "guessedtype": "function"}, "_updateItemProperties": {"guessedname": "_updateItemProperties", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group of items to update."}], "description": "Updates the \"index,\" \"groupindex,\" and \"className\" properties \nof the menu items in the specified group.", "private": "", "guessedtype": "function"}, "_onItemAdded": {"guessedname": "_onItemAdded", "params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}], "description": "\"itemadded\" event handler for a Menu instance.", "private": "", "guessedtype": "function"}, "_onSubmenuBeforeShow": {"guessedname": "_onSubmenuBeforeShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"beforeshow\" event handler for a submenu.", "private": "", "guessedtype": "function"}, "addItems": {"return": {"type": "Array", "description": ""}, "params": [{"type": "Array", "name": "p_aItems", "description": " Array of items to be added to the menu.  The array \ncan contain strings specifying the text for each item to be created, object\nliterals specifying each of the menu item configuration properties, \nor MenuItem instances."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number specifying the group to \nwhich the items belongs."}], "description": "Adds an array of items to the menu.", "guessedname": "addItems", "guessedtype": "function"}, "setInitialFocus": {"description": "Sets focus to the menu's first enabled item.", "guessedname": "setInitialFocus", "guessedtype": "function"}, "_removeItemFromGroupByValue": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Removes a menu item from a group by reference.  Returns the \nmenu item that was removed.", "private": "", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group to which the\nmenu item belongs."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be removed."}], "guessedname": "_removeItemFromGroupByValue", "guessedtype": "function"}, "_onMenuItemConfigChange": {"guessedname": "_onMenuItemConfigChange", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item \nthat fired the event."}], "description": "\"configchange\" event handler for the menu's items.", "private": "", "guessedtype": "function"}, "clearActiveItem": {"params": [{"type": "Boolean", "name": "p_bBlur", "description": " Boolean indicating if the menu's active item \nshould be blurred."}], "description": "Sets the \"selected\" configuration property of the menu's active\nitem to \"false\" and hides the item's submenu.", "guessedname": "clearActiveItem", "guessedtype": "function"}, "_onMouseOver": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"mouseover\" event handler for the menu.", "guessedname": "_onMouseOver", "guessedtype": "function"}, "_onParentMenuRender": {"guessedname": "_onParentMenuRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object representing the submenu that \nsubscribed to the event."}], "description": "\"render\" event handler for a submenu.  Renders a  \nsubmenu in response to the firing of its parent's \"render\" event.", "private": "", "guessedtype": "function"}, "_execShowDelay": {"guessedname": "_execShowDelay", "params": [{"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object specifying the menu that should \nbe made visible."}], "description": "Shows the menu after the number of milliseconds specified by \nthe \"showdelay\" configuration property have ellapsed.", "private": "", "guessedtype": "function"}, "_enableScrollFooter": {"protected": "", "description": "Enables the footer used for scrolling the body of the menu.", "guessedname": "_enableScrollFooter", "guessedtype": "function"}, "hasFocus": {"return": {"type": "Boolean", "description": ""}, "description": "Returns a boolean indicating whether or not the menu has focus.", "guessedname": "hasFocus", "guessedtype": "function"}, "_onBeforeShow": {"guessedname": "_onBeforeShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"beforeshow\" event handler for the menu.", "private": "", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source \nfor the menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;<\/code> element of the menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " \nObject specifying the <code>&#60;select&#62;<\/code> element to be used as \nthe data source for the menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu. See configuration class documentation for \nmore details."}], "description": "The Menu class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references \nfor pre-existing markup, and creates required markup if it is not \nalready present.", "guessedname": "init", "guessedtype": "function"}, "_addItemToGroup": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Adds a menu item to a group.", "private": "", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group to which the \nitem belongs."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be added to the menu."}, {"type": "String", "name": "p_oItem", "description": " String specifying the text of the item to be added \nto the menu."}, {"type": "Object", "name": "p_oItem", "description": " Object literal containing a set of menu item \nconfiguration properties."}, {"type": "Number", "name": "p_nItemIndex", "description": " Optional. Number indicating the index at \nwhich the menu item should be added."}], "guessedname": "_addItemToGroup", "guessedtype": "function"}, "_onParentMenuConfigChange": {"guessedname": "_onParentMenuConfigChange", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object representing the submenu that \nsubscribed to the event."}], "description": "\"configchange\" event handler for a submenu.", "private": "", "guessedtype": "function"}, "_cancelHideDelay": {"description": "Cancels the call to \"hideMenu.\"", "private": "", "guessedname": "_cancelHideDelay", "guessedtype": "function"}, "blur": {"description": "Causes the menu to lose focus and fires the \"blur\" event.", "guessedname": "blur", "guessedtype": "function"}, "configHideDelay": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"hidedelay\" configuration property \nof the menu changes.", "guessedname": "configHideDelay", "guessedtype": "function"}, "onRender": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"render\" event handler for the menu.", "guessedname": "onRender", "guessedtype": "function"}, "_onBeforeHide": {"guessedname": "_onBeforeHide", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"beforehide\" event handler for the menu.", "private": "", "guessedtype": "function"}, "_getFirstEnabledItem": {"guessedname": "_getFirstEnabledItem", "return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Returns the first enabled item in the menu.", "private": "", "guessedtype": "function"}, "_createItemGroup": {"return": {"type": "Array", "description": ""}, "description": "Creates a new menu item group (array) and its associated \n<code>&#60;ul&#62;<\/code> element. Returns an aray of menu item groups.", "private": "", "params": [{"type": "Number", "name": "p_nIndex", "description": " Number indicating the group to create."}], "guessedname": "_createItemGroup", "guessedtype": "function"}, "getItems": {"return": {"type": "Array", "description": ""}, "description": "Returns an array of all of the items in the menu.", "guessedname": "getItems", "guessedtype": "function"}, "focus": {"description": "Causes the menu to receive focus and fires the \"focus\" event.", "guessedname": "focus", "guessedtype": "function"}, "insertItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be added to the menu."}, {"type": "String", "name": "p_oItem", "description": " String specifying the text of the item to be added \nto the menu."}, {"type": "Object", "name": "p_oItem", "description": " Object literal containing a set of menu item \nconfiguration properties."}, {"type": "Number", "name": "p_nItemIndex", "description": " Number indicating the ordinal position at which\nthe item should be added."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number indicating the group to which \nthe item belongs."}], "description": "Inserts an item into the menu at the specified index.", "guessedname": "insertItem", "guessedtype": "function"}, "_configureSubmenu": {"guessedname": "_configureSubmenu", "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance with the submenu to be configured."}], "description": "Subscribes the menu item's submenu to its parent menu's events.", "private": "", "guessedtype": "function"}, "addItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be added to the menu."}, {"type": "String", "name": "p_oItem", "description": " String specifying the text of the item to be added \nto the menu."}, {"type": "Object", "name": "p_oItem", "description": " Object literal containing a set of menu item \nconfiguration properties."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number indicating the group to\nwhich the item belongs."}], "description": "Appends an item to the menu.", "guessedname": "addItem", "guessedtype": "function"}, "_onScrollTargetMouseOut": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"mouseout\" event handler for the menu's \"header\" and \"footer\" \nelements.  Used to stop scrolling the body of the menu up and down when the \nmenu's \"maxheight\" configuration property is set to a value greater than 0.", "guessedname": "_onScrollTargetMouseOut", "guessedtype": "function"}, "_disableScrollHeader": {"protected": "", "description": "Disables the header used for scrolling the body of the menu.", "guessedname": "_disableScrollHeader", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"visible\" configuration property \nthe menu changes.", "guessedname": "configVisible", "guessedtype": "function"}, "configContainer": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"container\" configuration property \nof the menu changes.", "guessedname": "configContainer", "guessedtype": "function"}, "clearContent": {"description": "Removes all of the content from the menu, including the menu \nitems, group titles, header and footer.", "guessedname": "clearContent", "guessedtype": "function"}, "enforceConstraints": {"params": [{"type": "String", "name": "type", "description": " The name of the event that was fired."}, {"type": "Array", "name": "args", "description": " Collection of arguments sent when the \nevent was fired."}, {"type": "Array", "name": "obj", "description": " Array containing the current Menu instance \nand the item that fired the event."}], "description": "The default event handler executed when the moveEvent is fired,  \nif the \"constraintoviewport\" configuration property is set to true.", "guessedname": "enforceConstraints", "guessedtype": "function"}, "getItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "Number", "name": "p_nItemIndex", "description": " Number indicating the ordinal position of the \nitem to be retrieved."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number indicating the group to which \nthe item belongs."}], "description": "Returns the item at the specified index.", "guessedname": "getItem", "guessedtype": "function"}, "removeItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oObject", "description": " Object reference for the MenuItem \ninstance to be removed from the menu."}, {"type": "Number", "name": "p_oObject", "description": " Number specifying the index of the item \nto be removed."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number specifying the group to \nwhich the item belongs."}], "description": "Removes the specified item from the menu.", "guessedname": "removeItem", "guessedtype": "function"}, "_enableScrollHeader": {"protected": "", "description": "Enables the header used for scrolling the body of the menu.", "guessedname": "_enableScrollHeader", "guessedtype": "function"}, "_removeItemFromGroupByIndex": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Removes a menu item from a group by index.  Returns the menu \nitem that was removed.", "private": "", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group to which the menu \nitem belongs."}, {"type": "Number", "name": "p_nItemIndex", "description": " Number indicating the index of the menu item \nto be removed."}], "guessedname": "_removeItemFromGroupByIndex", "guessedtype": "function"}, "_onShow": {"guessedname": "_onShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"show\" event handler for the menu.", "private": "", "guessedtype": "function"}, "_disableScrollFooter": {"protected": "", "description": "Disables the footer used for scrolling the body of the menu.", "guessedname": "_disableScrollFooter", "guessedtype": "function"}, "_onMenuItemFocus": {"guessedname": "_onMenuItemFocus", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"focus\" event handler for the menu's items.", "private": "", "guessedtype": "function"}, "setItemGroupTitle": {"params": [{"type": "String", "name": "p_sGroupTitle", "description": " String specifying the title of the group."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number specifying the group to which\nthe title belongs."}], "description": "Sets the title of a group of menu items.", "guessedname": "setItemGroupTitle", "guessedtype": "function"}, "_onMouseMove": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"click\" event handler for the menu.", "guessedname": "_onMouseMove", "guessedtype": "function"}, "getRoot": {"description": "Finds the menu's root menu.", "guessedname": "getRoot", "guessedtype": "function"}, "subscribe": {"params": [{"type": "string", "name": "p_type", "description": "        the type, or name of the event"}, {"type": "function", "name": "p_fn", "description": "        the function to exectute when the event fires"}, {"type": "Object", "name": "p_obj", "description": "         An object to be passed along when the event \nfires"}, {"type": "boolean", "name": "p_override", "description": "   If true, the obj passed in becomes the \nexecution scope of the listener"}], "description": "Adds the specified CustomEvent subscriber to the menu and each of \nits submenus.", "guessedname": "subscribe", "guessedtype": "function"}, "_setMaxHeight": {"guessedname": "_setMaxHeight", "params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}, {"type": "Number", "name": "p_nMaxHeight", "description": " Number representing the value to set for the \n\"maxheight\" configuration property."}], "description": "\"renderEvent\" handler used to defer the setting of the \n\"maxheight\" configuration property until the menu is rendered in lazy \nload scenarios.", "private": "", "guessedtype": "function"}, "_subscribeToItemEvents": {"guessedname": "_subscribeToItemEvents", "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance whose events should be subscribed to."}], "description": "Subscribes a menu to a menu item's event.", "private": "", "guessedtype": "function"}, "_onYChange": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}], "description": "\"y\" event handler for a Menu instance.", "guessedname": "_onYChange", "guessedtype": "function"}, "_onMouseOut": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"mouseout\" event handler for the menu.", "guessedname": "_onMouseOut", "guessedtype": "function"}, "_initSubTree": {"description": "Iterates the childNodes of the source element to find nodes \nused to instantiate menu and menu items.", "private": "", "guessedname": "_initSubTree", "guessedtype": "function"}, "configIframe": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"iframe\" configuration property of \nthe menu changes.", "guessedname": "configIframe", "guessedtype": "function"}, "_onScrollTargetMouseOver": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"mouseover\" event handler for the menu's \"header\" and \"footer\" \nelements.  Used to scroll the body of the menu up and down when the \nmenu's \"maxheight\" configuration property is set to a value greater than 0.", "guessedname": "_onScrollTargetMouseOver", "guessedtype": "function"}, "configClassName": {"params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " The Menu instance fired the event."}], "description": "Event handler for when the \"classname\" configuration property of \na menu changes.", "guessedname": "configClassName", "guessedtype": "function"}, "_onKeyPress": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " The name of the event that was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Collection of arguments sent when the event \nwas fired."}], "description": "\"keypress\" event handler for a Menu instance.", "guessedname": "_onKeyPress", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for the menu.", "guessedname": "initEvents", "guessedtype": "function"}, "checkPosition": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "p_sPosition", "description": " String specifying the position of the menu."}], "description": "Checks to make sure that the value of the \"position\" property \nis one of the supported strings. Returns true if the position is supported.", "private": ""}, "_execSubmenuHideDelay": {"guessedname": "_execSubmenuHideDelay", "params": [{"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object specifying the submenu that  \nshould be hidden."}, {"type": "Number", "name": "p_nMouseX", "description": " The x coordinate of the mouse when it left \nthe specified submenu's parent menu item."}, {"type": "Number", "name": "p_nHideDelay", "description": " The number of milliseconds that should ellapse\nbefore the submenu is hidden."}], "description": "Hides a submenu after the number of milliseconds specified by \nthe \"submenuhidedelay\" configuration property have ellapsed.", "private": "", "guessedtype": "function"}, "_onKeyDown": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"keydown\" event handler for the menu.", "guessedname": "_onKeyDown", "guessedtype": "function"}, "configPosition": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"position\" configuration property \nof the menu changes.", "guessedname": "configPosition", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be\nchanged using the menu's Config object (\"cfg\").", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "_execHideDelay": {"description": "Hides the menu after the number of milliseconds specified by \nthe \"hidedelay\" configuration property.", "private": "", "guessedname": "_execHideDelay", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "menu.js", "guessedtype": "function", "shortname": "Menu", "properties": {"_nHideDelayId": {"description": "Number representing the time-out setting used to cancel the \nhiding of a menu.", "default": "null", "private": "", "guessedname": "_nHideDelayId", "guessedtype": "property", "type": "Number"}, "EVENT_TYPES": {"description": "Constant representing the name of the Menu's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "_nCurrentMouseX": {"description": "The current x coordinate of the mouse inside the area of \nthe menu.", "default": "0", "private": "", "guessedname": "_nCurrentMouseX", "guessedtype": "property", "type": "Number"}, "_nShowDelayId": {"description": "Number representing the time-out setting used to cancel the \nshowing of a menu.", "default": "null", "private": "", "guessedname": "_nShowDelayId", "guessedtype": "property", "type": "Number"}, "activeItem": {"default": "null", "type": "YAHOO.widget.MenuItem", "description": "Object reference to the item in the menu that has is selected.", "guessedname": "activeItem", "guessedtype": "property"}, "_sClassName": {"description": "The current value of the \"classname\" configuration attribute.", "default": "null", "private": "", "guessedname": "_sClassName", "guessedtype": "property", "type": "String"}, "ITEM_TYPE": {"description": "Object representing the type of menu item to instantiate and \nadd when parsing the child nodes (either <code>&#60;li&#62;<\/code> element, \n<code>&#60;optgroup&#62;<\/code> element or <code>&#60;option&#62;<\/code>) \nof the menu's source HTML element.", "default": "YAHOO.widget.MenuItem", "guessedname": "ITEM_TYPE", "guessedtype": "property", "type": "YAHOO.widget.MenuItem", "final": ""}, "_bStopMouseEventHandlers": {"description": "Stops \"mouseover,\" \"mouseout,\" and \"mousemove\" event handlers \nfrom executing.", "default": "false", "private": "", "guessedname": "_bStopMouseEventHandlers", "guessedtype": "property", "type": "Boolean"}, "_aGroupTitleElements": {"description": "Array of HTML element used to title groups of menu items.", "default": "[]", "private": "", "guessedname": "_aGroupTitleElements", "guessedtype": "property", "type": "Array"}, "_bHandledMouseOverEvent": {"description": "Boolean indicating the current state of the menu's \n\"mouseover\" event.", "default": "false", "private": "", "guessedname": "_bHandledMouseOverEvent", "guessedtype": "property", "type": "Boolean"}, "OFF_SCREEN_POSITION": {"description": "Array representing the default x and y position that a menu \nshould have when it is positioned outside the viewport by the \n\"poistionOffScreen\" method.", "default": "[-10000, -10000]", "guessedname": "OFF_SCREEN_POSITION", "guessedtype": "property", "type": "Array", "final": ""}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \nmenu's <code>&#60;div&#62;<\/code> element.", "default": "\"yuimenu\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "itemData": {"default": "null", "type": "Array", "description": "Array of items to be added to the menu.  The array can contain \nstrings representing the text for each item to be created, object literals \nrepresenting the menu item configuration properties, or MenuItem instances.  \nThis property should be set via the constructor using the configuration \nobject literal.", "guessedname": "itemData", "guessedtype": "property"}, "parent": {"default": "null", "type": "YAHOO.widget.MenuItem", "description": "Object reference to the menu's parent menu or menu item.  \nThis property can be set via the constructor using the configuration \nobject literal.", "guessedname": "parent", "guessedtype": "property"}, "_nSubmenuHideDelayId": {"description": "Number representing the time-out setting used to cancel the \nhiding of a submenu.", "default": "null", "private": "", "guessedname": "_nSubmenuHideDelayId", "guessedtype": "property", "type": "Number"}, "_nBodyScrollId": {"description": "Number representing the time-out setting used to cancel the \nscrolling of the menu's body element.", "default": "null", "private": "", "guessedname": "_nBodyScrollId", "guessedtype": "property", "type": "Number"}, "srcElement": {"default": "null", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement<\/a>|<a \nhref=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.\nhtml#ID-22445964\">HTMLDivElement<\/a>", "description": "Object reference to the HTML element (either \n<code>&#60;select&#62;<\/code> or <code>&#60;div&#62;<\/code>) used to \ncreate the menu.", "guessedname": "srcElement", "guessedtype": "property"}, "_bHandledMouseOutEvent": {"description": "Boolean indicating the current state of the menu's\n\"mouseout\" event.", "default": "false", "private": "", "guessedname": "_bHandledMouseOutEvent", "guessedtype": "property", "type": "Boolean"}, "lazyLoad": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu's \"lazy load\" feature is \nenabled.  If set to \"true,\" initialization and rendering of the menu's \nitems will be deferred until the first time it is made visible.  This \nproperty should be set via the constructor using the configuration \nobject literal.", "guessedname": "lazyLoad", "guessedtype": "property"}, "_aListElements": {"description": "Array of <code>&#60;ul&#62;<\/code> elements, each of which is \nthe parent node for each item's <code>&#60;li&#62;<\/code> element.", "default": "[]", "private": "", "guessedname": "_aListElements", "guessedtype": "property", "type": "Array"}, "_aItemGroups": {"description": "Multi-dimensional Array representing the menu items as they\nare grouped in the menu.", "default": "[]", "private": "", "guessedname": "_aItemGroups", "guessedtype": "property", "type": "Array"}, "DEFAULT_CONFIG": {"description": "Constant representing the Menu's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "GROUP_TITLE_TAG_NAME": {"description": "String representing the tagname of the HTML element used to \ntitle the menu's item groups.", "default": "H6", "guessedname": "GROUP_TITLE_TAG_NAME", "guessedtype": "property", "type": "String", "final": ""}, "_bHideDelayEventHandlersAssigned": {"description": "Boolean indicating if the \"mouseover\" and \"mouseout\" event \nhandlers used for hiding the menu via a call to \"window.setTimeout\" have \nalready been assigned.", "default": "false", "private": "", "guessedname": "_bHideDelayEventHandlersAssigned", "guessedtype": "property", "type": "Boolean"}}, "description": "The Menu class creates a container that holds a vertical list representing \na set of options or commands.  Menu is the base class for all \nmenu containers."}, "YAHOO.util.Number": {"name": "YAHOO.util.Number", "namespace": "YAHOO.util", "module": "number", "guessedname": "Number", "methods": {"format": {"return": {"type": "String", "description": "Formatted number for display."}, "params": [{"type": "Number", "name": "nData", "description": "  Number."}, {"type": "Object} (Optional) Optional configuration values:\n<dl>\n<dt>prefix {String}<\/dd>\n<dd>String prepended before each number, like a currency designator \"$\"<\/dd>\n<dt>decimalPlaces {Number}<\/dd>\n<dd>Number of decimal places to round.<\/dd>\n<dt>decimalSeparator {String}<\/dd>\n<dd>Decimal separator<\/dd>\n<dt>thousandsSeparator {String}<\/dd>\n<dd>Thousands separator<\/dd>\n<dt>suffix {String", "name": "oConfig", "description": " <\/dd>\n<dd>String appended after each number, like \" items\" (note the space)<\/dd>\n<\/dl>"}], "description": "Takes a native JavaScript Number and formats to string for display to user.", "guessedname": "format", "guessedtype": "function"}}, "static": "", "file": "DataSource.js", "guessedtype": "property", "shortname": "Number", "description": "The static Number class provides helper functions to deal with data of type\nNumber."}, "YAHOO.widget.Calendar2up": {"name": "YAHOO.widget.Calendar2up", "deprecated": "The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.", "namespace": "YAHOO.widget", "module": "calendar", "guessedname": "Calendar2up", "extends": "YAHOO.widget.CalendarGroup", "superclass": "YAHOO.widget.CalendarGroup", "file": "CalendarGroup.js", "guessedtype": "function", "shortname": "Calendar2up", "properties": {"Cal2up": {"deprecated": "The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.", "guessedname": "Cal2up", "guessedtype": "property"}}}, "YAHOO.widget.Slider": {"name": "YAHOO.widget.Slider", "constructors": [{"params": [{"type": "String", "name": "id", "description": "     The id of the element linked to this instance"}, {"type": "String", "name": "sGroup", "description": " The group of related DragDrop items"}, {"type": "SliderThumb", "name": "oThumb", "description": " The thumb for this slider"}, {"type": "String", "name": "sType", "description": "  The type of slider (horiz, vert, region)"}], "description": "A DragDrop implementation that can be used as a background for a\nslider.  It takes a reference to the thumb instance \nso it can delegate some of the events to it.  The goal is to make the \nthumb jump to the location on the background when the background is \nclicked."}], "namespace": "YAHOO.widget", "module": "slider", "events": {"slideEnd": {"description": "Event that fires at the end of a slider thumb move"}, "change": {"params": [{"type": "int", "name": "newOffset|x", "description": " the new offset for normal sliders, or the new\nx offset for region sliders"}, {"type": "int", "name": "y", "description": " the number of pixels the thumb has moved on the y axis\n(region sliders only)"}], "description": "Event the fires when the value of the control changes.  If \nthe control is animated the event will fire every point\nalong the way."}, "slideStart": {"description": "Event that fires at the beginning of a slider thumb move."}}, "guessedname": "Slider", "methods": {"fireEvents": {"guessedname": "fireEvents", "params": [{"type": "boolean", "name": "thumbEvent", "description": " set to true if this event is fired from an event\nthat occurred on the thumb.  If it is, the state of the\nthumb dd object should be correct.  Otherwise, the event\noriginated on the background, so the thumb state needs to\nbe refreshed before proceeding."}], "description": "Fires the change event if the value has been changed.  Ignored if we are in\nthe middle of an animation as the event will fire when the animation is\ncomplete", "private": "", "guessedtype": "function"}, "lock": {"description": "Locks the slider, overrides YAHOO.util.DragDrop", "guessedname": "lock", "guessedtype": "function"}, "YAHOO.widget.Slider.getHorizSlider": {"return": {"type": "Slider", "description": "a horizontal slider control"}, "description": "Factory method for creating a horizontal slider", "static": "", "guessedname": "getHorizSlider", "guessedtype": "property", "params": [{"type": "String", "name": "sBGElId", "description": " the id of the slider's background element"}, {"type": "String", "name": "sHandleElId", "description": " the id of the thumb element"}, {"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}]}, "focus": {"private": "", "description": "Try to focus the element when clicked so we can add\naccessibility features", "guessedname": "focus", "guessedtype": "function"}, "onMouseDown": {"private": "", "description": "Handles the mousedown event for the slider background", "guessedname": "onMouseDown", "guessedtype": "function"}, "handleKeyDown": {"params": [{"type": "Event", "name": "e", "description": " the keydown event"}], "description": "Executed when a keydown event happens with the control focused.\nUpdates the slider value and display when the keypress is an\narrow key, home, or end as long as enableKeys is set to true.", "guessedname": "handleKeyDown", "guessedtype": "function"}, "getXValue": {"return": {"type": "int", "description": "the current horizontal offset"}, "description": "Returns the slider's thumb X offset from the start position", "guessedname": "getXValue", "guessedtype": "function"}, "moveThumb": {"guessedname": "moveThumb", "params": [{"type": "int", "name": "x", "description": " the X coordinate of the click"}, {"type": "int", "name": "y", "description": " the Y coordinate of the click"}, {"type": "boolean", "name": "skipAnim", "description": " don't animate if the move happend onDrag"}, {"type": "boolean", "name": "midMove", "description": " set to true if this is not terminating\nthe slider movement"}], "description": "Move the associated slider moved to a timeout to try to get around the \nmousedown stealing moz does when I move the slider element between the \ncursor and the background during the mouseup event", "private": "", "guessedtype": "function"}, "setRegionValue": {"return": {"type": "boolean", "description": "true if the move was performed, false if it failed"}, "params": [{"type": "int", "name": "newOffset", "description": " the number of pixels the thumb should be\npositioned away from the initial start point (x axis for region)"}, {"type": "int", "name": "newOffset2", "description": " the number of pixels the thumb should be\npositioned away from the initial start point (y axis for region)"}, {"type": "boolean", "name": "skipAnim", "description": " set to true to disable the animation\nfor this move action (but not others)."}, {"type": "boolean", "name": "force", "description": " ignore the locked setting and set value anyway"}, {"type": "boolean", "name": "silent", "description": " when true, do not fire events"}], "description": "Provides a way to set the value of the region slider in code.", "guessedname": "setRegionValue", "guessedtype": "function"}, "onSliderEnd": {"deprecated": "use instance.subscribe(\"slideEnd\") instead", "description": "Event that fires at the end of a slider thumb move", "guessedname": "onSlideEnd", "guessedtype": "function"}, "thumbMouseUp": {"private": "", "description": "Handles mouseup event on the thumb", "guessedname": "thumbMouseUp", "guessedtype": "function"}, "YAHOO.widget.Slider.getSliderRegion": {"return": {"type": "Slider", "description": "a slider region control"}, "description": "Factory method for creating a slider region like the one in the color\npicker example", "static": "", "guessedname": "getSliderRegion", "guessedtype": "property", "params": [{"type": "String", "name": "sBGElId", "description": " the id of the slider's background element"}, {"type": "String", "name": "sHandleElId", "description": " the id of the thumb element"}, {"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}]}, "verifyOffset": {"return": {"type": "boolean", "description": "True if the offset is the same as the baseline."}, "params": [{"type": "boolean", "name": "checkPos", "description": "  check the position instead of using cached value"}], "description": "Checks the background position element position.  If it has moved from the\nbaseline position, the constraints for the thumb are reset", "guessedname": "verifyOffset", "guessedtype": "function"}, "initThumb": {"params": [{"type": "YAHOO.widget.SliderThumb", "name": "t", "description": " the slider thumb"}], "description": "Initializes the slider's thumb. Executed in the constructor.", "guessedname": "initThumb", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the instance"}, "description": "Slider toString", "guessedname": "toString", "guessedtype": "function"}, "moveOneTick": {"guessedname": "moveOneTick", "params": [{"type": "int[]", "name": "the", "description": " destination coordinate"}], "description": "Move the slider one tick mark towards its final coordinate.  Used\nfor the animation when tick marks are defined", "private": "", "guessedtype": "function"}, "onChange": {"deprecated": "use instance.subscribe(\"change\") instead", "params": [{"type": "int", "name": "firstOffset", "description": " the number of pixels the thumb has moved\nfrom its start position. Normal horizontal and vertical sliders will only\nhave the firstOffset.  Regions will have both, the first is the horizontal\noffset, the second the vertical."}, {"type": "int", "name": "secondOffset", "description": " the y offset for region sliders"}], "description": "Event that fires when the value of the slider has changed", "guessedname": "onChange", "guessedtype": "function"}, "initSlider": {"params": [{"type": "string", "name": "sType", "description": " the type of slider (horiz, vert, region)"}], "description": "Initializes the slider.  Executed in the constructor", "guessedname": "initSlider", "guessedtype": "function"}, "setValue": {"return": {"type": "boolean", "description": "true if the move was performed, false if it failed"}, "params": [{"type": "int", "name": "newOffset", "description": " the number of pixels the thumb should be\npositioned away from the initial start point"}, {"type": "boolean", "name": "skipAnim", "description": " set to true to disable the animation\nfor this move action (but not others)."}, {"type": "boolean", "name": "force", "description": " ignore the locked setting and set value anyway"}, {"type": "boolean", "name": "silent", "description": " when true, do not fire events"}], "description": "Provides a way to set the value of the slider in code.", "guessedname": "setValue", "guessedtype": "function"}, "setThumbCenterPoint": {"description": "When the thumb is available, we cache the centerpoint of the element so\nwe can position the element correctly when the background is clicked", "guessedname": "setThumbCenterPoint", "guessedtype": "function"}, "handleThumbChange": {"private": "", "description": "Internal handler for the slider thumb's onChange event", "guessedname": "handleThumbChange", "guessedtype": "function"}, "endMove": {"private": "", "description": "Fired when the slider movement ends", "guessedname": "endMove", "guessedtype": "function"}, "getYValue": {"return": {"type": "int", "description": "the current vertical offset"}, "description": "Returns the slider's thumb Y offset from the start position", "guessedname": "getYValue", "guessedtype": "function"}, "onAvailable": {"description": "Executed when the slider element is available", "guessedname": "onAvailable", "guessedtype": "function"}, "onSlideStart": {"deprecated": "use instance.subscribe(\"slideStart\") instead", "description": "Event that fires when the at the beginning of the slider thumb move", "guessedname": "onSlideStart", "guessedtype": "function"}, "onDrag": {"private": "", "description": "Handles the onDrag event for the slider background", "guessedname": "onDrag", "guessedtype": "function"}, "getThumb": {"return": {"type": "SliderThumb", "description": "this slider's thumb"}, "description": "Returns a reference to this slider's thumb", "guessedname": "getThumb", "guessedtype": "function"}, "YAHOO.widget.Slider.getVertSlider": {"return": {"type": "Slider", "description": "a vertical slider control"}, "description": "Factory method for creating a vertical slider", "static": "", "guessedname": "getVertSlider", "guessedtype": "property", "params": [{"type": "String", "name": "sBGElId", "description": " the id of the slider's background element"}, {"type": "String", "name": "sHandleElId", "description": " the id of the thumb element"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}]}, "handleKeyPress": {"params": [{"type": "Event", "name": "e", "description": " the keypress event"}], "description": "Executed when a keypress event happens with the control focused.\nPrevents the default behavior for navigation keys.  The actual\nlogic for moving the slider thumb in response to a key event\nhappens in handleKeyDown.", "guessedname": "handleKeyPress", "guessedtype": "function"}, "setStartSliderState": {"description": "Initialization that sets up the value offsets once the elements are ready", "guessedname": "setStartSliderState", "guessedtype": "function"}, "getValue": {"return": {"type": "int", "description": "the current value"}, "description": "Returns the slider's thumb offset from the start position", "guessedname": "getValue", "guessedtype": "function"}, "b4MouseDown": {"private": "", "description": "Resets the constraints before moving the thumb.", "guessedname": "b4MouseDown", "guessedtype": "function"}, "unlock": {"description": "Unlocks the slider, overrides YAHOO.util.DragDrop", "guessedname": "unlock", "guessedtype": "function"}, "_getNextY": {"private": "", "description": "Returns the next Y tick value based on the current coord and the target coord.", "guessedname": "_getNextY", "guessedtype": "function"}, "_getNextX": {"private": "", "description": "Returns the next X tick value based on the current coord and the target coord.", "guessedname": "_getNextX", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "superclass": "YAHOO.util.DragDrop", "file": "Slider.js", "guessedtype": "function", "extends": "YAHOO.util.DragDrop", "shortname": "Slider", "properties": {"moveComplete": {"deprecated": "use the slideEnd event instead", "type": "Boolean", "description": "moveComplete is set to true when the slider has moved to its final\ndestination.  For animated slider, this value can be checked in \nthe onChange handler to make it possible to execute logic only\nwhen the move is complete rather than at all points along the way.\nDeprecated because this flag is only useful when the background is\nclicked and the slider is animated.  If the user drags the thumb,\nthe flag is updated when the drag is over ... the final onDrag event\nfires before the mouseup the ends the drag, so the implementer will\nnever see it.", "guessedname": "moveComplete", "guessedtype": "property"}, "isTarget": {"private": "", "description": "Overrides the isTarget property in YAHOO.util.DragDrop", "guessedname": "isTarget", "guessedtype": "property"}, "thumb": {"type": "YAHOO.widget.SliderThumb", "description": "A YAHOO.widget.SliderThumb instance that we will use to \nreposition the thumb when the background is clicked", "guessedname": "thumb", "guessedtype": "property"}, "baselinePos": {"type": "[int, int]", "description": "The basline position of the background element, used\nto determine if the background has moved since the last\noperation.", "guessedname": "baselinePos", "guessedtype": "property"}, "thumbCenterPoint": {"type": "{\"x\": int, \"y\": int}", "description": "The center of the slider element is stored so we can \nplace it in the correct position when the background is clicked.", "guessedname": "thumbCenterPoint", "guessedtype": "property"}, "SOURCE_SET_VALUE": {"default": "2", "final": "", "description": "Constant for valueChangeSource, indicating that the value was altered\nby a programmatic call to setValue\/setRegionValue.", "guessedname": "SOURCE_SET_VALUE", "guessedtype": "property"}, "SOURCE_UI_EVENT": {"default": "1", "final": "", "description": "Constant for valueChangeSource, indicating that the user clicked or\ndragged the slider to change the value.", "guessedname": "SOURCE_UI_EVENT", "guessedtype": "property"}, "keyIncrement": {"type": "int", "description": "Specifies the number of pixels the arrow keys will move the slider.\nDefault is 25.", "guessedname": "keyIncrement", "guessedtype": "property"}, "_silent": {"guessedname": "_silent", "type": "boolean", "description": "Indicates whether or not events will be supressed for the current\nslide operation", "private": "", "guessedtype": "property"}, "valueChangeSource": {"since": "2.3.0", "type": "int", "description": "When the slider value changes, this property is set to identify where\nthe update came from.  This will be either 1, meaning the slider was\nclicked or dragged, or 2, meaning that it was set via a setValue() call.\nThis can be used within event handlers to apply some of the logic only\nwhen dealing with one source or another.", "guessedname": "valueChangeSource", "guessedtype": "property"}, "backgroundEnabled": {"type": "boolean", "description": "Set to false to disable a background click thumb move", "guessedname": "backgroundEnabled", "guessedtype": "property"}, "animationDuration": {"default": "0.2", "type": "int", "description": "If animation is configured, specifies the length of the animation\nin seconds.", "guessedname": "animationDuration", "guessedtype": "property"}, "YAHOO.widget.Slider.ANIM_AVAIL": {"type": "boolean", "static": "", "description": "By default, animation is available if the animation utility is detected.", "guessedname": "ANIM_AVAIL", "guessedtype": "property"}, "lastOffset": {"type": "[int, int]", "description": "Saved offset used to protect against NaN problems when slider is\nset to display:none", "guessedname": "lastOffset", "guessedtype": "property"}, "type": {"type": "string", "description": "The type of the slider (horiz, vert, region)", "guessedname": "type", "guessedtype": "property"}, "animate": {"type": "boolean", "description": "Flag that determines if the thumb will animate when moved", "guessedname": "animate", "guessedtype": "property"}, "tickPause": {"type": "int", "description": "Adjustment factor for tick animation, the more ticks, the\nfaster the animation (by default)", "guessedname": "tickPause", "guessedtype": "property"}, "enableKeys": {"type": "boolean", "description": "Enables the arrow, home and end keys, defaults to true.", "guessedname": "enableKeys", "guessedtype": "property"}}, "description": "A DragDrop implementation that can be used as a background for a\nslider.  It takes a reference to the thumb instance \nso it can delegate some of the events to it.  The goal is to make the \nthumb jump to the location on the background when the background is \nclicked."}, "YAHOO.util.ImageLoader.bgImgObj": {"name": "YAHOO.util.ImageLoader.bgImgObj", "constructors": [{"params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}], "description": "Background image object. A background image is one whose URL is specified by \"background-image\" in the element's style"}], "namespace": "YAHOO.util", "module": "imageloader", "guessedname": "bgImgObj", "methods": {"_applyUrl": {"guessedname": "_applyUrl", "params": [{"type": "Object", "name": "el", "description": "\tHTML DOM element"}], "description": "Inserts the image URL into the DOM so that the image is displayed.\nSets style.backgroundImage", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.ImageLoader.imgObj", "superclass": "YAHOO.util.ImageLoader.imgObj", "file": "ImageLoader.js", "guessedtype": "function", "shortname": "ImageLoader.bgImgObj", "description": "Background image object. A background image is one whose URL is specified by \"background-image\" in the element's style"}, "YAHOO.widget.DS_JSFunction": {"name": "YAHOO.widget.DS_JSFunction", "constructors": [{"params": [{"type": "HTMLFunction", "name": "oFunction", "description": "  In-memory Javascript function that returns query results as an array of objects."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of config params."}], "description": "Implementation of YAHOO.widget.DataSource using a native Javascript function as\r\nits live data source."}], "namespace": "YAHOO.widget", "module": "autocomplete", "guessedname": "DS_JSFunction", "methods": {"doQuery": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Queries the live data source defined by function for results. Results are\r\npassed back to a callback function.", "guessedname": "doQuery", "guessedtype": "function"}}, "extends": "YAHOO.widget.DataSource", "superclass": "YAHOO.widget.DataSource", "file": "DataSource.js", "guessedtype": "function", "shortname": "DS_JSFunction", "properties": {"dataFunction": {"type": "HTMLFunction", "description": "In-memory Javascript function that returns query results.", "guessedname": "dataFunction", "guessedtype": "property"}}, "description": "Implementation of YAHOO.widget.DataSource using a native Javascript function as\r\nits live data source."}, "YAHOO.widget.NumericAxis": {"name": "YAHOO.widget.NumericAxis", "constructors": [{"description": "A type of axis whose units are measured in numeric values."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "NumericAxis", "file": "NumericAxis.js", "guessedtype": "function", "shortname": "NumericAxis", "properties": {"scale": {"type": "String", "description": "The scaling algorithm to use on this axis. May be \"linear\" or \"logarithmic\".", "guessedname": "scale", "guessedtype": "property"}, "maximum": {"type": "Number", "description": "The maximum value drawn by the axis. If not set explicitly, the axis maximum\nwill be calculated automatically.", "guessedname": "maximum", "guessedtype": "property"}, "minorUnit": {"type": "Number", "description": "The spacing between minor intervals on this axis.", "guessedname": "minorUnit", "guessedtype": "property"}, "minimum": {"type": "Number", "description": "The minimum value drawn by the axis. If not set explicitly, the axis minimum\nwill be calculated automatically.", "guessedname": "minimum", "guessedtype": "property"}, "majorUnit": {"type": "Number", "description": "The spacing between major intervals on this axis.", "guessedname": "majorUnit", "guessedtype": "property"}, "snapToUnits": {"type": "Boolean", "description": "If true, the labels, ticks, gridlines, and other objects will snap to\nthe nearest major or minor unit. If false, their position will be based\non the minimum value.", "guessedname": "snapToUnits", "guessedtype": "property"}, "alwaysShowZero": {"type": "Boolean", "description": "If true, and the bounds are calculated automatically, either the minimum or\nmaximum will be set to zero.", "guessedname": "alwaysShowZero", "guessedtype": "property"}}, "description": "A type of axis whose units are measured in numeric values."}, "YAHOO.util.ShouldError": {"name": "YAHOO.util.ShouldError", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldError is subclass of AssertionError that is thrown whenever\na test is expected to throw an error but doesn't."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "ShouldError", "extends": "YAHOO.util.AssertionError", "superclass": "YAHOO.util.AssertionError", "file": "Assert.js", "guessedtype": "function", "shortname": "ShouldError", "properties": {"name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "ShouldError is subclass of AssertionError that is thrown whenever\na test is expected to throw an error but doesn't."}, "YAHOO.util.ComparisonFailure": {"name": "YAHOO.util.ComparisonFailure", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value that caused the assertion to fail."}], "description": "ComparisonFailure is subclass of AssertionError that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "ComparisonFailure", "methods": {"toString": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This message\nprovides information about the expected and actual values.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "YAHOO.util.AssertionError", "superclass": "YAHOO.util.AssertionError", "file": "Assert.js", "guessedtype": "function", "shortname": "ComparisonFailure", "properties": {"expected": {"type": "Object", "description": "The expected value."}, "actual": {"type": "Object", "description": "The actual value."}, "name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "ComparisonFailure is subclass of AssertionError that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}, "YAHOO.widget.ContextMenu": {"name": "YAHOO.widget.ContextMenu", "configs": {"trigger": {"default": "null", "type": "String|<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>|Array", "description": "The HTML element(s) whose \"contextmenu\" event (\"mousedown\" \nfor Opera) trigger the display of the context menu.  Can be a string \nrepresenting the id attribute of the HTML element, an object reference \nfor the HTML element, or an array of strings or HTML element references."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the context menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source for the \ncontext menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object specifying the \n<code>&#60;div&#62;<\/code> element of the context menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;select&#62;<\/code> element to be used as the data source for \nthe context menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the context menu. See configuration class documentation \nfor more details."}], "description": "Creates a list of options or commands which are made visible in response to \nan HTML element's \"contextmenu\" event (\"mousedown\" for Opera)."}], "namespace": "YAHOO.widget", "module": "menu", "events": {"triggerContextMenuEvent": {"description": "Custom Event wrapper for the \"contextmenu\" DOM event \n(\"mousedown\" for Opera) fired by the element(s) that trigger the display of \nthe context menu.", "guessedname": "triggerContextMenuEvent", "guessedtype": "property"}}, "guessedname": "ContextMenu", "methods": {"initEvents": {"description": "Initializes the custom events for the context menu.", "guessedname": "initEvents", "guessedtype": "function"}, "_onTriggerClick": {"guessedname": "_onTriggerClick", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed back \nby the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.ContextMenu", "name": "p_oMenu", "description": " Object representing the context \nmenu that is handling the event."}], "description": "\"click\" event handler for the HTML element(s) identified as the \n\"trigger\" for the context menu.  Used to cancel default behaviors in Opera.", "private": "", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the context menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source for \nthe context menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object specifying the \n<code>&#60;div&#62;<\/code> element of the context menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;select&#62;<\/code> element to be used as the data source for \nthe context menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the context menu. See configuration class documentation \nfor more details."}], "description": "The ContextMenu class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the context menu.", "guessedname": "toString", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be \nchanged using the context menu's Config object (\"cfg\").", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "destroy": {"description": "Removes the context menu's <code>&#60;div&#62;<\/code> element \n(and accompanying child nodes) from the document.", "guessedname": "destroy", "guessedtype": "function"}, "cancel": {"description": "Cancels the display of the context menu.", "guessedname": "cancel", "guessedtype": "function"}, "position": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "Array", "name": "p_aPos", "description": " Array representing the xy position for the context menu."}], "description": "\"beforeShow\" event handler used to position the contextmenu.", "private": ""}, "_onTriggerContextMenu": {"guessedname": "_onTriggerContextMenu", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed back \nby the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.ContextMenu", "name": "p_oMenu", "description": " Object representing the context \nmenu that is handling the event."}], "description": "\"contextmenu\" event handler (\"mousedown\" for Opera) for the HTML \nelement(s) that trigger the display of the context menu.", "private": "", "guessedtype": "function"}, "_removeEventHandlers": {"description": "Removes all of the DOM event handlers from the HTML element(s) \nwhose \"context menu\" event (\"click\" for Opera) trigger the display of \nthe context menu.", "private": "", "guessedname": "_removeEventHandlers", "guessedtype": "function"}, "configTrigger": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.ContextMenu", "name": "p_oMenu", "description": " Object representing the context \nmenu that fired the event."}], "description": "Event handler for when the value of the \"trigger\" configuration \nproperty changes.", "guessedname": "configTrigger", "guessedtype": "function"}}, "extends": "YAHOO.widget.Menu", "superclass": "YAHOO.widget.Menu", "file": "contextmenu.js", "guessedtype": "function", "shortname": "ContextMenu", "properties": {"_oTrigger": {"description": "Object reference to the current value of the \"trigger\" \nconfiguration property.", "default": "null", "private": "", "guessedname": "_oTrigger", "guessedtype": "property", "type": "String|<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/leve\nl-one-html.html#ID-58190037\">HTMLElement<\/a>|Array"}, "contextEventTarget": {"default": "null", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-58190037\">HTMLElement<\/a>", "description": "Object reference for the HTML element that was the target of the\n\"contextmenu\" DOM event (\"mousedown\" for Opera) that triggered the display of \nthe context menu.", "guessedname": "contextEventTarget", "guessedtype": "property"}, "EVENT_TYPES": {"description": "Constant representing the name of the ContextMenu's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "DEFAULT_CONFIG": {"description": "Constant representing the ContextMenu's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "_bCancelled": {"description": "Boolean indicating if the display of the context menu should \nbe cancelled.", "default": "false", "private": "", "guessedname": "_bCancelled", "guessedtype": "property", "type": "Boolean"}}, "description": "Creates a list of options or commands which are made visible in response to \nan HTML element's \"contextmenu\" event (\"mousedown\" for Opera)."}, "YAHOO.util.Easing": {"name": "YAHOO.util.Easing", "namespace": "YAHOO.util", "module": "animation", "guessedname": "Easing", "methods": {"easeIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quadratic)", "guessedname": "easeIn", "guessedtype": "function"}, "easeInStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quartic)", "guessedname": "easeInStrong", "guessedtype": "function"}, "bounceBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off start and end.", "guessedname": "bounceBoth", "guessedtype": "function"}, "backOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Overshoots end, then reverses and comes back to end.", "guessedname": "backOut", "guessedtype": "function"}, "elasticBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap both elastic effect.", "guessedname": "elasticBoth", "guessedtype": "function"}, "elasticOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap out elastic effect.", "guessedname": "elasticOut", "guessedtype": "function"}, "bounceOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off end.", "guessedname": "bounceOut", "guessedtype": "function"}, "backBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.", "guessedname": "backBoth", "guessedtype": "function"}, "easeBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quadratic)", "guessedname": "easeBoth", "guessedtype": "function"}, "bounceIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounce off of start.", "guessedname": "bounceIn", "guessedtype": "function"}, "easeOutStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quartic)", "guessedname": "easeOutStrong", "guessedtype": "function"}, "easeNone": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Uniform speed between points.", "guessedname": "easeNone", "guessedtype": "function"}, "elasticIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap in elastic effect.", "guessedname": "elasticIn", "guessedtype": "function"}, "easeBothStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quartic)", "guessedname": "easeBothStrong", "guessedtype": "function"}, "easeOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quadratic)", "guessedname": "easeOut", "guessedtype": "function"}, "backIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction and moves to end.", "guessedname": "backIn", "guessedtype": "function"}}, "file": "Easing.js", "guessedtype": "property", "shortname": "Easing", "description": "Singleton that determines how an animation proceeds from start to end."}, "YAHOO.util.DragDropMgr": {"name": "YAHOO.util.DragDropMgr", "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DragDropMgr", "methods": {"removeDDFromGroup": {"guessedname": "removeDDFromGroup", "static": "", "description": "Removes the supplied dd instance from the supplied group. Executed\nby DragDrop.removeFromGroup, so don't call this function directly.", "private": "", "guessedtype": "function"}, "startDrag": {"static": "", "params": [{"type": "int", "name": "x", "description": "  the X position of the original mousedown"}, {"type": "int", "name": "y", "description": "  the Y position of the original mousedown"}], "description": "Fired when either the drag pixel threshol or the mousedown hold \ntime threshold has been met.", "guessedname": "startDrag", "guessedtype": "function"}, "getDDById": {"return": {"type": "DragDrop", "description": "the drag drop object, null if it is not found"}, "description": "Returns the DragDrop instance for a given id", "static": "", "guessedname": "getDDById", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the DragDrop object"}]}, "unregAll": {"guessedname": "unregAll", "static": "", "description": "Cleans up the drag and drop events and objects.", "private": "", "guessedtype": "function"}, "getScrollTop": {"static": "", "return": {"type": "int", "description": "the document's scrollTop"}, "description": "Gets the scrollTop", "guessedname": "getScrollTop", "guessedtype": "function"}, "stopEvent": {"static": "", "params": [{"type": "Event", "name": "e", "description": " the event as returned by this.getEvent()"}], "description": "Utility to stop event propagation and event default, if these \nfeatures are turned on.", "guessedname": "stopEvent", "guessedtype": "function"}, "getClientWidth": {"return": {"type": "int", "description": "client width in px"}, "description": "Gets the client width", "deprecated": "use YAHOO.util.Dom.getViewportWidth instead", "static": "", "guessedname": "getClientWidth", "guessedtype": "function"}, "unlock": {"static": "", "description": "Unlock all drag and drop functionality", "guessedname": "unlock", "guessedtype": "function"}, "stopDrag": {"static": "", "params": [{"type": "Event", "name": "e", "description": " the mouseup event, another event (or a fake event) \nwith pageX and pageY defined, or nothing if the \nsilent parameter is true"}, {"type": "boolean", "name": "silent", "description": " skips the enddrag and mouseup events if true"}], "description": "Ends the current drag, cleans up the state, and fires the endDrag\nand mouseUp events.  Called internally when a mouseup is detected\nduring the drag.  Can be fired manually during the drag by passing\neither another event (such as the mousemove event received in onDrag)\nor a fake event with pageX and pageY defined (so that endDrag and\nonMouseUp have usable position data.).  Alternatively, pass true\nfor the silent parameter so that the endDrag and onMouseUp events\nare skipped (so no event data is needed.)", "guessedname": "stopDrag", "guessedtype": "function"}, "getPosX": {"return": {"type": "int", "description": "the X coordinate"}, "description": "Returns the X position of an html element", "deprecated": "use YAHOO.util.Dom.getX instead", "static": "", "guessedname": "getPosX", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element for which to get the position"}]}, "_onResize": {"guessedname": "_onResize", "static": "", "description": "Reset constraints on all drag and drop objs", "private": "", "guessedtype": "function"}, "_onLoad": {"guessedname": "_onLoad", "static": "", "description": "Drag and drop initialization.  Sets up the global event handlers", "private": "", "guessedtype": "function"}, "fireEvents": {"description": "Iterates over all of the DragDrop elements to find ones we are \nhovering over or dropping on", "private": "", "static": "", "guessedname": "fireEvents", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}, {"type": "boolean", "name": "isDrop", "description": " is this a drop op or a mouseover op?"}]}, "handleMouseDown": {"description": "Fired after a registered DragDrop object gets the mousedown event.\nSets up the events required to track the object being dragged", "private": "", "static": "", "guessedname": "handleMouseDown", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}, {"type": "", "name": "oDD", "description": " the DragDrop object being dragged"}]}, "regDragDrop": {"static": "", "params": [{"type": "DragDrop", "name": "oDD", "description": " the DragDrop object to register"}, {"type": "String", "name": "sGroup", "description": " the name of the group this element belongs to"}], "description": "Each DragDrop instance must be registered with the DragDropMgr.  \nThis is executed in DragDrop.init()", "guessedname": "regDragDrop", "guessedtype": "function"}, "handleMouseMove": {"description": "Internal function to handle the mousemove event.  Will be invoked \nfrom the context of the html element.", "private": "", "static": "", "guessedname": "handleMouseMove", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}], "todo": "figure out what we can do about mouse events lost when the \nuser drags objects beyond the window boundary.  Currently we can \ndetect this in internet explorer by verifying that the mouse is \ndown during the mousemove event.  Firefox doesn't give us the \nbutton state on the mousemove event."}, "getElement": {"return": {"type": "Object", "description": "The element"}, "description": "Returns the actual DOM element", "deprecated": "use YAHOO.util.Dom.get instead", "static": "", "guessedname": "getElement", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the elment to get"}]}, "init": {"guessedname": "init", "static": "", "description": "Called the first time an element is registered.", "private": "", "guessedtype": "function"}, "_execOnAll": {"guessedname": "_execOnAll", "static": "", "description": "Runs method on all drag and drop objects", "private": "", "guessedtype": "function"}, "getCss": {"return": {"type": "Object", "description": "The style property of the element"}, "description": "Returns the style property for the DOM element (i.e., \ndocument.getElById(id).style)", "deprecated": "use YAHOO.util.Dom instead", "static": "", "guessedname": "getCss", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the elment to get"}]}, "_remove": {"guessedname": "_remove", "static": "", "description": "Unregisters a drag and drop item.  This is executed in \nDragDrop.unreg, use that method instead of calling this directly.", "private": "", "guessedtype": "function"}, "isTypeOfDD": {"return": {"type": "boolean", "description": "true if typeof oDD = DragDrop"}, "description": "My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof \nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop.", "static": "", "guessedname": "isTypeOfDD", "guessedtype": "function", "params": [{"type": "Object", "name": "the", "description": " object to evaluate"}]}, "isLocked": {"static": "", "return": {"type": "boolean", "description": "True if drag and drop is locked, false otherwise."}, "description": "Is drag and drop locked?", "guessedname": "isLocked", "guessedtype": "function"}, "getClientHeight": {"return": {"type": "int", "description": "client height in px"}, "description": "Gets the client height", "deprecated": "use YAHOO.util.Dom.getViewportHeight instead", "static": "", "guessedname": "getClientHeight", "guessedtype": "function"}, "getBestMatch": {"return": {"type": "DragDrop", "description": "The best single match"}, "description": "Helper function for getting the best match from the list of drag \nand drop objects returned by the drag and drop events when we are \nin INTERSECT mode.  It returns either the first object that the \ncursor is over, or the object that has the greatest overlap with \nthe dragged element.", "static": "", "guessedname": "getBestMatch", "guessedtype": "function", "params": [{"type": "DragDrop[]", "name": "dds", "description": " The array of drag and drop objects \ntargeted"}]}, "lock": {"static": "", "description": "Lock all drag and drop functionality", "guessedname": "lock", "guessedtype": "function"}, "numericSort": {"static": "", "description": "Numeric array sort function", "guessedname": "numericSort", "guessedtype": "function"}, "isOverTarget": {"return": {"type": "boolean", "description": "true if the mouse is over the target"}, "description": "Checks the cursor location to see if it over the target", "private": "", "static": "", "guessedname": "isOverTarget", "guessedtype": "function", "params": [{"type": "YAHOO.util.Point", "name": "pt", "description": " The point to evaluate"}, {"type": "DragDrop", "name": "oTarget", "description": " the DragDrop object we are inspecting"}, {"type": "boolean", "name": "intersect", "description": " true if we are in intersect mode"}, {"type": "YAHOO.util.Region", "name": "pre-cached", "description": " location of the dragged element"}]}, "isDragDrop": {"return": {"type": "boolean", "description": "true if this element is a DragDrop item, \nfalse otherwise"}, "description": "Utility function to determine if a given element has been \nregistered as a drag drop item.", "static": "", "guessedname": "isDragDrop", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the element id to check"}]}, "_onUnload": {"guessedname": "_onUnload", "static": "", "description": "unload event handler", "private": "", "guessedtype": "function"}, "getLocation": {"return": {"type": "YAHOO.util.Region", "description": "a Region object representing the total area\nthe element occupies, including any padding\nthe instance is configured for."}, "description": "Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it", "static": "", "guessedname": "getLocation", "guessedtype": "function", "params": [{"type": "DragDrop", "name": "oDD", "description": " the drag and drop object to get the \nlocation for"}]}, "regHandle": {"static": "", "params": [{"type": "String", "name": "sDDId", "description": " the DragDrop id this element is a handle for"}, {"type": "String", "name": "sHandleId", "description": " the id of the element that is the drag \nhandle"}], "description": "Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()", "guessedname": "regHandle", "guessedtype": "function"}, "getRelated": {"return": {"type": "DragDrop[]", "description": "the related instances"}, "description": "Returns the drag and drop instances that are in all groups the\npassed in instance belongs to.", "static": "", "guessedname": "getRelated", "guessedtype": "function", "params": [{"type": "DragDrop", "name": "p_oDD", "description": " the obj to get related data for"}, {"type": "boolean", "name": "bTargetsOnly", "description": " if true, only return targetable objs"}]}, "handleWasClicked": {"static": "", "params": [{"type": "", "name": "node", "description": " the html element to inspect"}], "description": "Recursively searches the immediate parent and all child nodes for \nthe handle element in order to determine wheter or not it was \nclicked.", "guessedname": "handleWasClicked", "guessedtype": "function"}, "swapNode": {"static": "", "params": [{"type": "", "name": "n1", "description": " the first node to swap"}, {"type": "", "name": "n2", "description": " the other node to swap"}], "description": "Swap two nodes.  In IE, we use the native method, for others we \nemulate the IE behavior", "guessedname": "swapNode", "guessedtype": "function"}, "getScrollLeft": {"static": "", "return": {"type": "int", "description": "the document's scrollTop"}, "description": "Gets the scrollLeft", "guessedname": "getScrollLeft", "guessedtype": "function"}, "getElWrapper": {"return": {"type": "YAHOO.util.DDM.ElementWrapper", "description": "the wrapped element"}, "description": "Get the wrapper for the DOM element specified", "deprecated": "This wrapper isn't that useful", "private": "", "static": "", "guessedname": "getElWrapper", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the element to get"}]}, "_addListeners": {"guessedname": "_addListeners", "static": "", "description": "Trying to make the load order less important.  Without this we get\nan error if this file is loaded before the Event Utility.", "private": "", "guessedtype": "function"}, "getStyle": {"return": {"type": "string", "description": "The value of the style property"}, "description": "Returns the specified element style property", "deprecated": "use YAHOO.util.Dom.getStyle", "static": "", "guessedname": "getStyle", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "          the element"}, {"type": "string", "name": "styleProp", "description": "   the style property"}]}, "getPosY": {"return": {"type": "int", "description": "the Y coordinate"}, "description": "Returns the Y position of an html element", "deprecated": "use YAHOO.util.Dom.getY instead", "static": "", "guessedname": "getPosY", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element for which to get the position"}]}, "isLegalTarget": {"return": {"type": "boolean", "description": "true if the target is a legal target for the \ndd obj"}, "description": "Returns true if the specified dd target is a legal target for \nthe specifice drag obj", "static": "", "guessedname": "isLegalTarget", "guessedtype": "function", "params": [{"type": "DragDrop", "name": "the", "description": " drag obj"}, {"type": "DragDrop", "name": "the", "description": " target"}]}, "refreshCache": {"description": "Refreshes the cache of the top-left and bottom-right points of the \ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical \nusage is:\n<code>\nYAHOO.util.DragDropMgr.refreshCache(ddinstance.groups);\n<\/code>\nAlternatively:\n<code>\nYAHOO.util.DragDropMgr.refreshCache({group1:true, group2:true});\n<\/code>", "static": "", "guessedname": "refreshCache", "guessedtype": "function", "params": [{"type": "Object", "name": "groups", "description": " an associative array of groups to refresh"}], "todo": "this really should be an indexed array.  Alternatively this\nmethod could accept both."}, "isHandle": {"return": {"type": "boolean", "description": "true if this element is a DragDrop handle, false \notherwise"}, "description": "Utility function to determine if a given element has been \nregistered as a drag drop handle for the given Drag Drop object.", "static": "", "guessedname": "isHandle", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the element id to check"}]}, "handleMouseUp": {"description": "Internal function to handle the mouseup event.  Will be invoked \nfrom the context of the document.", "private": "", "static": "", "guessedname": "handleMouseUp", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}]}, "verifyEl": {"return": {"type": "boolean", "description": "true if the element looks usable"}, "description": "This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.  IE provides an 'unspecified\nerror' when trying to access the offsetParent of such an element", "static": "", "guessedname": "verifyEl", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to check"}]}, "getScroll": {"guessedname": "getScroll", "static": "", "description": "Returns the current scroll position", "private": "", "guessedtype": "function"}, "moveToEl": {"static": "", "params": [{"type": "HTMLElement", "name": "moveEl", "description": "      The element to move"}, {"type": "HTMLElement", "name": "targetEl", "description": "    The position reference element"}], "description": "Sets the x\/y position of an element to the location of the\ntarget element.", "guessedname": "moveToEl", "guessedtype": "function"}}, "static": "", "file": "DragDropMgr.js", "guessedtype": "function", "shortname": "DragDropMgr", "properties": {"dragThreshMet": {"description": "Flag that indicates that either the drag pixel threshold or the \nmousdown time threshold has been met", "private": "", "static": "", "guessedname": "dragThreshMet", "guessedtype": "property", "type": "boolean"}, "clickPixelThresh": {"type": "int", "static": "", "description": "The number of pixels that the mouse needs to move after the \nmousedown before the drag is initiated.  Default=3;", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "_timeoutCount": {"guessedname": "_timeoutCount", "static": "", "description": "Internal counter", "private": "", "guessedtype": "property"}, "initialized": {"guessedname": "initialized", "static": "", "description": "Internal flag that is set to true when drag and drop has been\ninitialized", "private": "", "guessedtype": "property"}, "elementCache": {"description": "A cache of DOM elements", "deprecated": "elements are not cached now", "private": "", "static": "", "guessedname": "elementCache", "guessedtype": "property"}, "stopPropagation": {"type": "boolean", "static": "", "description": "Flag to determine if we should stop the propagation of the events \nwe generate. This is true by default but you may want to set it to\nfalse if the html element contains other features that require the\nmouse click.", "guessedname": "stopPropagation", "guessedtype": "property"}, "handleIds": {"description": "Array of element ids defined as drag handles.  Used to determine \nif the element that generated the mousedown event is actually the \nhandle and not the html element itself.", "private": "", "static": "", "guessedname": "handleIds", "guessedtype": "property", "type": "{string: string}"}, "POINT": {"description": "In point mode, drag and drop interaction is defined by the \nlocation of the cursor during the drag\/drop", "static": "", "guessedname": "POINT", "guessedtype": "property", "type": "int", "final": ""}, "deltaX": {"description": "the X distance between the cursor and the object being dragged", "private": "", "static": "", "guessedname": "deltaX", "guessedtype": "property", "type": "int"}, "deltaY": {"description": "the Y distance between the cursor and the object being dragged", "private": "", "static": "", "guessedname": "deltaY", "guessedtype": "property", "type": "int"}, "dragOvers": {"description": "the DragDrop object(s) that are being hovered over", "private": "", "static": "", "guessedname": "dragOvers", "guessedtype": "property", "type": "Array"}, "useCache": {"type": "boolean", "static": "", "description": "Set useCache to false if you want to force object the lookup of each\ndrag and drop linked element constantly during a drag.", "guessedname": "useCache", "guessedtype": "property"}, "fromTimeout": {"description": "Flag to determine if the drag event was fired from the click timeout and\nnot the mouse move threshold.", "private": "", "static": "", "guessedname": "fromTimeout", "guessedtype": "property", "type": "boolean"}, "clickTimeThresh": {"type": "int", "static": "", "description": "The number of milliseconds after the mousedown event to initiate the\ndrag if we don't get a mouseup event. Default=1000", "guessedname": "clickTimeThresh", "guessedtype": "property"}, "startX": {"description": "The X position of the mousedown event stored for later use when a \ndrag threshold is met.", "private": "", "static": "", "guessedname": "startX", "guessedtype": "property", "type": "int"}, "startY": {"description": "The Y position of the mousedown event stored for later use when a \ndrag threshold is met.", "private": "", "static": "", "guessedname": "startY", "guessedtype": "property", "type": "int"}, "clickTimeout": {"description": "Timeout used for the click time threshold", "private": "", "static": "", "guessedname": "clickTimeout", "guessedtype": "property", "type": "Object"}, "STRICT_INTERSECT": {"description": "In intersect mode, drag and drop interaction is defined only by the \noverlap of two or more drag and drop objects.", "static": "", "guessedname": "STRICT_INTERSECT", "guessedtype": "property", "type": "int", "final": ""}, "interactionInfo": {"type": "object", "static": "", "description": "Provides additional information about the the current set of\ninteractions.  Can be accessed from the event handlers. It\ncontains the following properties:\nout:       onDragOut interactions\nenter:     onDragEnter interactions\nover:      onDragOver interactions\ndrop:      onDragDrop interactions\npoint:     The location of the cursor\ndraggedRegion: The location of dragged element at the time\nof the interaction\nsourceRegion: The location of the source elemtn at the time\nof the interaction\nvalidDrop: boolean", "guessedname": "interactionInfo", "guessedtype": "property"}, "locationCache": {"guessedname": "locationCache", "static": "", "description": "Location cache that is set for all drag drop objects when a drag is\ninitiated, cleared when the drag is finished.", "private": "", "guessedtype": "property"}, "INTERSECT": {"description": "In intersect mode, drag and drop interaction is defined by the \ncursor position or the amount of overlap of two or more drag and \ndrop objects.", "static": "", "guessedname": "INTERSECT", "guessedtype": "property", "type": "int", "final": ""}, "locked": {"guessedname": "locked", "static": "", "description": "All drag and drop can be disabled.", "private": "", "guessedtype": "property"}, "dragCurrent": {"description": "the DragDrop object that is currently being dragged", "private": "", "static": "", "guessedname": "dragCurrent", "guessedtype": "property", "type": "DragDrop"}, "preventDefault": {"type": "boolean", "static": "", "description": "Flag to determine if we should prevent the default behavior of the\nevents we define. By default this is true, but this can be set to \nfalse if you need the default behavior (not recommended)", "guessedname": "preventDefault", "guessedtype": "property"}, "ids": {"description": "Two dimensional Array of registered DragDrop objects.  The first \ndimension is the DragDrop item group, the second the DragDrop \nobject.", "private": "", "static": "", "guessedname": "ids", "guessedtype": "property", "type": "{string: string}"}, "mode": {"type": "int", "static": "", "description": "The current drag and drop mode.  Default: POINT", "guessedname": "mode", "guessedtype": "property"}}, "description": "DragDropMgr is a singleton that tracks the element interaction for \nall DragDrop items in the window.  Generally, you will not call \nthis class directly, but it does have helper methods that could \nbe useful in your DragDrop implementations."}, "YAHOO.widget.MenuItem": {"name": "YAHOO.widget.MenuItem", "configs": {"submenu": {"default": "null", "type": "Menu|String|Object|<a href=\"http:\/\/www.w3.org\/TR\/2000\/\nWD-DOM-Level-1-20000929\/level-one-html.html#ID-58190037\">\nHTMLElement<\/a>", "description": "Object specifying the submenu to be appended to the \nmenu item.  The value can be one of the following: <ul><li>Object \nspecifying a Menu instance.<\/li><li>Object literal specifying the\nmenu to be created.  Format: <code>{ id: [menu id], itemdata: \n[<a href=\"YAHOO.widget.Menu.html#itemData\">array of values for \nitems<\/a>] }<\/code>.<\/li><li>String specifying the id attribute \nof the <code>&#60;div&#62;<\/code> element of the menu.<\/li><li>\nObject specifying the <code>&#60;div&#62;<\/code> element of the \nmenu.<\/li><\/ul>"}, "classname": {"default": "null", "type": "String", "description": "CSS class to be applied to the menu item's root \n<code>&#60;li&#62;<\/code> element.  The specified class(es) are \nappended in addition to the default class as specified by the menu \nitem's CSS_CLASS_NAME constant."}, "checked": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu item should be rendered \nwith a checkmark."}, "target": {"default": "null", "type": "String", "description": "String specifying the value for the \"target\" attribute \nof the menu item's anchor element. <strong>Specifying a target will \nrequire the user to click directly on the menu item's anchor node in\norder to cause the browser to navigate to the specified URL.<\/strong> \nWhen building a menu from existing HTML the value of this property \nwill be interpreted from the menu's markup."}, "url": {"default": "\"#\"", "type": "String", "description": "String specifying the URL for the menu item's anchor's \n\"href\" attribute.  When building a menu from existing HTML the value \nof this property will be interpreted from the menu's markup."}, "text": {"default": "\"\"", "type": "String", "description": "String specifying the text label for the menu item.  \nWhen building a menu from existing HTML the value of this property\nwill be interpreted from the menu's markup."}, "selected": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu item should \nbe highlighted."}, "strongemphasis": {"default": "false", "deprecated": "Use \"text\" configuration property to add strong emphasis.  \nFor example: <code>oMenuItem.cfg.setProperty(\"text\", \"&#60;strong&#62; \nSome Text&#60;\/strong&#60;\");<\/code>", "type": "Boolean", "description": "Boolean indicating if the text of the menu item will be \nrendered with strong emphasis."}, "disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu item should be disabled.  \n(Disabled menu items are  dimmed and will not respond to user input \nor fire events.)"}, "emphasis": {"default": "false", "deprecated": "Use \"text\" configuration property to add emphasis.  \nFor example: <code>oMenuItem.cfg.setProperty(\"text\", \"&#60;em&#62;Some \nText&#60;\/em&#60;\");<\/code>", "type": "Boolean", "description": "Boolean indicating if the text of the menu item will be \nrendered with emphasis."}, "helptext": {"default": "null", "deprecated": "Use \"text\" configuration property to add help text markup.  \nFor example: <code>oMenuItem.cfg.setProperty(\"text\", \"Copy &#60;em \nclass=\\\"helptext\\\"&#62;Ctrl + C&#60;\/em&#60;\");<\/code>", "type": "String|<a href=\"http:\/\/www.w3.org\/TR\/\n2000\/WD-DOM-Level-1-20000929\/level-one-html.html#ID-58190037\">\nHTMLElement<\/a>", "description": "String specifying additional instructional text to \naccompany the text for the menu item."}, "onclick": {"default": "null", "type": "Object", "description": "Object literal representing the code to be executed when \nthe item is clicked.  Format:<br> <code> {<br> \n<strong>fn:<\/strong> Function,   &#47;&#47; The handler to call when \nthe event fires.<br> <strong>obj:<\/strong> Object, &#47;&#47; An \nobject to  pass back to the handler.<br> <strong>scope:<\/strong> \nObject &#47;&#47; The object to use for the scope of the handler.\n<br> } <\/code>"}}, "constructors": [{"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;li&#62;<\/code> element of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;option&#62;<\/code> element of the menu item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu item. See configuration class documentation \nfor more details."}], "description": "Creates an item for a menu."}], "namespace": "YAHOO.widget", "module": "menu", "events": {"mouseOutEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the mouse has left the menu item.  Passes back \nthe DOM Event object as an argument.", "guessedname": "mouseOutEvent", "guessedtype": "property"}, "mouseUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a mouse button while the mouse \nis over the menu item.  Passes back the DOM Event object as an argument.", "guessedname": "mouseUpEvent", "guessedtype": "property"}, "keyUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a key when the menu item has \nfocus.  Passes back the DOM Event object as an argument.", "guessedname": "keyUpEvent", "guessedtype": "property"}, "focusEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item receives focus.", "guessedname": "focusEvent", "guessedtype": "property"}, "keyPressEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses an alphanumeric key when the \nmenu item has focus.  Passes back the DOM Event object as an argument.", "guessedname": "keyPressEvent", "guessedtype": "property"}, "mouseOverEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the mouse has entered the menu item.  Passes \nback the DOM Event object as an argument.", "guessedname": "mouseOverEvent", "guessedtype": "property"}, "blurEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item loses the input focus.", "guessedname": "blurEvent", "guessedtype": "property"}, "mouseDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user mouses down on the menu item.  Passes \nback the DOM Event object as an argument.", "guessedname": "mouseDownEvent", "guessedtype": "property"}, "clickEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user clicks the on the menu item.  Passes \nback the DOM Event object as an argument.", "guessedname": "clickEvent", "guessedtype": "property"}, "destroyEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item's <code>&#60;li&#62;<\/code> \nelement is removed from its parent <code>&#60;ul&#62;<\/code> element.", "guessedname": "destroyEvent", "guessedtype": "property"}, "keyDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses a key when the menu item has \nfocus.  Passes back the DOM Event object as an argument.", "guessedname": "keyDownEvent", "guessedtype": "property"}}, "guessedname": "MenuItem", "methods": {"_createRootNodeStructure": {"description": "Creates the core DOM structure for the menu item.", "private": "", "guessedname": "_createRootNodeStructure", "guessedtype": "function"}, "hasFocus": {"return": {"type": "Boolean", "description": ""}, "description": "Returns a boolean indicating whether or not the menu item\nhas focus.", "guessedname": "hasFocus", "guessedtype": "function"}, "configURL": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"url\" configuration property of \nthe menu item changes.", "guessedname": "configURL", "guessedtype": "function"}, "focus": {"description": "Causes the menu item to receive the focus and fires the \nfocus event.", "guessedname": "focus", "guessedtype": "function"}, "configEmphasis": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"emphasis\" configuration property\nof the menu item changes.", "guessedname": "configEmphasis", "guessedtype": "function"}, "configTarget": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"target\" configuration property \nof the menu item changes.", "guessedname": "configTarget", "guessedtype": "function"}, "configStrongEmphasis": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"strongemphasis\" configuration \nproperty of the menu item changes.", "guessedname": "configStrongEmphasis", "guessedtype": "function"}, "configSubmenu": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"submenu\" configuration property \nof the menu item changes.", "guessedname": "configSubmenu", "guessedtype": "function"}, "configOnClick": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"onclick\" configuration property \nof the menu item changes.", "guessedname": "configOnClick", "guessedtype": "function"}, "getPreviousEnabledSibling": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Finds the menu item's previous enabled sibling.", "guessedname": "getPreviousEnabledSibling", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;li&#62;<\/code> element of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;option&#62;<\/code> element of the menu item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu item. See configuration class documentation \nfor more details."}], "description": "The MenuItem class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references \nfor pre-existing markup, and creates required markup if it is not \nalready present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu item.", "guessedname": "toString", "guessedtype": "function"}, "_onSubmenuBeforeHide": {"guessedname": "_onSubmenuBeforeHide", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"beforehide\" Custom Event handler for a submenu.", "private": "", "guessedtype": "function"}, "blur": {"description": "Causes the menu item to lose focus and fires the \nblur event.", "guessedname": "blur", "guessedtype": "function"}, "configHelpText": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"helptext\" configuration property \nof the menu item changes.", "guessedname": "configHelpText", "guessedtype": "function"}, "destroy": {"description": "Removes the menu item's <code>&#60;li&#62;<\/code> element \nfrom its parent <code>&#60;ul&#62;<\/code> element.", "guessedname": "destroy", "guessedtype": "function"}, "getNextEnabledSibling": {"return": {"type": "", "description": "YAHOO.widget.MenuItem"}, "description": "Finds the menu item's next enabled sibling.", "guessedname": "getNextEnabledSibling", "guessedtype": "function"}, "configChecked": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"checked\" configuration property \nof the menu item changes.", "guessedname": "configChecked", "guessedtype": "function"}, "configDisabled": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"disabled\" configuration property \nof the menu item changes.", "guessedname": "configDisabled", "guessedtype": "function"}, "configSelected": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"selected\" configuration property \nof the menu item changes.", "guessedname": "configSelected", "guessedtype": "function"}, "_initSubTree": {"description": "Iterates the source element's childNodes collection and uses \nthe child nodes to instantiate other menus.", "private": "", "guessedname": "_initSubTree", "guessedtype": "function"}, "configClassName": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"classname\" configuration \nproperty of a menu item changes.", "guessedname": "configClassName", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"text\" configuration property of \nthe menu item changes.", "guessedname": "configText", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes an item's configurable properties.", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "file": "menuitem.js", "guessedtype": "function", "shortname": "MenuItem", "properties": {"_oSubmenu": {"description": "Object reference to the menu item's submenu.", "default": "null", "private": "", "guessedname": "_oSubmenu", "guessedtype": "property", "type": "YAHOO.widget.Menu"}, "index": {"default": "null", "type": "Number", "description": "Number indicating the ordinal position of the menu item in \nits group.", "guessedname": "index", "guessedtype": "property"}, "CSS_LABEL_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \nmenu item's <code>&#60;a&#62;<\/code> element.", "default": "\"yuimenuitemlabel\"", "guessedname": "CSS_LABEL_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \n<code>&#60;li&#62;<\/code> element of the menu item.", "default": "\"yuimenuitem\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "parent": {"default": "null", "type": "YAHOO.widget.Menu", "description": "Object reference to the menu item's parent menu.", "guessedname": "parent", "guessedtype": "property"}, "SUBMENU_TYPE": {"final": "", "type": "YAHOO.widget.Menu", "description": "Object representing the type of menu to instantiate and \nadd when parsing the child nodes of the menu item's source HTML element.", "guessedname": "SUBMENU_TYPE", "guessedtype": "property"}, "srcElement": {"default": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-74680021\">HTMLLIElement<\/a>|<a href=\"http:\/\/www.\nw3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html#ID-38450247\"\n>HTMLOptGroupElement<\/a>|<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-\nLevel-1-20000929\/level-one-html.html#ID-70901257\">HTMLOptionElement<\/a>", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>|<a href=\"http:\/\/www.w3.\norg\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html#ID-38450247\">\nHTMLOptGroupElement<\/a>|<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-\nLevel-1-20000929\/level-one-html.html#ID-70901257\">HTMLOptionElement<\/a>", "description": "Object reference to the HTML element (either \n<code>&#60;li&#62;<\/code>, <code>&#60;optgroup&#62;<\/code> or \n<code>&#60;option&#62;<\/code>) used create the menu item.", "guessedname": "srcElement", "guessedtype": "property"}, "value": {"default": "null", "type": "Object", "description": "Object reference to the menu item's value.", "guessedname": "value", "guessedtype": "property"}, "element": {"default": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level\n-one-html.html#ID-74680021\">HTMLLIElement<\/a>", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "description": "Object reference to the menu item's \n<code>&#60;li&#62;<\/code> element.", "guessedname": "element", "guessedtype": "property"}, "_sClassName": {"description": "The current value of the \"classname\" configuration attribute.", "default": "null", "private": "", "guessedname": "_sClassName", "guessedtype": "property", "type": "String"}, "EVENT_TYPES": {"description": "Constant representing the name of the MenuItem's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "constructor": {"default": "YAHOO.widget.MenuItem", "type": "YAHOO.widget.MenuItem", "description": "Object reference to the menu item's constructor function.", "guessedname": "constructor", "guessedtype": "property"}, "groupIndex": {"default": "null", "type": "Number", "description": "Number indicating the index of the group to which the menu \nitem belongs.", "guessedname": "groupIndex", "guessedtype": "property"}, "browser": {"deprecated": "Use YAHOO.env.ua", "type": "String", "description": "String representing the browser.", "guessedname": "browser", "guessedtype": "property"}, "_oOnclickAttributeValue": {"description": "Object reference to the menu item's current value for the \n\"onclick\" configuration attribute.", "default": "null", "private": "", "guessedname": "_oOnclickAttributeValue", "guessedtype": "property", "type": "Object"}, "_oHelpTextEM": {"description": "Object reference to the menu item's help text \n<code>&#60;em&#62;<\/code> element.", "default": "null", "private": "", "guessedname": "_oHelpTextEM", "guessedtype": "property", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-58190037\">HTMLElement<\/a>"}, "id": {"default": "null", "type": "String", "description": "Id of the menu item's root <code>&#60;li&#62;<\/code> \nelement.  This property should be set via the constructor using the \nconfiguration object literal.  If an id is not specified, then one will \nbe created using the \"generateId\" method of the Dom utility.", "guessedname": "id", "guessedtype": "property"}, "DEFAULT_CONFIG": {"description": "Constant representing the MenuItem's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "_oAnchor": {"description": "Object reference to the menu item's \n<code>&#60;a&#62;<\/code> element.", "default": "null", "private": "", "guessedname": "_oAnchor", "guessedtype": "property", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-48250443\">HTMLAnchorElement<\/a>"}}, "description": "Creates an item for a menu."}, "YAHOO.widget.CartesianSeries": {"name": "YAHOO.widget.CartesianSeries", "constructors": [{"description": "CartesianSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "CartesianSeries", "file": "Series.js", "guessedtype": "function", "shortname": "CartesianSeries", "description": "CartesianSeries class for the YUI Charts widget."}, "YAHOO.util.Scroll": {"name": "YAHOO.util.Scroll", "constructors": [{"params": [{"type": "String or HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for scrolling elements to a position defined by the \"scroll\"\nmember of \"attributes\".  All \"scroll\" members are arrays with x, y scroll positions.\n<p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}], "namespace": "YAHOO.util", "module": "animation", "guessedname": "Scroll", "extends": "YAHOO.util.Anim", "superclass": "YAHOO.util.Anim", "file": "Scroll.js", "guessedtype": "function", "shortname": "Scroll", "requires": "YAHOO.util.Anim", "description": "Anim subclass for scrolling elements to a position defined by the \"scroll\"\nmember of \"attributes\".  All \"scroll\" members are arrays with x, y scroll positions.\n<p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}, "YAHOO.widget.DateMath": {"name": "YAHOO.widget.DateMath", "namespace": "YAHOO.widget", "module": "calendar", "guessedname": "DateMath", "methods": {"isYearOverlapWeek": {"return": {"type": "Boolean", "description": "true if the date overlaps two different years."}, "params": [{"type": "Date", "name": "weekBeginDate", "description": "\tThe JavaScript Date representing the first day of the week."}], "description": "Determines if a given week overlaps two different years.", "guessedname": "isYearOverlapWeek", "guessedtype": "function"}, "getWeekNumber": {"return": {"type": "Number", "description": "The week number of the given date."}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript date for which to find the week number"}, {"type": "Number", "name": "calendarYear", "description": "\tOPTIONAL - The calendar year to use for determining the week number. Default is\nthe calendar year of parameter \"date\"."}], "description": "Calculates the week number for the given date. This function assumes that week 1 is the\nweek in which January 1 appears, regardless of whether the week consists of a full 7 days.\nThe calendar year can be specified to help find what a the week number would be for a given\ndate if the date overlaps years. For instance, a week may be considered week 1 of 2005, or\nweek 53 of 2004. Specifying the optional calendarYear allows one to make this distinction\neasily.", "guessedname": "getWeekNumber", "guessedtype": "function"}, "getDayOffset": {"return": {"type": "Number", "description": "The number of days since January 1 of the given year"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript date for which to find the offset"}, {"type": "Number", "name": "calendarYear", "description": "\tThe calendar year to use for determining the offset"}], "description": "Calculates the number of days the specified date is from January 1 of the specified calendar year.\nPassing January 1 to this function would return an offset value of zero.", "guessedname": "getDayOffset", "guessedtype": "function"}, "findMonthEnd": {"return": {"type": "Date", "description": "The JavaScript Date representing the last day of the month"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date used to calculate the month end"}], "description": "Gets the last day of a month containing a given date.", "guessedname": "findMonthEnd", "guessedtype": "function"}, "after": {"return": {"type": "Boolean", "description": "true if the date occurs after the compared date; false if not."}, "params": [{"type": "Date", "name": "date", "description": "\t\tThe Date object to compare with the compare argument"}, {"type": "Date", "name": "compareTo", "description": "\tThe Date object to use for the comparison"}], "description": "Determines whether a given date is after another date on the calendar.", "guessedname": "after", "guessedtype": "function"}, "clearTime": {"return": {"type": "Date", "description": "The JavaScript Date cleared of all time fields"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date for which the time fields will be cleared"}], "description": "Clears the time fields from a given date, effectively setting the time to 12 noon.", "guessedname": "clearTime", "guessedtype": "function"}, "isMonthOverlapWeek": {"return": {"type": "Boolean", "description": "true if the date overlaps two different months."}, "params": [{"type": "Date", "name": "weekBeginDate", "description": "\tThe JavaScript Date representing the first day of the week."}], "description": "Determines if a given week overlaps two different months.", "guessedname": "isMonthOverlapWeek", "guessedtype": "function"}, "add": {"return": {"type": "Date", "description": "The resulting Date object"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date object to perform addition on"}, {"type": "String", "name": "field", "description": "\tThe field constant to be used for performing addition."}, {"type": "Number", "name": "amount", "description": "\tThe number of units (measured in the field constant) to add to the date."}], "description": "Adds the specified amount of time to the this instance.", "guessedname": "add", "guessedtype": "function"}, "getJan1": {"return": {"type": "Date", "description": "January 1 of the calendar year specified."}, "params": [{"type": "Number", "name": "calendarYear", "description": "\t\tThe calendar year for which to retrieve January 1"}], "description": "Retrieves a JavaScript Date object representing January 1 of any given year.", "guessedname": "getJan1", "guessedtype": "function"}, "between": {"return": {"type": "Boolean", "description": "true if the date occurs between the compared dates; false if not."}, "params": [{"type": "Date", "name": "date", "description": "\t\tThe date to check for"}, {"type": "Date", "name": "dateBegin", "description": "\tThe start of the range"}, {"type": "Date", "name": "dateEnd", "description": "\t\tThe end of the range"}], "description": "Determines whether a given date is between two other dates on the calendar.", "guessedname": "between", "guessedtype": "function"}, "findMonthStart": {"return": {"type": "Date", "description": "The JavaScript Date representing the first day of the month"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date used to calculate the month start"}], "description": "Gets the first day of a month containing a given date.", "guessedname": "findMonthStart", "guessedtype": "function"}, "getDate": {"return": {"type": "Date", "description": "The JavaScript date object with year, month, date set as provided."}, "params": [{"type": "Number", "name": "y", "description": " Year."}, {"type": "Number", "name": "m", "description": " Month index from 0 (Jan) to 11 (Dec)."}, {"type": "Number", "name": "d", "description": " (optional) Date from 1 to 31. If not provided, defaults to 1."}], "description": "Returns a new JavaScript Date object, representing the given year, month and date. Time fields (hr, min, sec, ms) on the new Date object\nare set to 0. The method allows Date instances to be created with the a year less than 100. \"new Date(year, month, date)\" implementations \nset the year to 19xx if a year (xx) which is less than 100 is provided.\n<p>\n<em>NOTE:<\/em>Validation on argument values is not performed. It is the caller's responsibility to ensure\narguments are valid as per the ECMAScript-262 Date object specification for the new Date(year, month[, date]) constructor.\n<\/p>", "guessedname": "getDate", "guessedtype": "function"}, "subtract": {"return": {"type": "Date", "description": "The resulting Date object"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date object to perform subtraction on"}, {"type": "Number", "name": "field", "description": "\tThe this field constant to be used for performing subtraction."}, {"type": "Number", "name": "amount", "description": "\tThe number of units (measured in the field constant) to subtract from the date."}], "description": "Subtracts the specified amount of time from the this instance.", "guessedname": "subtract", "guessedtype": "function"}, "before": {"return": {"type": "Boolean", "description": "true if the date occurs before the compared date; false if not."}, "params": [{"type": "Date", "name": "date", "description": "\t\tThe Date object to compare with the compare argument"}, {"type": "Date", "name": "compareTo", "description": "\tThe Date object to use for the comparison"}], "description": "Determines whether a given date is before another date on the calendar.", "guessedname": "before", "guessedtype": "function"}}, "file": "DateMath.js", "guessedtype": "property", "shortname": "DateMath", "properties": {"WEEK": {"description": "Constant field representing Week", "static": "", "guessedname": "WEEK", "guessedtype": "property", "type": "String", "final": ""}, "MONTH": {"description": "Constant field representing Month", "static": "", "guessedname": "MONTH", "guessedtype": "property", "type": "String", "final": ""}, "ONE_DAY_MS": {"description": "Constant field representing one day, in milliseconds", "static": "", "guessedname": "ONE_DAY_MS", "guessedtype": "property", "type": "Number", "final": ""}, "DAY": {"description": "Constant field representing Day", "static": "", "guessedname": "DAY", "guessedtype": "property", "type": "String", "final": ""}, "YEAR": {"description": "Constant field representing Year", "static": "", "guessedname": "YEAR", "guessedtype": "property", "type": "String", "final": ""}}, "description": "YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility\nused for adding, subtracting, and comparing dates."}, "YAHOO.util.Color": {"description": "Provides color conversion and validation utils", "namespace": "YAHOO.util", "module": "colorpicker", "guessedname": "Color", "methods": {"hsv2rgb": {"return": {"type": "[int, int, int]", "description": "the red, green, blue values in\ndecimal."}, "params": [{"type": "int|[int, float, float]", "name": "h", "description": "  the hue, or an\narray containing all three parameters"}, {"type": "float", "name": "s", "description": "  the saturation"}, {"type": "float", "name": "v", "description": "  the value\/brightness"}], "description": "Converts HSV (h[0-360], s[0-1]), v[0-1] to RGB [255,255,255]", "guessedname": "hsv2rgb", "guessedtype": "function"}, "websafe": {"return": {"type": "[int, int, int]", "description": "an array containing the closes\nwebsafe rgb colors."}, "params": [{"type": "int|[int, int, int]", "name": "r", "description": "  the red value, or an\narray containing all three parameters"}, {"type": "int", "name": "g", "description": "  the green value"}, {"type": "int", "name": "b", "description": "  the blue value"}], "description": "Returns the closest websafe color to the supplied rgb value.", "guessedname": "websafe", "guessedtype": "function"}, "rgb2hsv": {"return": {"type": "[int, float, float]", "description": "the value converted to hsv"}, "params": [{"type": "int|[int, int, int]", "name": "r", "description": "  the red value, or an\narray containing all three parameters"}, {"type": "int", "name": "g", "description": "  the green value"}, {"type": "int", "name": "b", "description": "  the blue value"}], "description": "Converts to RGB [255,255,255] to HSV (h[0-360], s[0-1]), v[0-1]", "guessedname": "rgb2hsv", "guessedtype": "function"}, "_createHostElement": {"private": "", "description": "Creates the host element if it doesn't exist", "guessedname": "_createHostElement", "guessedtype": "function"}, "hex2dec": {"return": {"type": "int", "description": "the decimal"}, "params": [{"type": "string", "name": "str", "description": "  the hex pair to convert"}], "description": "Converts a hex pair 00...FF to an int 0...255", "guessedname": "hex2dec", "guessedtype": "function"}, "rgb2hex": {"return": {"type": "string", "description": "the hex string"}, "params": [{"type": "int|[int, int, int]", "name": "r", "description": "  the red value, or an\narray containing all three parameters"}, {"type": "int", "name": "g", "description": "  the green value"}, {"type": "int", "name": "b", "description": "  the blue value"}], "description": "Converts decimal rgb values into a hex string\n255,255,255 -> FFFFFF", "guessedname": "rgb2hex", "guessedtype": "function"}, "real2dec": {"return": {"type": "int", "description": "a number 0-255"}, "params": [{"type": "float", "name": "n", "description": "  the number to convert"}], "description": "Converts 0-1 to 0-255", "guessedname": "real2dec", "guessedtype": "function"}, "dec2hex": {"return": {"type": "string", "description": "the hex equivalent"}, "params": [{"type": "int", "name": "n", "description": "  the number to convert"}], "description": "Converts an int 0...255 to hex pair 00...FF", "guessedname": "dec2hex", "guessedtype": "function"}, "hex2rgb": {"return": {"type": "[int, int, int]", "description": "an array containing the rgb values"}, "params": [{"type": "string", "name": "str", "description": "  the hex string"}], "description": "Converts a hex string to rgb", "guessedname": "hex2rgb", "guessedtype": "function"}}, "file": "Color.js", "guessedtype": "function", "shortname": "Color", "name": "YAHOO.util.Color"}, "YAHOO.widget.SimpleDialog": {"name": "YAHOO.widget.SimpleDialog", "configs": {"text": {"default": "\"\"", "type": "String", "description": "Sets the text for the SimpleDialog"}, "icon": {"default": "\"none\"", "type": "String", "description": "Sets the informational icon for the SimpleDialog"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the SimpleDialog \n<em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the SimpleDialog"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal containing \nthe configuration that should be set for this SimpleDialog. See \nconfiguration documentation for more details."}], "description": "SimpleDialog is a simple implementation of Dialog that can be used to \nsubmit a single value. Forms can be processed in 3 ways -- via an \nasynchronous Connection utility call, a simple form POST or GET, \nor manually."}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "SimpleDialog", "methods": {"configIcon": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "Fired when the \"icon\" property is set.", "guessedname": "configIcon", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the SimpleDialog \n<em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the SimpleDialog"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal \ncontaining the configuration that should be set for this \nSimpleDialog. See configuration documentation for more details."}], "description": "The SimpleDialog initialization method, which is executed for \nSimpleDialog and all of its subclasses. This method is automatically \ncalled by the constructor, and  sets up all DOM references for \npre-existing markup, and creates required markup if it is not \nalready present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the SimpleDialog"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "Fired when the \"text\" property is set.", "guessedname": "configText", "guessedtype": "function"}, "registerForm": {"description": "Prepares the SimpleDialog's internal FORM object, creating one if one \nis not currently present, and adding the value hidden field.", "guessedname": "registerForm", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed \nusing the SimpleDialog's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Dialog", "superclass": "YAHOO.widget.Dialog", "file": "SimpleDialog.js", "guessedtype": "function", "shortname": "SimpleDialog", "properties": {"YAHOO.widget.SimpleDialog.CSS_SIMPLEDIALOG": {"description": "Constant representing the default CSS class used for a SimpleDialog", "static": "", "guessedname": "CSS_SIMPLEDIALOG", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_INFO": {"description": "Constant for the standard network icon for info", "static": "", "guessedname": "ICON_INFO", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_CSS_CLASSNAME": {"description": "Constant representing the name of the CSS class applied to the element \ncreated by the \"icon\" configuration property.", "static": "", "guessedname": "ICON_CSS_CLASSNAME", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_BLOCK": {"description": "Constant for the standard network icon for a blocking action", "static": "", "guessedname": "ICON_BLOCK", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_WARN": {"description": "Constant for the standard network icon for warn", "static": "", "guessedname": "ICON_WARN", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_ALARM": {"description": "Constant for the standard network icon for alarm", "static": "", "guessedname": "ICON_ALARM", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_TIP": {"description": "Constant for the standard network icon for a tip", "static": "", "guessedname": "ICON_TIP", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_HELP": {"description": "Constant for the standard network icon for help", "static": "", "guessedname": "ICON_HELP", "guessedtype": "property", "type": "String", "final": ""}, "DEFAULT_CONFIG": {"description": "Constant representing the SimpleDialog's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}}, "description": "SimpleDialog is a simple implementation of Dialog that can be used to \nsubmit a single value. Forms can be processed in 3 ways -- via an \nasynchronous Connection utility call, a simple form POST or GET, \nor manually."}, "YAHOO.util.Connect": {"name": "YAHOO.util.Connect", "namespace": "YAHOO.util", "module": "connection", "guessedname": "Connect", "methods": {"asyncRequest": {"return": {"type": "object", "description": "Returns the connection object"}, "description": "Method for initiating an asynchronous request via the XHR object.", "static": "", "guessedname": "asyncRequest", "guessedtype": "function", "params": [{"type": "string", "name": "method", "description": " HTTP transaction method"}, {"type": "string", "name": "uri", "description": " Fully qualified path of resource"}, {"type": "callback", "name": "callback", "description": " User-defined callback function or object"}, {"type": "string", "name": "postData", "description": " POST body"}], "public": ""}, "isCallInProgress": {"return": {"type": "boolean", "description": ""}, "description": "Public method to check if the transaction is still being processed.", "static": "", "guessedname": "isCallInProgress", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object returned by asyncRequest"}], "public": ""}, "createResponseObject": {"return": {"type": "object", "description": ""}, "description": "This method evaluates the server response, creates and returns the results via\nits properties.  Success and failure cases will differ in the response\nobject's property values.", "private": "", "static": "", "guessedname": "createResponseObject", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callbackArg", "name": "callbackArg", "description": " The user-defined argument or arguments to be passed to the callback"}]}, "initCustomEvents": {"return": {"type": "void", "description": ""}, "description": "This method creates and subscribes custom events,\nspecific to each transaction", "private": "", "static": "", "guessedname": "initCustomEvents", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callback", "name": "callback", "description": " The user-defined callback object"}]}, "initHeader": {"return": {"type": "void", "description": ""}, "description": "Method that initializes the custom HTTP headers for the each transaction.", "static": "", "guessedname": "initHeader", "guessedtype": "function", "params": [{"type": "string", "name": "label", "description": " The HTTP header label"}, {"type": "string", "name": "value", "description": " The HTTP header value"}, {"type": "string", "name": "isDefault", "description": " Determines if the specific header is a default header\nautomatically sent with each transaction."}], "public": ""}, "setDefaultXhrHeader": {"return": {"type": "", "description": "void"}, "description": "Member to enable or disable the default POST header.", "static": "", "guessedname": "setDefaultXhrHeader", "guessedtype": "function", "params": [{"type": "boolean", "name": "b", "description": " Set and use default header - true or false ."}], "public": ""}, "setForm": {"return": {"type": "string", "description": "string of the HTML form field name and value pairs.."}, "description": "This method assembles the form label and value pairs and\nconstructs an encoded string.\nasyncRequest() will automatically initialize the transaction with a\na HTTP header Content-Type of application\/x-www-form-urlencoded.", "static": "", "guessedname": "setForm", "guessedtype": "function", "params": [{"type": "string || object", "name": "form", "description": " id or name attribute, or form object."}, {"type": "boolean", "name": "optional", "description": " enable file upload."}, {"type": "boolean", "name": "optional", "description": " enable file upload over SSL in IE only."}], "public": ""}, "uploadFile": {"return": {"type": "void", "description": ""}, "description": "Uploads HTML form, inclusive of files\/attachments, using the\niframe created in createFrame to facilitate the transaction.", "private": "", "static": "", "guessedname": "uploadFile", "guessedtype": "function", "params": [{"type": "int", "name": "id", "description": " The transaction id."}, {"type": "object", "name": "callback", "description": " User-defined callback object."}, {"type": "string", "name": "uri", "description": " Fully qualified path of resource."}, {"type": "string", "name": "postData", "description": " POST data to be submitted in addition to HTML form."}]}, "resetFormState": {"return": {"type": "void", "description": ""}, "description": "Resets HTML form properties when an HTML form or HTML form\nwith file upload transaction is sent.", "private": "", "static": "", "guessedname": "resetFormState", "guessedtype": "function"}, "getConnectionObject": {"return": {"type": "object", "description": ""}, "description": "This method is called by asyncRequest to create a\nvalid connection object for the transaction.  It also passes a\ntransaction id and increments the transaction id counter.", "private": "", "static": "", "guessedname": "getConnectionObject", "guessedtype": "function"}, "createExceptionObject": {"return": {"type": "object", "description": ""}, "description": "If a transaction cannot be completed due to dropped or closed connections,\nthere may be not be enough information to build a full response object.\nThe failure callback will be fired and this specific condition can be identified\nby a status property value of 0.\nIf an abort was successful, the status property will report a value of -1.", "private": "", "static": "", "guessedname": "createExceptionObject", "guessedtype": "function", "params": [{"type": "int", "name": "tId", "description": " The Transaction Id"}, {"type": "callbackArg", "name": "callbackArg", "description": " The user-defined argument or arguments to be passed to the callback"}, {"type": "boolean", "name": "isAbort", "description": " Determines if the exception case is caused by a transaction abort"}]}, "resetDefaultHeaders": {"return": {"type": "void", "description": ""}, "description": "Resets the default HTTP headers object", "static": "", "guessedname": "resetDefaultHeaders", "guessedtype": "function", "public": ""}, "appendPostData": {"return": {"type": "array", "description": "formElements Collection of hidden fields."}, "description": "Parses the POST data and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.", "private": "", "static": "", "guessedname": "appendPostData", "guessedtype": "function", "params": [{"type": "string", "name": "postData", "description": " The HTTP POST data"}]}, "releaseObject": {"return": {"type": "void", "description": ""}, "description": "Dereference the XHR instance and the connection object after the transaction is completed.", "private": "", "static": "", "guessedname": "releaseObject", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}]}, "createXhrObject": {"return": {"type": "", "description": "object"}, "description": "Instantiates a XMLHttpRequest object and returns an object with two properties:\nthe XMLHttpRequest instance and the transaction id.", "private": "", "static": "", "guessedname": "createXhrObject", "guessedtype": "function", "params": [{"type": "int", "name": "transactionId", "description": " Property containing the transaction id for this transaction."}]}, "handleTransactionResponse": {"return": {"type": "void", "description": ""}, "description": "This method attempts to interpret the server response and\ndetermine whether the transaction was successful, or if an error or\nexception was encountered.", "private": "", "static": "", "guessedname": "handleTransactionResponse", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "object", "name": "callback", "description": " The user-defined callback object"}, {"type": "boolean", "name": "isAbort", "description": " Determines if the transaction was terminated via abort()."}]}, "createFrame": {"return": {"type": "void", "description": ""}, "description": "Creates an iframe to be used for form file uploads.  It is remove from the\ndocument upon completion of the upload transaction.", "private": "", "static": "", "guessedname": "createFrame", "guessedtype": "function", "params": [{"type": "string", "name": "optional", "description": " qualified path of iframe resource for SSL in IE."}]}, "handleReadyState": {"return": {"type": "void", "description": ""}, "description": "This method serves as a timer that polls the XHR object's readyState\nproperty during a transaction, instead of binding a callback to the\nonreadystatechange event.  Upon readyState 4, handleTransactionResponse\nwill process the response, and the timer will be cleared.", "private": "", "static": "", "guessedname": "handleReadyState", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callback", "name": "callback", "description": " The user-defined callback object"}]}, "setDefaultPostHeader": {"return": {"type": "", "description": "void"}, "description": "Member to enable or disable the default POST header.", "static": "", "guessedname": "setDefaultPostHeader", "guessedtype": "function", "params": [{"type": "boolean", "name": "b", "description": " Set and use default header - true or false ."}], "public": ""}, "abort": {"return": {"type": "boolean", "description": ""}, "description": "Method to terminate a transaction, if it has not reached readyState 4.", "static": "", "guessedname": "abort", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object returned by asyncRequest."}, {"type": "object", "name": "callback", "description": "  User-defined callback object."}, {"type": "string", "name": "isTimeout", "description": " boolean to indicate if abort resulted from a callback timeout."}], "public": ""}, "setProgId": {"return": {"type": "", "description": "void"}, "description": "Member to add an ActiveX id to the existing xml_progid array.\nIn the event(unlikely) a new ActiveX id is introduced, it can be added\nwithout internal code modifications.", "static": "", "guessedname": "setProgId", "guessedtype": "function", "params": [{"type": "string", "name": "id", "description": " The ActiveX id to be added to initialize the XHR object."}], "public": ""}, "setPollingInterval": {"return": {"type": "", "description": "void"}, "description": "Member to modify the default polling interval.", "static": "", "guessedname": "setPollingInterval", "guessedtype": "function", "params": [{"type": "int", "name": "i", "description": " The polling interval in milliseconds."}], "public": ""}, "setHeader": {"return": {"type": "void", "description": ""}, "description": "Accessor that sets the HTTP headers for each transaction.", "private": "", "static": "", "guessedname": "setHeader", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object for the transaction."}]}}, "file": "connection.js", "guessedtype": "property", "shortname": "Connect", "properties": {"successEvent": {"description": "Custom event that fires when handleTransactionResponse() determines a\nresponse in the HTTP 2xx range.", "private": "", "static": "", "guessedname": "successEvent", "guessedtype": "property", "type": "CustomEvent"}, "_default_xhr_header": {"description": "The default header value for the label\n\"X-Requested-With\".  This is sent with each\ntransaction, by default, to identify the\nrequest as being made by YUI Connection Manager.", "private": "", "static": "", "guessedname": "_default_xhr_header", "guessedtype": "property", "type": "boolean"}, "completeEvent": {"description": "Custom event that fires when a transaction response has completed.", "private": "", "static": "", "guessedname": "completeEvent", "guessedtype": "property", "type": "CustomEvent"}, "_polling_interval": {"description": "The polling frequency, in milliseconds, for HandleReadyState.\nwhen attempting to determine a transaction's XHR readyState.\nThe default is 50 milliseconds.", "private": "", "static": "", "guessedname": "_polling_interval", "guessedtype": "property", "type": "int"}, "_formNode": {"description": "Property modified by setForm() to set a reference to the HTML\nform node if the desired action is file upload.", "private": "", "static": "", "guessedname": "_formNode", "guessedtype": "property", "type": "object"}, "_msxml_progid": {"description": "Array of MSFT ActiveX ids for XMLHttpRequest.", "private": "", "static": "", "guessedname": "_msxml_progid", "guessedtype": "property", "type": "array"}, "_http_header": {"description": "Object literal of HTTP header(s)", "private": "", "static": "", "guessedname": "_http_headers", "guessedtype": "property", "type": "object"}, "_sFormData": {"description": "Property modified by setForm() to set the HTML form data\nfor each transaction.", "private": "", "static": "", "guessedname": "_sFormData", "guessedtype": "property", "type": "string"}, "_default_post_header": {"description": "Determines if a default header of\nContent-Type of 'application\/x-www-form-urlencoded'\nwill be added to client HTTP headers sent for POST\ntransactions.", "private": "", "static": "", "guessedname": "_default_post_header", "guessedtype": "property", "type": "boolean"}, "_isFormSubmit": {"description": "Property modified by setForm() to determine if the data\nshould be submitted as an HTML form.", "private": "", "static": "", "guessedname": "_isFormSubmit", "guessedtype": "property", "type": "boolean"}, "_has_default_header": {"description": "Determines if custom, default headers\nare set for each transaction.", "private": "", "static": "", "guessedname": "_has_default_headers", "guessedtype": "property", "type": "boolean"}, "_hasSubmitListener": {"guessedname": "_hasSubmitListener", "static": "", "description": "Determines whether YAHOO.util.Event is available and returns true or false.\nIf true, an event listener is bound at the document level to trap click events that\nresolve to a target type of \"Submit\".  This listener will enable setForm() to determine\nthe clicked \"Submit\" value in a multi-Submit button, HTML form.", "private": "", "guessedtype": "function"}, "_use_default_xhr_header": {"description": "Determines if a default header of\n'X-Requested-With: XMLHttpRequest'\nwill be added to each transaction.", "private": "", "static": "", "guessedname": "_use_default_xhr_header", "guessedtype": "property", "type": "boolean"}, "_poll": {"description": "Collection of polling references to the polling mechanism in handleReadyState.", "private": "", "static": "", "guessedname": "_poll", "guessedtype": "property", "type": "object"}, "_timeOut": {"description": "Queue of timeout values for each transaction callback with a defined timeout value.", "private": "", "static": "", "guessedname": "_timeOut", "guessedtype": "property", "type": "object"}, "abortEvent": {"description": "Custom event that fires when a transaction is successfully aborted.", "private": "", "static": "", "guessedname": "abortEvent", "guessedtype": "property", "type": "CustomEvent"}, "_transaction_id": {"description": "A transaction counter that increments the transaction id for each transaction.", "private": "", "static": "", "guessedname": "_transaction_id", "guessedtype": "property", "type": "int"}, "failureEvent": {"description": "Custom event that fires when handleTransactionResponse() determines a\nresponse in the HTTP 4xx\/5xx range.", "private": "", "static": "", "guessedname": "failureEvent", "guessedtype": "property", "type": "CustomEvent"}, "_use_default_post_header": {"description": "Determines if a default header of\nContent-Type of 'application\/x-www-form-urlencoded'\nwill be added to any client HTTP headers sent for POST\ntransactions.", "private": "", "static": "", "guessedname": "_use_default_post_header", "guessedtype": "property", "type": "boolean"}, "_customEvents": {"description": "A reference table that maps callback custom events members to its specific\nevent name.", "private": "", "static": "", "guessedname": "_customEvents", "guessedtype": "property", "type": "object"}, "startEvent": {"description": "Custom event that fires at the start of a transaction", "private": "", "static": "", "guessedname": "startEvent", "guessedtype": "property", "type": "CustomEvent"}, "_isFileUpload": {"description": "Property modified by setForm() to determine if a file(s)\nupload is expected.", "private": "", "static": "", "guessedname": "_isFileUpload", "guessedtype": "property", "type": "boolean"}, "_has_http_headers": {"description": "Determines if HTTP headers are set.", "private": "", "static": "", "guessedname": "_has_http_headers", "guessedtype": "property", "type": "boolean"}, "_submitElementValue": {"description": "Tracks the name-value pair of the \"clicked\" submit button if multiple submit\nbuttons are present in an HTML form; and, if YAHOO.util.Event is available.", "private": "", "static": "", "guessedname": "_submitElementValue", "guessedtype": "property", "type": "string"}}, "description": "The Connection Manager singleton provides methods for creating and managing\nasynchronous transactions."}, "YAHOO.widget.LineChart": {"name": "YAHOO.widget.LineChart", "constructors": [{"params": [{"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "LineChart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "LineChart", "uses": ["YAHOO.widget.CartesianChart"], "file": "ChartTypes.js", "guessedtype": "function", "shortname": "LineChart", "description": "LineChart class for the YUI Charts widget."}, "YAHOO.widget.FlashAdapter": {"name": "YAHOO.widget.FlashAdapter", "configs": {"swfURL": {"type": "String", "description": "Absolute or relative URL to the SWF displayed by the FlashAdapter."}}, "namespace": "YAHOO.widget", "module": "charts", "properties": {"_swfURL": {"guessedname": "_swfURL", "type": "String", "description": "The URL of the SWF file.", "private": "", "guessedtype": "property"}, "_swf": {"private": "", "description": "A reference to the embedded SWF file.", "guessedname": "_swf", "guessedtype": "property"}, "_attributes": {"guessedname": "_attributes", "type": "Object", "description": "The initializing attributes are stored here until the SWF is ready.", "private": "", "guessedtype": "property"}, "_id": {"guessedname": "_id", "type": "String", "description": "The id of this instance.", "private": "", "guessedtype": "property"}}, "guessedname": "FlashAdapter", "methods": {"_loadHandler": {"private": "", "description": "Called when the SWF has been initialized.", "guessedname": "_loadHandler", "guessedtype": "function"}, "_initAttributes": {"private": "", "description": "Initializes the attributes.", "guessedname": "_initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the FlashAdapter instance."}, "description": "Public accessor to the unique name of the FlashAdapter instance.", "guessedname": "toString", "guessedtype": "function"}, "YAHOO.widget.FlashAdapter.eventHandler": {"guessedname": "eventHandler", "static": "", "description": "Receives event messages from SWF and passes them to the correct instance\nof FlashAdapter.", "private": "", "guessedtype": "function"}, "_eventHandler": {"private": "", "description": "Handles or re-dispatches events received from the SWF.", "guessedname": "_eventHandler", "guessedtype": "function"}, "_embedSWF": {"private": "", "description": "Embeds the SWF in the page and associates it with this instance.", "guessedname": "_embedSWF", "guessedtype": "function"}, "_getSWFURL": {"private": "", "description": "Getter for swfURL attribute.", "guessedname": "_getSWFURL", "guessedtype": "function"}}, "uses": ["YAHOO.util.AttributeProvider"], "file": "FlashAdapter.js", "guessedtype": "function", "shortname": "FlashAdapter", "events": {"contentReady": {"description": "Fires when the SWF is initialized and communication is possible."}, "beforeSwfurlChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeSwfurlChangeEvent", "description": "Fires before the value for the configuration attribute 'swfURL' changes. Return false to cancel the attribute change."}, "swfURLChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "swfURLChangeEvent", "description": "Fires when the value for the configuration attribute 'swfURL' changes."}}, "description": "Wraps Flash embedding functionality and allows communication with SWF through\nattributes."}, "YAHOO.util.Date": {"name": "YAHOO.util.Date", "namespace": "YAHOO.util", "module": "date", "guessedname": "Date", "methods": {"format": {"return": {"type": "String", "description": "Formatted date for display."}, "params": [{"type": "Date", "name": "oDate", "description": "  Date."}, {"type": "Object} (Optional) Optional configuration values:\n<dl>\n<dt>format {String", "name": "oConfig", "description": " <\/dd>\n<dd>Currently only the following formats are supported:\n\"MM\/DD\/YYYY\", \"YYYY\/MM\/DD\", or \"DD\/MM\/YYYY\"<\/dd>\n<\/dl>"}], "description": "Takes a native JavaScript Date and formats to string for display to user.", "guessedname": "format", "guessedtype": "function"}}, "static": "", "file": "DataSource.js", "guessedtype": "property", "shortname": "Date", "description": "The static Date class provides helper functions to deal with data of type\nNumber."}, "YAHOO.widget.TVAnim": {"name": "YAHOO.widget.TVAnim", "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TVAnim", "methods": {"isValid": {"return": {"type": "boolean", "description": "true if valid, false if not"}, "description": "Returns true if the specified animation class is available", "static": "", "guessedname": "isValid", "guessedtype": "function", "params": [{"type": "string", "name": "type", "description": "  the type of animation"}]}, "getAnim": {"return": {"type": "YAHOO.util.Animation", "description": "the animation instance"}, "description": "Returns a ygAnim instance of the given type", "static": "", "guessedname": "getAnim", "guessedtype": "function", "params": [{"type": "string", "name": "type", "description": "  the type of animation"}, {"type": "HTMLElement", "name": "el", "description": "  the element to element (probably the children div)"}, {"type": "function", "name": "callback", "description": "  function to invoke when the animation is done."}]}}, "static": "", "file": "TVAnim.js", "guessedtype": "function", "shortname": "TVAnim", "properties": {"FADE_OUT": {"type": "string", "static": "", "description": "Constant for the fade out animation", "guessedname": "FADE_OUT", "guessedtype": "property"}, "FADE_IN": {"type": "string", "static": "", "description": "Constant for the fade in animation", "guessedname": "FADE_IN", "guessedtype": "property"}}, "description": "A static factory class for tree view expand\/collapse animations"}, "YAHOO.tool.TestCase": {"name": "YAHOO.tool.TestCase", "constructors": [{"params": [{"type": "", "name": "template", "description": " An object containing any number of test methods, other methods,\nan optional name, and anything else the test case needs."}], "description": "Test case containing various tests to run."}], "namespace": "YAHOO.tool", "module": "yuitest", "guessedname": "TestCase", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}, "wait": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called."}, {"type": "int", "name": "delay", "description": " (Optional) The number of milliseconds to wait before running\nthe function. If omitted, defaults to zero."}], "description": "Causes the test case to wait a specified amount of time and then\ncontinue executing the given code.", "guessedname": "wait", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run.\nIf omitted, the test automatically passes."}], "description": "Resumes a paused test and runs the given function.", "guessedname": "resume", "guessedtype": "function"}}, "file": "TestCase.js", "guessedtype": "function", "shortname": "TestCase", "description": "Test case containing various tests to run."}, "YAHOO.widget.ColorPicker": {"name": "YAHOO.widget.ColorPicker", "configs": {"blue": {"type": "int", "description": "The current blue value 0-255"}, "hue": {"type": "int", "description": "The current hue value 0-360"}, "saturation": {"type": "int", "description": "The current saturation value 0-100"}, "pickersize": {"default": "180", "type": "int", "description": "The size of the picker. Trying to change this is not recommended."}, "container": {"type": "YAHOO.widget.Panel", "description": "If the color picker will live inside of a container object,\nset, provide a reference to it so the control can use the\ncontainer's events."}, "showrgbcontrols": {"default": "true", "type": "boolean", "description": "Hide\/show the rgb controls"}, "showhsvcontrols": {"default": "false", "type": "boolean", "description": "Hide\/show the hsv controls"}, "hex": {"readonly": "", "type": "string", "description": "The current hex value #000000-#FFFFFF, without the #"}, "ids": {"type": "{referenceid: realid}", "description": "A list of element ids and\/or element references used by the \ncontrol.  The default is the this.ID list, and can be customized\nby passing a list in the contructor", "writeonce": ""}, "value": {"type": "int", "description": "The current value\/brightness value 0-100"}, "showwebsafe": {"default": "true", "type": "boolean", "description": "Hide\/show the websafe swatch"}, "showhexsummary": {"default": "true", "type": "boolean", "description": "Hide\/show the hex summary"}, "elements": {"readonly": "", "type": "{id: HTMLElement}", "description": "The element refs used by this control.  Set at initialization"}, "green": {"type": "int", "description": "The current green value 0-255"}, "websafe": {"type": "int", "description": "The closest current websafe value"}, "images": {"type": "{key: image}", "description": "The img src default list\nis this.IMAGES", "writeonce": ""}, "txt": {"type": "{key: txt}", "description": "A list of txt strings for internationalization.  Default\nis this.TXT", "writeonce": ""}, "showcontrols": {"default": "true", "type": "boolean", "description": "Hide\/show the entire set of controls"}, "red": {"type": "int", "description": "The current red value 0-255"}, "showhexcontrols": {"default": "true", "type": "boolean", "description": "Hide\/show the hex controls"}}, "constructors": [{"params": [{"type": "HTMLElement | String | Object", "name": "el(optional)", "description": " The html \nelement that represents the colorpicker, or the attribute object to use. \nAn element will be created if none provided."}, {"type": "Object", "name": "attr", "description": " (optional) A key map of the colorpicker's \ninitial attributes.  Ignored if first arg is attributes object."}], "description": "A widget to select colors"}], "namespace": "YAHOO.widget", "module": "colorpicker", "events": {"showhsvcontrolsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "showhsvcontrolsChangeEvent", "description": "Fires when the value for the configuration attribute 'showhsvcontrols' changes."}, "showwebsafeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "showwebsafeChangeEvent", "description": "Fires when the value for the configuration attribute 'showwebsafe' changes."}, "containerChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "containerChangeEvent", "description": "Fires when the value for the configuration attribute 'container' changes."}, "beforeHexChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeHexChangeEvent", "description": "Fires before the value for the configuration attribute 'hex' changes. Return false to cancel the attribute change."}, "beforeSaturationChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeSaturationChangeEvent", "description": "Fires before the value for the configuration attribute 'saturation' changes. Return false to cancel the attribute change."}, "blueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "blueChangeEvent", "description": "Fires when the value for the configuration attribute 'blue' changes."}, "beforeShowhexsummaryChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeShowhexsummaryChangeEvent", "description": "Fires before the value for the configuration attribute 'showhexsummary' changes. Return false to cancel the attribute change."}, "beforeGreenChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeGreenChangeEvent", "description": "Fires before the value for the configuration attribute 'green' changes. Return false to cancel the attribute change."}, "showhexcontrolsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "showhexcontrolsChangeEvent", "description": "Fires when the value for the configuration attribute 'showhexcontrols' changes."}, "beforeValueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeValueChangeEvent", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}, "imagesChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "imagesChangeEvent", "description": "Fires when the value for the configuration attribute 'images' changes."}, "beforeContainerChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeContainerChangeEvent", "description": "Fires before the value for the configuration attribute 'container' changes. Return false to cancel the attribute change."}, "hueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "hueChangeEvent", "description": "Fires when the value for the configuration attribute 'hue' changes."}, "txtChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "txtChangeEvent", "description": "Fires when the value for the configuration attribute 'txt' changes."}, "saturationChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "saturationChangeEvent", "description": "Fires when the value for the configuration attribute 'saturation' changes."}, "showcontrolsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "showcontrolsChangeEvent", "description": "Fires when the value for the configuration attribute 'showcontrols' changes."}, "beforeShowrgbcontrolsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeShowrgbcontrolsChangeEvent", "description": "Fires before the value for the configuration attribute 'showrgbcontrols' changes. Return false to cancel the attribute change."}, "pickersizeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "pickersizeChangeEvent", "description": "Fires when the value for the configuration attribute 'pickersize' changes."}, "beforeShowcontrolsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeShowcontrolsChangeEvent", "description": "Fires before the value for the configuration attribute 'showcontrols' changes. Return false to cancel the attribute change."}, "beforeShowhsvcontrolsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeShowhsvcontrolsChangeEvent", "description": "Fires before the value for the configuration attribute 'showhsvcontrols' changes. Return false to cancel the attribute change."}, "beforePickersizeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforePickersizeChangeEvent", "description": "Fires before the value for the configuration attribute 'pickersize' changes. Return false to cancel the attribute change."}, "redChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "redChangeEvent", "description": "Fires when the value for the configuration attribute 'red' changes."}, "beforeElementsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeElementsChangeEvent", "description": "Fires before the value for the configuration attribute 'elements' changes. Return false to cancel the attribute change."}, "beforeShowhexcontrolsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeShowhexcontrolsChangeEvent", "description": "Fires before the value for the configuration attribute 'showhexcontrols' changes. Return false to cancel the attribute change."}, "beforeWebsafeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeWebsafeChangeEvent", "description": "Fires before the value for the configuration attribute 'websafe' changes. Return false to cancel the attribute change."}, "greenChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "greenChangeEvent", "description": "Fires when the value for the configuration attribute 'green' changes."}, "showrgbcontrolsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "showrgbcontrolsChangeEvent", "description": "Fires when the value for the configuration attribute 'showrgbcontrols' changes."}, "websafeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "websafeChangeEvent", "description": "Fires when the value for the configuration attribute 'websafe' changes."}, "beforeImagesChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeImagesChangeEvent", "description": "Fires before the value for the configuration attribute 'images' changes. Return false to cancel the attribute change."}, "showhexsummaryChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "showhexsummaryChangeEvent", "description": "Fires when the value for the configuration attribute 'showhexsummary' changes."}, "elementsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "elementsChangeEvent", "description": "Fires when the value for the configuration attribute 'elements' changes."}, "hexChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "hexChangeEvent", "description": "Fires when the value for the configuration attribute 'hex' changes."}, "beforeShowwebsafeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeShowwebsafeChangeEvent", "description": "Fires before the value for the configuration attribute 'showwebsafe' changes. Return false to cancel the attribute change."}, "beforeRedChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeRedChangeEvent", "description": "Fires before the value for the configuration attribute 'red' changes. Return false to cancel the attribute change."}, "beforeTxtChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTxtChangeEvent", "description": "Fires before the value for the configuration attribute 'txt' changes. Return false to cancel the attribute change."}, "idsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "idsChangeEvent", "description": "Fires when the value for the configuration attribute 'ids' changes."}, "beforeHueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeHueChangeEvent", "description": "Fires before the value for the configuration attribute 'hue' changes. Return false to cancel the attribute change."}, "beforeBlueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeBlueChangeEvent", "description": "Fires before the value for the configuration attribute 'blue' changes. Return false to cancel the attribute change."}, "beforeIdsChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeIdsChangeEvent", "description": "Fires before the value for the configuration attribute 'ids' changes. Return false to cancel the attribute change."}, "valueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChangeEvent", "description": "Fires when the value for the configuration attribute 'value' changes."}}, "guessedname": "ColorPicker", "methods": {"_hexFieldKeypress": {"description": "Use the value of the text field to update the control", "param": "e {Event} the keypress event", "params": [{"type": "Event", "name": "e", "description": "  an event"}, {"type": "HTMLElement", "name": "el", "description": "  the field"}, {"type": "string", "name": "prop", "description": "  the key to the linked property"}], "private": "", "guessedname": "_useFieldValue", "guessedtype": "function"}, "_updateRGBFromHSV": {"private": "", "description": "Updates the RGB values from the current state of the HSV\nvalues.  Executed when the one of the HSV form fields are\nupdated\n_updateRGBFromHSV", "guessedname": "_updateRGBFromHSV", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "", "name": "attr", "description": " An object containing default attribute values"}], "description": "Sets up the config attributes and the change listeners for this\nproperties", "guessedname": "initAttributes", "guessedtype": "function"}, "_onHueSliderChange": {"guessedname": "_onHueSliderChange", "params": [{"type": "int", "name": "newOffset", "description": "  pixels from the start position"}], "description": "Event handler for the hue slider.", "private": "", "guessedtype": "function"}, "_updatePickerSlider": {"private": "", "description": "Moves the picker slider into the position dictated by the current state\nof the control", "guessedname": "_updatePickerSlider", "guessedtype": "function"}, "_updateRGB": {"private": "", "description": "Updates the rgb attribute with the current state of the r,g,b\nfields.  This is invoked from change listeners on these\nattributes to facilitate updating these values from the\nindividual form fields", "guessedname": "_updateRGB", "guessedtype": "function"}, "_numbersOnly": {"return": {"type": "boolean", "description": "false if we are canceling the event"}, "description": "Allows numbers and special chars only.  Used for the\nrgb and hsv fields keypress handler.", "private": "", "params": [{"type": "Event", "name": "e", "description": "  the event"}], "guessedname": "_numbersOnly", "guessedtype": "function"}, "getElement": {"return": {"type": "HTMLElement", "description": "a reference to the element"}, "params": [{"type": "string", "name": "id", "description": "  the element id, or key"}], "description": "Returns the element reference that is saved.  The id can be either\nthe element id, or the key for this id in the \"id\" config attribute.\nFor instance, the host element id can be obtained by passing its\nid (default: \"yui_picker\") or by its key \"YUI_PICKER\".", "guessedname": "getElement", "guessedtype": "function"}, "_updateSwatch": {"private": "", "description": "Updates the background of the swatch with the current rbg value.\nAlso updates the websafe swatch to the closest websafe color", "guessedname": "_updateSwatch", "guessedtype": "function"}, "_updateSliders": {"private": "", "description": "Moves the sliders into the position dictated by the current state\nof the control", "guessedname": "_updateSliders", "guessedtype": "function"}, "_onPickerSliderChange": {"guessedname": "_onPickerSliderChange", "params": [{"type": "{x: int, y: int}", "name": "newOffset", "description": "  x\/y pixels from the start position"}], "description": "Event handler for the picker slider, which controls the\nsaturation and value\/brightness.", "private": "", "guessedtype": "function"}, "_getCommand": {"return": {"type": "int", "description": "a command code\n<ul>\n<li>0 = not a number, letter in range, or special key<\/li>\n<li>1 = number<\/li>\n<li>2 = a-fA-F<\/li>\n<li>3 = increment (up arrow)<\/li>\n<li>4 = decrement (down arrow)<\/li>\n<li>5 = special key (tab, delete, return, escape, left, right)<\/li> \n<li>6 = return<\/li>\n<\/ul>"}, "description": "Key map to well-known commands for txt field input", "private": "", "params": [{"type": "Event", "name": "e", "description": "  the keypress or keydown event"}], "guessedname": "_getCommand", "guessedtype": "function"}, "setValue": {"params": [{"type": "[int, int, int]", "name": "rgb", "description": "  the rgb value"}, {"type": "boolean", "name": "silent", "description": "  whether or not to fire the change event"}], "description": "Sets the control to the specified rgb value and\nmoves the sliders to the proper positions", "guessedname": "setValue", "guessedtype": "function"}, "_updateHex": {"private": "", "description": "Parses the hex string to normalize shorthand values, converts\nthe hex value to rgb and updates the rgb attribute (which\nupdates the state for all of the other values)\nmethod _updateHex", "guessedname": "_updateHex", "guessedtype": "function"}, "_updateFormFields": {"private": "", "description": "Updates the form field controls with the state data contained\nin the control.", "guessedname": "_updateFormFields", "guessedtype": "function"}, "_hexOnly": {"return": {"type": "boolean", "description": "false if we are canceling the event"}, "description": "Allows numbers and special chars, and by default allows a-f.  \nUsed for the hex field keypress handler.", "private": "", "params": [{"type": "Event", "name": "e", "description": "  the event"}, {"type": "", "name": "numbersOnly", "description": " omits a-f if set to true"}], "guessedname": "_hexOnly", "guessedtype": "function"}, "initPicker": {"description": "Sets the initial state of the sliders", "guessedname": "initPicker", "guessedtype": "function"}, "_updateHueSlider": {"private": "", "description": "Moves the hue slider into the position dictated by the current state\nof the control", "guessedname": "_updateHueSlider", "guessedtype": "function"}, "_getS": {"guessedname": "_getS", "return": {"type": "int", "description": "the saturation from 0 to 1"}, "description": "Translates the slider value into saturation, int[0,1], left to right", "private": "", "guessedtype": "function"}, "_getValuesFromSliders": {"private": "", "description": "Reads the sliders and converts the values to RGB, updating the\ninternal state for all the individual form fields", "guessedname": "_getValuesFromSliders", "guessedtype": "function"}, "_getV": {"guessedname": "_getV", "return": {"type": "int", "description": "the value from 0 to 1"}, "description": "Translates the slider value into value\/brightness, int[0,1], top\nto bottom", "private": "", "guessedtype": "function"}, "_getH": {"guessedname": "_getH", "return": {"type": "int", "description": "the hue from 0 to 359"}, "description": "Translates the slider value into hue, int[0,359]", "private": "", "guessedtype": "function"}, "_rgbFieldKeypress": {"guessedname": "_rgbFieldKeypress", "params": [{"type": "Event", "name": "e", "description": "  the keypress event"}, {"type": "HTMLElement", "name": "el", "description": "  the field"}, {"type": "string", "name": "prop", "description": "  the key to the linked property"}], "description": "Handle keypress on one of the rgb or hsv fields.", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "ColorPicker.js", "guessedtype": "function", "shortname": "ColorPicker", "properties": {"DEFAULT": {"final": "", "description": "Constants for the control's default default values", "guessedname": "DEFAULT", "guessedtype": "property"}, "pickerSlider": {"type": "YAHOO.widget.Slider", "description": "The picker region", "guessedname": "pickerSlider", "guessedtype": "property"}, "ID.PICKER_BG": {"description": "The id for the picker region slider", "default": "yui-picker-bg", "guessedname": "PICKER_BG", "guessedtype": "property", "type": "String", "final": ""}, "ID.G": {"description": "The id for the \"green\" form field", "default": "yui-picker-g", "guessedname": "G", "guessedtype": "property", "type": "String", "final": ""}, "ID.G_HEX": {"description": "The id for the \"green\" hex pair output", "default": "yui-picker-ghex", "guessedname": "G_HEX", "guessedtype": "property", "type": "String", "final": ""}, "ID.HSV_CONTROLS": {"default": "yui-picker-hsv-controls", "final": "", "description": "The id for the hsv controls", "guessedname": "HSV_CONTROLS", "guessedtype": "property"}, "ID.SWATCH": {"description": "The id for the color swatch", "default": "yui-picker-swatch", "guessedname": "SWATCH", "guessedtype": "property", "type": "String", "final": ""}, "ID.HEX_CONTROLS": {"default": "yui-picker-hex-controls", "final": "", "description": "The id for the hsv controls", "guessedname": "HEX_CONTROLS", "guessedtype": "property"}, "IMAGE": {"final": "", "description": "Constants for the default image locations for img tags that are\ngenerated by the control.  They can be modified by passing the\ncomplete list to the contructor for the \"images\" attribute", "guessedname": "IMAGE", "guessedtype": "property"}, "ID.B_HEX": {"description": "The id for the \"blue\" hex pair output", "default": "yui-picker-bhex", "guessedname": "B_HEX", "guessedtype": "property", "type": "String", "final": ""}, "TXT": {"final": "", "description": "Constants for any script-generated messages.  The values here\nare the default messages.  They can be updated by providing\nthe complete list to the constructor for the \"txt\" attribute.", "guessedname": "TXT", "guessedtype": "property"}, "ID.HEX": {"description": "The id for the hex value form field", "default": "yui-picker-hex", "guessedname": "HEX", "guessedtype": "property", "type": "String", "final": ""}, "ID.HUE_BG": {"description": "The id for the hue slider", "default": "yui-picker-hue-bg", "guessedname": "HUE_BG", "guessedtype": "property", "type": "String", "final": ""}, "ID.CONTROLS": {"default": "yui-picker-controls", "final": "", "description": "The id for the control details", "guessedname": "CONTROLS", "guessedtype": "property"}, "ID.V": {"description": "The id for the \"value\" form field", "default": "yui-picker-v", "guessedname": "V", "guessedtype": "property", "type": "String", "final": ""}, "ID.S": {"description": "The id for the \"saturation\" form field", "default": "yui-picker-s", "guessedname": "S", "guessedtype": "property", "type": "String", "final": ""}, "ID.R": {"description": "The id for the \"red\" form field", "default": "yui-picker-r", "guessedname": "R", "guessedtype": "property", "type": "String", "final": ""}, "ID.H": {"description": "The id for the \"hue\" form field", "default": "yui-picker-h", "guessedname": "H", "guessedtype": "property", "type": "String", "final": ""}, "ID.WEBSAFE_SWATCH": {"description": "The id for the websafe color swatch", "default": "yui-picker-websafe-swatch", "guessedname": "WEBSAFE_SWATCH", "guessedtype": "property", "type": "String", "final": ""}, "ID": {"final": "", "description": "The element ids used by this control", "guessedname": "ID", "guessedtype": "property"}, "ID.B": {"description": "The id for the \"blue\" form field", "default": "yui-picker-b", "guessedname": "B", "guessedtype": "property", "type": "String", "final": ""}, "OPT": {"final": "", "description": "Constants for the control's configuration attributes", "guessedname": "OPT", "guessedtype": "property"}, "ID.HUE_THUMB": {"description": "The id for the hue thumb", "default": "yui-picker-hue-thumb", "guessedname": "HUE_THUMB", "guessedtype": "property", "type": "String", "final": ""}, "ID.R_HEX": {"description": "The id for the \"red\" hex pair output", "default": "yui-picker-rhex", "guessedname": "R_HEX", "guessedtype": "property", "type": "String", "final": ""}, "ID.RGB_CONTROLS": {"default": "yui-picker-rgb-controls", "final": "", "description": "The id for the rgb controls", "guessedname": "RGB_CONTROLS", "guessedtype": "property"}, "ID.PICKER_THUMB": {"description": "The id for the picker region thumb", "default": "yui-picker-thumb", "guessedname": "PICKER_THUMB", "guessedtype": "property", "type": "String", "final": ""}, "hueSlider": {"type": "YAHOO.widget.Slider", "description": "The hue slider", "guessedname": "hueSlider", "guessedtype": "property"}, "ID.HEX_SUMMARY": {"default": "yui-picker-hex-summary", "final": "", "description": "The id for the hex summary", "guessedname": "HEX_SUMMARY", "guessedtype": "property"}, "ID.CONTROLS_LABEL": {"default": "yui-picker-controls-label", "final": "", "description": "The id for the controls section header", "guessedname": "CONTROLS_LABEL", "guessedtype": "property"}}, "description": "A widget to select colors"}, "YAHOO.widget.ToolbarButton": {"name": "YAHOO.widget.ToolbarButton", "configs": {"container": {"type": "String", "description": "The container that the button is rendered to, handled by Toolbar"}, "title": {"type": "String", "description": "The title of the button"}, "menu": {"type": "Object", "description": "The menu attribute, see YAHOO.widget.Button"}, "value": {"type": "String", "description": "The value of the button"}, "label": {"type": "String", "description": "The text label for the button"}, "disabled": {"type": "String", "description": "Set the button into a disabled state"}, "type": {"type": "String", "description": "The type of button to create: push, menu, color, select, spin"}}, "constructors": [{"params": [{"type": "String\/HTMLElement", "name": "el", "description": " The element to turn into a button."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "<p>Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar<\/p>"}], "namespace": "YAHOO.widget", "module": "editor", "events": {"labelChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "labelChangeEvent", "description": "Fires when the value for the configuration attribute 'label' changes."}, "beforeDisabledChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDisabledChangeEvent", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "typeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "typeChangeEvent", "description": "Fires when the value for the configuration attribute 'type' changes."}, "beforeMenuChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeMenuChangeEvent", "description": "Fires before the value for the configuration attribute 'menu' changes. Return false to cancel the attribute change."}, "beforeLabelChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeLabelChangeEvent", "description": "Fires before the value for the configuration attribute 'label' changes. Return false to cancel the attribute change."}, "beforeTypeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTypeChangeEvent", "description": "Fires before the value for the configuration attribute 'type' changes. Return false to cancel the attribute change."}, "menuChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "menuChangeEvent", "description": "Fires when the value for the configuration attribute 'menu' changes."}, "beforeTitleChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTitleChangeEvent", "description": "Fires before the value for the configuration attribute 'title' changes. Return false to cancel the attribute change."}, "valueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChangeEvent", "description": "Fires when the value for the configuration attribute 'value' changes."}, "titleChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "titleChangeEvent", "description": "Fires when the value for the configuration attribute 'title' changes."}, "disabledChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChangeEvent", "description": "Fires when the value for the configuration attribute 'disabled' changes."}, "beforeValueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeValueChangeEvent", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}}, "guessedname": "ToolbarButton", "beta": "", "methods": {"_handleSelect": {"guessedname": "_handleSelect", "params": [{"type": "Event", "name": "ev", "description": " The change event."}], "description": "The event fired when a change event gets fired on a select element", "private": "", "guessedtype": "function"}, "getMenu": {"description": "A stub function to mimic YAHOO.widget.Button's getMenu method", "guessedname": "getMenu", "guessedtype": "function"}, "_handleMouseOut": {"description": "Removes classes from the button elements on mouseout (hover)", "private": "", "guessedname": "_handleMouseOut", "guessedtype": "function"}, "init": {"description": "The ToolbarButton class's initialization method", "guessedname": "init", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Object literal specifying a set of \nconfiguration attributes used to create the toolbar."}], "description": "Initializes all of the configuration attributes used to create \nthe toolbar.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the toolbar.", "guessedname": "toString", "guessedtype": "function"}, "checkValue": {"params": [{"type": "String", "name": "value", "description": " The value of the option that we want to mark as selected"}], "description": "Select an option by value", "guessedname": "checkValue", "guessedtype": "function"}, "_handleMouseOver": {"description": "Adds classes to the button elements on mouseover (hover)", "private": "", "guessedname": "_handleMouseOver", "guessedtype": "function"}, "fireEvent": {"description": "Overridden fireEvent method to prevent DOM events from firing if the button is disabled.", "guessedname": "fireEvent", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "toolbar-button.js", "guessedtype": "function", "shortname": "ToolbarButton", "requires": "yahoo, dom, element, event", "properties": {"buttonType": {"private": "", "description": "Tells if the Button is a Rich Button or a Simple Button", "guessedname": "buttonType", "guessedtype": "property"}}, "description": "<p>Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar<\/p>"}, "YAHOO.util.Attribute": {"name": "YAHOO.util.Attribute", "constructors": [{"params": [{"type": "Object", "name": "hash", "description": "  The intial Attribute."}, {"type": "YAHOO.util.AttributeProvider", "name": "The", "description": " owner of the Attribute instance."}], "description": "Provides Attribute configurations."}], "namespace": "YAHOO.util", "module": "element", "guessedname": "Attribute", "methods": {"setValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "params": [{"type": "Any", "name": "value", "description": " The value to apply to the attribute."}, {"type": "Boolean", "name": "silent", "description": " If true the change events will not be fired."}], "description": "Sets the value of the attribute and fires beforeChange and change events.", "guessedname": "setValue", "guessedtype": "function"}, "configure": {"params": [{"type": "Object", "name": "map", "description": " A key-value map of Attribute properties."}, {"type": "Boolean", "name": "init", "description": " Whether or not this should become the initial config."}], "description": "Allows for configuring the Attribute's properties.", "guessedname": "configure", "guessedtype": "function"}, "resetValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "description": "Resets the value to the initial config value.", "guessedname": "resetValue", "guessedtype": "function"}, "refresh": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "description": "Resets the value to the current value.\nUseful when values may have gotten out of sync with actual properties.", "guessedname": "refresh", "guessedtype": "function"}, "getValue": {"return": {"type": "any", "description": "The current value of the attribute."}, "description": "Retrieves the current value of the attribute.", "guessedname": "getValue", "guessedtype": "function"}, "resetConfig": {"description": "Resets the attribute config to the initial config state.", "guessedname": "resetConfig", "guessedtype": "function"}}, "file": "Attribute.js", "guessedtype": "function", "shortname": "Attribute", "properties": {"_written": {"guessedname": "_written", "type": "Boolean", "description": "Whether or not the attribute's value has been set.", "private": "", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the attribute.", "guessedname": "name", "guessedtype": "property"}, "writeOnce": {"type": "Boolean", "description": "Whether or not the attribute can only be written once.", "guessedname": "writeOnce", "guessedtype": "property"}, "_initialConfig": {"guessedname": "_initialConfig", "type": "Object", "description": "The attribute's initial configuration.", "private": "", "guessedtype": "property"}, "value": {"type": "String", "description": "The value of the attribute.", "guessedname": "value", "guessedtype": "property"}, "readOnly": {"type": "Boolean", "description": "Whether or not the attribute is read only.", "guessedname": "readOnly", "guessedtype": "property"}, "validator": {"type": "Function", "return": "Boolean", "description": "The validator to use when setting the attribute's value.", "guessedname": "validator", "guessedtype": "property"}, "owner": {"type": "YAHOO.util.AttributeProvider", "description": "The owner of the attribute.", "guessedname": "owner", "guessedtype": "property"}, "method": {"type": "Function", "description": "The method to use when setting the attribute's value.\nThe method recieves the new value as the only argument.", "guessedname": "method", "guessedtype": "property"}}, "description": "Provides Attribute configurations."}, "YAHOO.util.DateAssert": {"name": "YAHOO.util.DateAssert", "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "DateAssert", "methods": {"areEqual": {"description": "Asserts that a date's month, day, and year are equal to another date's.", "param": "{Date} expected The expected date.", "static": "", "guessedname": "datesAreEqual", "guessedtype": "function", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}}, "static": "", "file": "DateAssert.js", "guessedtype": "property", "shortname": "DateAssert", "description": "The DateAssert object provides functions to test JavaScript Date objects\nfor a variety of cases."}, "YAHOO.util.ImageLoader.group": {"name": "YAHOO.util.ImageLoader.group", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "trigEl", "description": "\tThe HTML element id or reference to assign the trigger event to. Can be null for no trigger"}, {"type": "String", "name": "trigAct", "description": " The type of event to assign to trigEl. Can be null for no trigger"}, {"type": "Number", "name": "timeout", "description": "\tTimeout (time limit) length, in seconds. Can be undefined, or <= 0, for no time limit"}], "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."}], "namespace": "YAHOO.util", "module": "imageloader", "guessedname": "group", "methods": {"registerBgImage": {"return": {"type": "Object", "description": "bgImgObj that was registered, for modifying any attributes in the object"}, "params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}], "description": "Registers a background image with the group", "guessedname": "registerBgImage", "guessedtype": "function"}, "addTrigger": {"params": [{"type": "String|HTMLElement", "name": "trigEl", "description": "  The HTML element id or reference to assign the trigger event to"}, {"type": "String", "name": "trigAct", "description": " The type of event to assign to trigEl"}], "description": "Adds a trigger to the group. Call this with the same style as YAHOO.util.Event.addListener", "guessedname": "addTrigger", "guessedtype": "function"}, "_getFetchTimeout": {"guessedname": "_getFetchTimeout", "return": {"type": "Function", "description": "group's fetch method"}, "description": "Returns the group's fetch method, with the proper closure, for use with setTimeout", "private": "", "guessedtype": "function"}, "registerSrcImage": {"return": {"type": "Object", "description": "srcImgObj that was registered, for modifying any attributes in the object"}, "params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}, {"type": "Int", "name": "width", "description": "\tpixel width of the image - defaults to image's natural size"}, {"type": "Int", "name": "height", "description": "\tpixel height of the image - defaults to image's natural size"}], "description": "Registers a src image with the group", "guessedname": "registerSrcImage", "guessedtype": "function"}, "registerPngBgImage": {"return": {"type": "Object", "description": "pngBgImgObj that was registered, for modifying any attributes in the object"}, "params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}], "description": "Registers an alpha-channel-type png background image with the group", "guessedname": "registerPngBgImage", "guessedtype": "function"}, "_onloadTasks": {"private": "", "description": "Setup to do in the window's onload\nInitiates time limit for group; executes the fold check for the images", "guessedname": "_onloadTasks", "guessedtype": "function"}, "_foldCheck": {"private": "", "description": "Checks the position of each image in the group. If any part of the image is within the client viewport, shows the image immediately.", "guessedname": "_foldCheck", "guessedtype": "function"}, "fetch": {"description": "Displays the images in the group", "guessedname": "fetch", "guessedtype": "function"}, "_fetchByClass": {"private": "", "description": "Finds all elements in the Dom with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching", "guessedname": "_fetchByClass", "guessedtype": "function"}}, "file": "ImageLoader.js", "guessedtype": "function", "shortname": "ImageLoader.group", "requires": "YAHOO.util.Dom", "properties": {"name": {"type": "String", "description": "Name for the group. Only used to identify the group in logging statements", "guessedname": "name", "guessedtype": "property"}, "_classImageEls": {"guessedname": "_classImageEls", "type": "Array", "description": "HTML elements having the class name that is associated with this group\nElements are stored during the _foldCheck function and reused later during the fetch function. Gives a slight performance improvement when className and foldConditional are both used", "private": "", "guessedtype": "property"}, "_imgObjs": {"guessedname": "_imgObjs", "type": "Object", "description": "Collection of images registered with this group", "private": "", "guessedtype": "property"}, "timeoutLen": {"type": "Number", "description": "Timeout (time limit) length, in seconds", "guessedname": "timeoutLen", "guessedtype": "property"}, "className": {"type": "String", "description": "Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.\nThis class should have, in its CSS style definition, \"background:none !important;\"", "guessedname": "className", "guessedtype": "property"}, "_triggers": {"guessedname": "_triggers", "type": "Array", "description": "Collection of triggers for this group.\nKeeps track of each trigger's element, event, and event-listener-callback \"fetch\" function", "private": "", "guessedtype": "property"}, "_timeout": {"guessedname": "_timeout", "type": "Object", "description": "Timeout object to keep a handle on the time limit", "private": "", "guessedtype": "property"}, "foldConditional": {"type": "Boolean", "description": "Flag to check if images are above the fold. If foldConditional is true, the group will check each of its image locations at page load. If any part of the image is within the client viewport, the image is displayed immediately", "guessedname": "foldConditional", "guessedtype": "property"}}, "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."}, "YAHOO.widget.DS_JSArray": {"name": "YAHOO.widget.DS_JSArray", "constructors": [{"params": [{"type": "String[]", "name": "aData", "description": "  In-memory Javascript array of simple string data."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of config params."}], "description": "Implementation of YAHOO.widget.DataSource using a native Javascript array as\r\nits live data source."}], "namespace": "YAHOO.widget", "module": "autocomplete", "guessedname": "DS_JSArray", "methods": {"doQuery": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Queries the live data source defined by data for results. Results are passed\r\nback to a callback function.", "guessedname": "doQuery", "guessedtype": "function"}}, "extends": "YAHOO.widget.DataSource", "superclass": "YAHOO.widget.DataSource", "file": "DataSource.js", "guessedtype": "function", "shortname": "DS_JSArray", "properties": {"data": {"type": "Array", "description": "In-memory Javascript array of strings.", "guessedname": "data", "guessedtype": "property"}}, "description": "Implementation of YAHOO.widget.DataSource using a native Javascript array as\r\nits live data source."}, "YAHOO.widget.Calendar": {"name": "YAHOO.widget.Calendar", "configs": {"MY_LABEL_YEAR_POSITION": {"default": "2", "type": "Number", "description": "The position of the year in the month year label string used as the Calendar header", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEKDAYS": {"default": "true", "type": "Boolean", "description": "True if the Calendar should show weekday labels. True by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "MY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "MONTHS_SHORT": {"default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]", "type": "String[]", "description": "The short month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MULTI_SELECT": {"default": "false", "type": "Boolean", "description": "True if the Calendar should allow multiple selections. False by default.", "guessedname": "value", "guessedtype": "property"}, "MY_LABEL_YEAR_SUFFIX": {"default": "\"\"", "type": "String", "description": "The suffix used after the year when rendering the Calendar header", "guessedname": "value", "guessedtype": "property"}, "DATE_FIELD_DELIMITER": {"default": "\"\/\"", "type": "String", "description": "The value used to delimit date fields in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "MY_YEAR_POSITION": {"default": "2", "type": "Number", "description": "The position of the year in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "close": {"default": "false", "type": "Boolean", "description": "Whether or not a close button should be displayed for this Calendar", "guessedname": "value", "guessedtype": "property"}, "MONTHS_LONG": {"default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"", "type": "String[]", "description": "The long month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_MEDIUM": {"default": "[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]", "type": "String[]", "description": "The medium weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MY_LABEL_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in the month year label string used as the Calendar header", "guessedname": "value", "guessedtype": "property"}, "navigator": {"default": "null", "type": "{Object|Boolean}", "description": "Configuration for the Month\/Year CalendarNavigator UI which allows the user to jump directly to a \nspecific Month\/Year without having to scroll sequentially through months.\n<p>\nSetting this property to null (default value) or false, will disable the CalendarNavigator UI.\n<\/p>\n<p>\nSetting this property to true will enable the CalendarNavigatior UI with the default CalendarNavigator configuration values.\n<\/p>\n<p>\nThis property can also be set to an object literal containing configuration properties for the CalendarNavigator UI.\nThe configuration object expects the the following case-sensitive properties, with the \"strings\" property being a nested object.\nAny properties which are not provided will use the default values (defined in the CalendarNavigator class).\n<\/p>\n<dl>\n<dt>strings<\/dt>\n<dd><em>Object<\/em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI\n<dl>\n<dt>month<\/dt><dd><em>String<\/em> : The string to use for the month label. Defaults to \"Month\".<\/dd>\n<dt>year<\/dt><dd><em>String<\/em> : The string to use for the year label. Defaults to \"Year\".<\/dd>\n<dt>submit<\/dt><dd><em>String<\/em> : The string to use for the submit button label. Defaults to \"Okay\".<\/dd>\n<dt>cancel<\/dt><dd><em>String<\/em> : The string to use for the cancel button label. Defaults to \"Cancel\".<\/dd>\n<dt>invalidYear<\/dt><dd><em>String<\/em> : The string to use for invalid year values. Defaults to \"Year needs to be a number\".<\/dd>\n<\/dl>\n<\/dd>\n<dt>monthFormat<\/dt><dd><em>String<\/em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG<\/dd>\n<dt>initialFocus<\/dt><dd><em>String<\/em> : Either \"year\" or \"month\" specifying which input control should get initial focus. Defaults to \"year\"<\/dd>\n<\/dl>\n<p>E.g.<\/p>\n<pre>\nvar navConfig = {\nstrings: {\nmonth:\"Calendar Month\",\nyear:\"Calendar Year\",\nsubmit: \"Submit\",\ncancel: \"Cancel\",\ninvalidYear: \"Please enter a valid year\"\n},\nmonthFormat: YAHOO.widget.Calendar.SHORT,\ninitialFocus: \"month\"\n}\n<\/pre>", "guessedname": "value", "guessedtype": "property"}, "DATE_RANGE_DELIMITER": {"default": "\"-\"", "type": "String", "description": "The value used to delimit date ranges in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_HEADER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row headers. False by default.", "guessedname": "value", "guessedtype": "property"}, "title": {"default": "\"\"", "type": "String", "description": "The title to display above the Calendar's month header", "guessedname": "value", "guessedtype": "property"}, "maxdate": {"default": "null", "type": "String", "description": "The maximum selectable date in the current Calendar (mm\/dd\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "selected": {"default": "[]", "type": "String", "description": "The date or range of dates representing the current Calendar selection", "guessedname": "value", "guessedtype": "property"}, "LOCALE_WEEKDAYS": {"default": "\"short\"", "type": "String", "description": "The setting that determines which length of weekday labels should be used. Possible values are \"1char\", \"short\", \"medium\", and \"long\".", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_RIGHT": {"description": "The image that should be used for the right navigation arrow.", "default": "null", "deprecated": "You can customize the image by overriding the default CSS class for the right arrow - \"calnavright\"", "guessedname": "value", "guessedtype": "property", "type": "String"}, "HIDE_BLANK_WEEKS": {"default": "false", "type": "Boolean", "description": "True if the Calendar should suppress weeks that are not a part of the current month. False by default.", "guessedname": "value", "guessedtype": "property"}, "mindate": {"default": "null", "type": "String", "description": "The minimum selectable date in the current Calendar (mm\/dd\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "START_WEEKDAY": {"default": "0", "type": "number", "description": "The weekday the week begins on. Default is 0 (Sunday).", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_FOOTER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row footers. False by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_YEAR_POSITION": {"default": "3", "type": "Number", "description": "The position of the year in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_LONG": {"default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]", "type": "String[]", "description": "The long weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MDY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "pagedate": {"default": "today's date", "type": "String", "description": "The month\/year representing the current visible Calendar date (mm\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "MY_LABEL_MONTH_SUFFIX": {"default": "\" \"", "type": "String", "description": "The suffix used after the month when rendering the Calendar header", "guessedname": "value", "guessedtype": "property"}, "MD_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_LEFT": {"description": "The image that should be used for the left navigation arrow.", "default": "null", "deprecated": "You can customize the image by overriding the default CSS class for the left arrow - \"calnavleft\"", "guessedname": "value", "guessedtype": "property", "type": "String"}, "MD_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/day date string", "guessedname": "value", "guessedtype": "property"}, "DATE_DELIMITER": {"default": "\",\"", "type": "String", "description": "The value used to delimit individual dates in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "LOCALE_MONTHS": {"default": "\"long\"", "type": "String", "description": "The setting that determines which length of month labels should be used. Possible values are \"short\" and \"long\".", "guessedname": "value", "guessedtype": "property"}, "iframe": {"default": "true for IE6 and below, false for all other browsers", "type": "Boolean", "description": "Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.\nThis property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be \nenabled if required.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_1CHAR": {"default": "[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]", "type": "String[]", "description": "The 1-character weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_SHORT": {"default": "[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]", "type": "String[]", "description": "The short weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "id", "description": " optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional."}, {"type": "String | HTMLElement", "name": "container", "description": " The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document."}, {"type": "Object", "name": "config", "description": " optional The configuration object containing the initial configuration values for the Calendar."}], "description": "Calendar is the base class for the Calendar widget. In its most basic\nimplementation, it has the ability to render a calendar widget on the page\nthat can be manipulated to select a single date, move back and forth between\nmonths and years.\n<p>To construct the placeholder for the calendar widget, the code is as\nfollows:\n<xmp>\n<div id=\"calContainer\"><\/div>\n<\/xmp>\n<\/p>\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.<\/strong>\nThe Calendar can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.Calendar(\"calContainer\", configOptions);\n<\/xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.Calendar(containerDiv, configOptions);\n<\/xmp>\n<\/p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the Calendar's ID will be set to \"calContainer_t\".\n<\/p>"}], "namespace": "YAHOO.widget", "module": "calendar", "events": {"showNavEvent": {"description": "Fired after the CalendarNavigator is shown", "guessedname": "showNavEvent", "guessedtype": "property"}, "beforeDeselectEvent": {"description": "Fired before a selection is made", "guessedname": "beforeDeselectEvent", "guessedtype": "property"}, "beforeRenderNavEvent": {"description": "Fired just before the CalendarNavigator is to be rendered", "guessedname": "beforeRenderNavEvent", "guessedtype": "property"}, "beforeHideNavEvent": {"description": "Fired just before the CalendarNavigator is to be hidden", "guessedname": "beforeHideNavEvent", "guessedtype": "property"}, "hideEvent": {"description": "Fired after the Calendar is hidden", "guessedname": "hideEvent", "guessedtype": "property"}, "hideNavEvent": {"description": "Fired after the CalendarNavigator is hidden", "guessedname": "hideNavEvent", "guessedtype": "property"}, "renderNavEvent": {"description": "Fired after the CalendarNavigator is rendered", "guessedname": "renderNavEvent", "guessedtype": "property"}, "beforeRenderEvent": {"description": "Fired before the Calendar is rendered", "guessedname": "beforeRenderEvent", "guessedtype": "property"}, "beforeShowEvent": {"description": "Fired just before the Calendar is to be shown", "guessedname": "beforeShowEvent", "guessedtype": "property"}, "beforeSelectEvent": {"description": "Fired before a selection is made", "guessedname": "beforeSelectEvent", "guessedtype": "property"}, "renderEvent": {"description": "Fired when the Calendar is rendered", "guessedname": "renderEvent", "guessedtype": "property"}, "changePageEvent": {"description": "Fired when the Calendar page is changed", "guessedname": "changePageEvent", "guessedtype": "property"}, "resetEvent": {"description": "Fired when the Calendar is reset", "guessedname": "resetEvent", "guessedtype": "property"}, "clearEvent": {"description": "Fired when the Calendar is cleared", "guessedname": "clearEvent", "guessedtype": "property"}, "showEvent": {"description": "Fired after the Calendar is shown", "guessedname": "showEvent", "guessedtype": "property"}, "selectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a selection is made", "guessedname": "selectEvent", "guessedtype": "property"}, "beforeHideEvent": {"description": "Fired just before the Calendar is to be hidden", "guessedname": "beforeHideEvent", "guessedtype": "property"}, "beforeShowNavEvent": {"description": "Fired just before the CalendarNavigator is to be shown", "guessedname": "beforeShowNavEvent", "guessedtype": "property"}, "deselectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a selection is made", "guessedname": "deselectEvent", "guessedtype": "property"}}, "guessedname": "Calendar", "methods": {"show": {"description": "Shows the Calendar's outer container.", "guessedname": "show", "guessedtype": "function"}, "nextYear": {"description": "Navigates to the next year in the currently selected month in the calendar widget.", "guessedname": "nextYear", "guessedtype": "function"}, "configLocale": {"description": "The default handler for all configuration locale properties", "guessedname": "configLocale", "guessedtype": "function"}, "subtractYears": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of years to subtract from the current calendar"}], "description": "Subtcats the designated number of years from the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractYears", "guessedtype": "function"}, "buildWeekdays": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Array", "name": "html", "description": "\tThe current working HTML array"}], "description": "Renders the Calendar's weekday headers.", "guessedname": "buildWeekdays", "guessedtype": "function"}, "_parseArgs": {"return": {"type": "Object", "description": "Object with id, container, config properties containing\nthe reconciled argument values."}, "description": "Protected helper used to parse Calendar constructor\/init arguments.\nAs of 2.4.0, Calendar supports a simpler constructor \nsignature. This method reconciles arguments\nreceived in the pre 2.4.0 and 2.4.0 formats.", "protected": "", "params": [{"type": "Array", "name": "Function", "description": " \"arguments\" array"}], "guessedname": "_parseArgs", "guessedtype": "function"}, "previousMonth": {"description": "Navigates to the previous month page in the calendar widget.", "guessedname": "previousMonth", "guessedtype": "function"}, "getSelectedDates": {"return": {"type": "Date[]", "description": "An array of currently selected JavaScript Date objects."}, "description": "Gets the list of currently selected dates from the calendar.", "guessedname": "getSelectedDates", "guessedtype": "function"}, "renderOutOfBoundsDate": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a cell that falls before the minimum date or after the maximum date.\nwidget class.", "guessedname": "renderOutOfBoundsDate", "guessedtype": "function"}, "previousYear": {"description": "Navigates to the previous year in the currently selected month in the calendar widget.", "guessedname": "previousYear", "guessedtype": "function"}, "resetRenderers": {"description": "Resets the render stack of the current calendar to its original pre-render value.", "guessedname": "resetRenderers", "guessedtype": "function"}, "renderBody": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Date", "name": "workingDate", "description": "\tThe current working Date being used for the render process"}, {"type": "Array", "name": "html", "description": "\tThe current working HTML array"}], "description": "Renders the calendar body.", "guessedname": "renderBody", "guessedtype": "function"}, "addMonthRenderer": {"params": [{"type": "Number", "name": "month", "description": "\t\tThe month (1-12) to associate with this renderer"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a month to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the month passed to this method.", "guessedname": "addMonthRenderer", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "id", "description": " optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional."}, {"type": "String | HTMLElement", "name": "container", "description": " The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document."}, {"type": "Object", "name": "config", "description": " optional The configuration object containing the initial configuration values for the Calendar."}], "description": "Initializes the Calendar widget.", "guessedname": "init", "guessedtype": "function"}, "createTitleBar": {"return": {"type": "", "description": "The title bar element"}, "params": [{"type": "String", "name": "strTitle", "description": " The title to display in the title bar"}], "description": "Creates the title bar element and adds it to Calendar container DIV", "guessedname": "createTitleBar", "guessedtype": "function"}, "applyListeners": {"description": "Applies the Calendar's DOM listeners to applicable elements.", "guessedname": "applyListeners", "guessedtype": "function"}, "clearAllBodyCellStyles": {"params": [{"type": "style", "name": "style", "description": " The CSS class name to remove from all calendar body cells"}], "description": "Removes all styles from all body cells in the current calendar table.", "guessedname": "clearAllBodyCellStyles", "guessedtype": "function"}, "_parsePageDate": {"return": {"type": "Date", "description": "The Date object representing the pagedate"}, "description": "Parses a pagedate configuration property value. The value can either be specified as a string of form \"mm\/yyyy\" or a Date object \nand is parsed into a Date object normalized to the first day of the month. If no value is passed in, the month and year from today's date are used to create the Date object", "private": "", "params": [{"type": "Date|String", "name": "date", "description": "\tPagedate value which needs to be parsed"}], "guessedname": "_parsePageDate", "guessedtype": "function"}, "addRenderer": {"params": [{"type": "String", "name": "sDates", "description": "\t\tA date string to associate with the specified renderer. Valid formats\ninclude date (12\/24\/2005), month\/day (12\/24), and range (12\/1\/2004-1\/1\/2005)"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a renderer to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the conditions specified in the date string for this renderer.", "guessedname": "addRenderer", "guessedtype": "function"}, "onBeforeSelect": {"deprecated": "Event handlers for this event should be susbcribed to beforeSelectEvent.", "description": "Event executed before a date is selected in the calendar widget.", "guessedname": "onBeforeSelect", "guessedtype": "function"}, "removeCloseButton": {"description": "Removes the close button HTML element from the DOM", "guessedname": "removeCloseButton", "guessedtype": "function"}, "renderCellStyleHighlight2": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight2 style", "guessedname": "renderCellStyleHighlight2", "guessedtype": "function"}, "renderCellStyleHighlight3": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight3 style", "guessedname": "renderCellStyleHighlight3", "guessedtype": "function"}, "renderCellStyleHighlight1": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight1 style", "guessedname": "renderCellStyleHighlight1", "guessedtype": "function"}, "renderCellStyleHighlight4": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight4 style", "guessedname": "renderCellStyleHighlight4", "guessedtype": "function"}, "renderHeader": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Array", "name": "html", "description": "\tThe current working HTML array"}], "description": "Renders the calendar header.", "guessedname": "renderHeader", "guessedtype": "function"}, "addYears": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of years to add to the current calendar"}], "description": "Adds the designated number of years to the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "addYears", "guessedtype": "function"}, "deselectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": "\tThe index of the cell to deselect in the current calendar."}], "description": "Deselects a date on the current calendar by referencing the index of the cell that should be deselected.\nThis method is used to easily deselect a single cell (usually with a mouse click) without having to do\na full render. The selected style is removed from the cell directly.\nIf the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month \nor out of bounds cells), the method will not attempt to deselect it and in such a case, beforeDeselect and \ndeselect events will not be fired.", "guessedname": "deselectCell", "guessedtype": "function"}, "removeRenderers": {"description": "Removes all custom renderers added to the Calendar through the addRenderer, addMonthRenderer and \naddWeekdayRenderer methods. Calendar's render method needs to be called after removing renderers \nto re-render the Calendar without custom renderers applied.", "guessedname": "removeRenderers", "guessedtype": "function"}, "configOptions": {"description": "The default handler for all configuration options properties", "guessedname": "configOptions", "guessedtype": "function"}, "deselect": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String\/Date\/Date[]", "name": "date", "description": "\tThe date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12\/24\/2005,12\/26\/2005) or date range(s) (12\/24\/2005-1\/1\/2006).\nMultiple comma-delimited dates can also be passed to this method (12\/24\/2005,12\/11\/2005-12\/13\/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Deselects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once deselection has completed, render must be \ncalled for the changes to be reflected visually.\nThe method will not attempt to deselect any dates which are OOB (out of bounds, and hence not selectable) \nand the array of deselected dates passed to the deselectEvent will not contain any OOB dates.\nIf all dates are OOB, beforeDeselect and deselect events will not be fired.", "guessedname": "deselect", "guessedtype": "function"}, "_indexOfSelectedFieldArray": {"return": {"type": "Number", "description": "The index of the date field array within the collection of selected dates.\n-1 will be returned if the date is not found."}, "description": "Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates.", "private": "", "params": [{"type": "Number[]", "name": "find", "description": "\tThe date field array to search for"}], "guessedname": "_indexOfSelectedFieldArray", "guessedtype": "function"}, "_parseDates": {"return": {"type": "", "description": "An array of date field arrays"}, "description": "Converts a multi or single-date string to an array of date field arrays", "private": "", "params": [{"type": "String", "name": "sDates", "description": "\t\tDate string with one or more comma-delimited dates. Valid formats are mm\/dd, mm\/dd\/yyyy, mm\/dd\/yyyy-mm\/dd\/yyyy"}], "guessedname": "_parseDates", "guessedtype": "function", "type": "Array[](Number[])"}, "toString": {"return": {"type": "String", "description": "A string representation of the Calendar object."}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "renderCellNotThisMonth": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Applies the default style used for rendering dates that are not a part of the current\nmonth (preceding or trailing the cells for the current month)", "guessedname": "renderCellNotThisMonth", "guessedtype": "function"}, "configLocaleValues": {"description": "The default handler for all configuration locale field length properties", "guessedname": "configLocaleValues", "guessedtype": "function"}, "buildMonthLabel": {"return": {"type": "String", "description": "The formatted calendar month label"}, "description": "Builds the date label that will be displayed in the calendar header or\nfooter, depending on configuration.", "guessedname": "buildMonthLabel", "guessedtype": "function"}, "_parseRange": {"return": {"type": "", "description": "An array of date field arrays"}, "description": "Converts a date range to the full list of included dates", "private": "", "params": [{"type": "Number[]", "name": "startDate", "description": "\tDate field array representing the first date in the range"}, {"type": "Number[]", "name": "endDate", "description": "\t\tDate field array representing the last date in the range"}], "guessedname": "_parseRange", "guessedtype": "function", "type": "Array[](Number[])"}, "getDateFieldsByCellId": {"return": {"type": "Array", "description": "The array of Date fields for the specified Calendar cell"}, "params": [{"type": "String", "name": "id", "description": "\tThe id of the cell"}], "description": "Retrieves the Date object for the specified Calendar cell", "guessedname": "getDateFieldsByCellId", "guessedtype": "function"}, "configMaxDate": {"description": "The default handler for the \"maxdate\" property", "guessedname": "configMaxDate", "guessedtype": "function"}, "_addRenderer": {"guessedname": "_addRenderer", "params": [{"type": "String", "name": "type", "description": "\t\tThe type string that indicates the type of date renderer being added.\nValues are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,\nYAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH"}, {"type": "Array", "name": "aDates", "description": "\t\tAn array of dates used to construct the renderer. The format varies based\non the renderer type"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "The private method used for adding cell renderers to the local render stack.\nThis method is called by other methods that set the renderer type prior to the method call.", "private": "", "guessedtype": "function"}, "setMonth": {"params": [{"type": "Number", "name": "month", "description": "\t\tThe numeric month, from 0 (January) to 11 (December)"}], "description": "Sets the calendar's month explicitly", "guessedname": "setMonth", "guessedtype": "function"}, "_fieldArraysAreEqual": {"return": {"type": "Boolean", "description": "The boolean that represents the equality of the two arrays"}, "description": "Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.", "private": "", "params": [{"type": "Number[]", "name": "array1", "description": "\tThe first date field array to compare"}, {"type": "Number[]", "name": "array2", "description": "\tThe first date field array to compare"}], "guessedname": "_fieldArraysAreEqual", "guessedtype": "function"}, "styleCellDefault": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Styles a selectable cell.", "guessedname": "styleCellDefault", "guessedtype": "function"}, "_parseDate": {"return": {"type": "", "description": "A date field array representing the string passed to the method"}, "description": "Converts a date string to a date field array", "private": "", "params": [{"type": "String", "name": "sDate", "description": "\t\t\tDate string. Valid formats are mm\/dd and mm\/dd\/yyyy."}], "guessedname": "_parseDate", "guessedtype": "function", "type": "Array[](Number[])"}, "doCellMouseOver": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe event"}, {"type": "Calendar", "name": "cal", "description": "\tA reference to the calendar passed by the Event utility"}], "description": "The event that is executed when the user hovers over a cell", "guessedname": "doCellMouseOver", "guessedtype": "function"}, "doCellMouseOut": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe event"}, {"type": "Calendar", "name": "cal", "description": "\tA reference to the calendar passed by the Event utility"}], "description": "The event that is executed when the user moves the mouse out of a cell", "guessedname": "doCellMouseOut", "guessedtype": "function"}, "onClear": {"deprecated": "Event handlers for this event should be susbcribed to clearEvent.", "description": "Event executed when the calendar widget is completely cleared to the current month with no selections.", "guessedname": "onClear", "guessedtype": "function"}, "onDeselect": {"deprecated": "Event handlers for this event should be susbcribed to deselectEvent.", "params": [{"type": "Array", "name": "selected", "description": "\tAn array of date field arrays representing which date or dates were deselected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]"}], "description": "Event executed when a date is deselected in the calendar widget.", "guessedname": "onDeselect", "guessedtype": "function"}, "configNavigator": {"description": "The default handler for the \"navigator\" property", "guessedname": "configNavigator", "guessedtype": "function"}, "configClose": {"description": "Default handler for the \"close\" property", "guessedname": "configClose", "guessedtype": "function"}, "render": {"description": "Renders the calendar after it has been configured. The render() method has a specific call chain that will execute\nwhen the method is called: renderHeader, renderBody, renderFooter.\nRefer to the documentation for those methods for information on \nindividual render tasks.", "guessedname": "render", "guessedtype": "function"}, "initStyles": {"description": "Defines the style constants for the Calendar", "guessedname": "initStyles", "guessedtype": "function"}, "addMonths": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of months to add to the current calendar"}], "description": "Adds the designated number of months to the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "addMonths", "guessedtype": "function"}, "select": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String\/Date\/Date[]", "name": "date", "description": "\tThe date string of dates to select in the current calendar. Valid formats are\nindividual date(s) (12\/24\/2005,12\/26\/2005) or date range(s) (12\/24\/2005-1\/1\/2006).\nMultiple comma-delimited dates can also be passed to this method (12\/24\/2005,12\/11\/2005-12\/13\/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Selects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once selection has completed, render must be \ncalled for the changes to be reflected visually.\nAny dates which are OOB (out of bounds, not selectable) will not be selected and the array of \nselected dates passed to the selectEvent will not contain OOB dates.\nIf all dates are OOB, the no state change will occur; beforeSelect and select events will not be fired.", "guessedname": "select", "guessedtype": "function"}, "refreshLocale": {"private": "", "description": "Refreshes the locale values used to build the Calendar.", "guessedname": "refreshLocale", "guessedtype": "function"}, "initEvents": {"description": "Initializes Calendar's built-in CustomEvents", "guessedname": "initEvents", "guessedtype": "function"}, "nextMonth": {"description": "Navigates to the next month page in the calendar widget.", "guessedname": "nextMonth", "guessedtype": "function"}, "onReset": {"deprecated": "Event handlers for this event should be susbcribed to resetEvemt.", "description": "Event executed when the calendar widget is reset to its original state.", "guessedname": "onReset", "guessedtype": "function"}, "addWeekdayRenderer": {"params": [{"type": "Number", "name": "weekday", "description": "\t\tThe weekday (0-6) to associate with this renderer"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a weekday to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the weekday passed to this method.", "guessedname": "addWeekdayRenderer", "guessedtype": "function"}, "isDateOOM": {"return": {"type": "Boolean", "description": "true if the date is OOM"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date object for which to check the OOM status"}], "description": "Determines whether a given date is OOM (out of month).", "guessedname": "isDateOOM", "guessedtype": "function"}, "getCellIndex": {"return": {"type": "Number", "description": "The index of the date in Calendars cellDates\/cells arrays, or -1 if the date \nis not on the curently rendered Calendar page."}, "params": [{"type": "Date", "name": "date", "description": " JavaScript Date object, for which to find a cell index."}], "description": "Find the Calendar's cell index for a given date.\nIf the date is not found, the method returns -1.\n<p>\nThe returned index can be used to lookup the cell HTMLElement  \nusing the Calendar's cells array or passed to selectCell to select \ncells by index. \n<\/p>\nSee <a href=\"#cells\">cells<\/a>, <a href=\"#selectCell\">selectCell<\/a>.", "guessedname": "getCellIndex", "guessedtype": "function"}, "isDateOOB": {"return": {"type": "Boolean", "description": "true if the date is OOB"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date object for which to check the OOB status"}], "description": "Determines whether a given date is OOB (out of bounds - less than the mindate or more than the maxdate).", "guessedname": "isDateOOB", "guessedtype": "function"}, "doSelectCell": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe event"}, {"type": "Calendar", "name": "cal", "description": "\tA reference to the calendar passed by the Event utility"}], "description": "The default event function that is attached to a date link within a calendar cell\nwhen the calendar is rendered.", "guessedname": "doSelectCell", "guessedtype": "function"}, "onRender": {"deprecated": "Event handlers for this event should be susbcribed to renderEvent.", "description": "Event executed when the calendar widget is rendered.", "guessedname": "onRender", "guessedtype": "function"}, "renderRowHeader": {"params": [{"type": "Number", "name": "weekNum", "description": "\tThe week number of the current row"}, {"type": "Array", "name": "cell", "description": "\tThe current working HTML array"}], "description": "Renders the row header for a week.", "guessedname": "renderRowHeader", "guessedtype": "function"}, "renderFooter": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Array", "name": "html", "description": "\tThe current working HTML array"}], "description": "Renders the calendar footer. In the default implementation, there is\nno footer.", "guessedname": "renderFooter", "guessedtype": "function"}, "configSelected": {"description": "The default handler for the \"selected\" property", "guessedname": "configSelected", "guessedtype": "function"}, "renderRowFooter": {"params": [{"type": "Number", "name": "weekNum", "description": "\tThe week number of the current row"}, {"type": "Array", "name": "cell", "description": "\tThe current working HTML array"}], "description": "Renders the row footer for a week.", "guessedname": "renderRowFooter", "guessedtype": "function"}, "reset": {"description": "Resets the calendar widget to the originally selected month and year, and \nsets the calendar to the initial selection(s).", "guessedname": "reset", "guessedtype": "function"}, "deselectAll": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected.\nAssuming that this function executes properly, the return value should be an empty array.\nHowever, the empty array is returned for the sake of being able to check the selection status\nof the calendar."}, "description": "Deselects all dates on the current calendar.", "guessedname": "deselectAll", "guessedtype": "function"}, "renderBodyCellRestricted": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders the current calendar cell as a non-selectable \"black-out\" date using the default\nrestricted style.", "guessedname": "renderBodyCellRestricted", "guessedtype": "function"}, "onBeforeDeselect": {"deprecated": "Event handlers for this event should be susbcribed to beforeDeselectEvent.", "description": "Event executed before a date is deselected in the calendar widget.", "guessedname": "onBeforeDeselect", "guessedtype": "function"}, "onChangePage": {"deprecated": "Event handlers for this event should be susbcribed to changePageEvent.", "description": "Event executed when the user navigates to a different calendar page.", "guessedname": "onChangePage", "guessedtype": "function"}, "_toFieldArray": {"return": {"type": "Array[](Number[])", "description": "Array of date field arrays"}, "description": "Converts a date (either a JavaScript Date object, or a date string) to the internal data structure\nused to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]].", "private": "", "params": [{"type": "String\/Date\/Date[]", "name": "date", "description": "\tThe date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12\/24\/2005,12\/26\/2005) or date range(s) (12\/24\/2005-1\/1\/2006).\nMultiple comma-delimited dates can also be passed to this method (12\/24\/2005,12\/11\/2005-12\/13\/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "guessedname": "_toFieldArray", "guessedtype": "function"}, "renderCellStyleSelected": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Applies the default style used for rendering selected dates to the current calendar cell", "guessedname": "renderCellStyleSelected", "guessedtype": "function"}, "clearElement": {"params": [{"type": "HTMLTableCellElement", "name": "cell", "description": " The cell to clear"}], "description": "Clears the inner HTML, CSS class and style information from the specified cell.", "guessedname": "clearElement", "guessedtype": "function"}, "renderCellDefault": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a single standard calendar cell in the calendar widget table.\nAll logic for determining how a standard default cell will be rendered is \nencapsulated in this method, and must be accounted for when extending the\nwidget class.", "guessedname": "renderCellDefault", "guessedtype": "function"}, "subtractMonths": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of months to subtract from the current calendar"}], "description": "Subtracts the designated number of months from the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractMonths", "guessedtype": "function"}, "buildDayLabel": {"return": {"type": "String", "description": "The formatted day label"}, "params": [{"type": "Date", "name": "workingDate", "description": "\tThe current working date"}], "description": "Builds the date digit that will be displayed in calendar cells", "guessedname": "buildDayLabel", "guessedtype": "function"}, "toDate": {"return": {"type": "Date", "description": "JavaScript Date object representing the date field array."}, "params": [{"type": "Number[]", "name": "dateFieldArray", "description": "\tThe date field array to convert to a JavaScript Date."}], "description": "Converts a date field array [yyyy,mm,dd] to a JavaScript Date object. The date field array\nis the format in which dates are as provided as arguments to selectEvent and deselectEvent listeners.", "guessedname": "toDate", "guessedtype": "function"}, "configPageDate": {"description": "The default handler for the \"pagedate\" property", "guessedname": "configPageDate", "guessedtype": "function"}, "createCloseButton": {"return": {"type": "", "description": "The close HTML element created"}, "description": "Creates the close button HTML element and adds it to Calendar container DIV", "guessedname": "createCloseButton", "guessedtype": "function"}, "configTitle": {"description": "Default handler for the \"title\" property", "guessedname": "configTitle", "guessedtype": "function"}, "selectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": "\tThe index of the cell to select in the current calendar."}], "description": "Selects a date on the current calendar by referencing the index of the cell that should be selected.\nThis method is used to easily select a single cell (usually with a mouse click) without having to do\na full render. The selected style is applied to the cell directly.\nIf the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month \nor out of bounds cells), it will not be selected and in such a case beforeSelect and select events will not be fired.", "guessedname": "selectCell", "guessedtype": "function"}, "removeTitleBar": {"description": "Removes the title bar element from the DOM", "guessedname": "removeTitleBar", "guessedtype": "function"}, "configMinDate": {"description": "The default handler for the \"mindate\" property", "guessedname": "configMinDate", "guessedtype": "function"}, "hide": {"description": "Hides the Calendar's outer container from view.", "guessedname": "hide", "guessedtype": "function"}, "validate": {"type": "Boolean", "return": {"type": "", "description": "Should return true if the widget validates, and false if\nit doesn't."}, "description": "Validates the calendar widget. This method has no default implementation\nand must be extended by subclassing the widget.", "guessedname": "validate", "guessedtype": "function"}, "getDateByCellId": {"return": {"type": "Date", "description": "The Date object for the specified Calendar cell"}, "params": [{"type": "String", "name": "id", "description": "\tThe id of the cell"}], "description": "Retrieves the Date object for the specified Calendar cell", "guessedname": "getDateByCellId", "guessedtype": "function"}, "clear": {"description": "Clears the selected dates in the current calendar widget and sets the calendar\nto the current month and year.", "guessedname": "clear", "guessedtype": "function"}, "configIframe": {"description": "Default Config listener for the iframe property. If the iframe config property is set to true, \nrenders the built-in IFRAME shim if the container is relatively or absolutely positioned.", "guessedname": "configIframe", "guessedtype": "function"}, "_toDate": {"return": {"type": "Date", "description": "JavaScript Date object representing the date field array"}, "description": "Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.", "deprecated": "Made public, toDate", "private": "", "params": [{"type": "Number[]", "name": "dateFieldArray", "description": "\tThe date field array to convert to a JavaScript Date."}], "guessedname": "_toDate", "guessedtype": "function"}, "onSelect": {"deprecated": "Event handlers for this event should be susbcribed to selectEvent.", "params": [{"type": "Array", "name": "selected", "description": "\tAn array of date field arrays representing which date or dates were selected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]"}], "description": "Event executed when a date is selected in the calendar widget.", "guessedname": "onSelect", "guessedtype": "function"}, "setYear": {"params": [{"type": "Number", "name": "year", "description": "\t\tThe numeric 4-digit year"}], "description": "Sets the calendar's year explicitly.", "guessedname": "setYear", "guessedtype": "function"}, "renderCellStyleToday": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Applies the default style used for rendering today's date to the current calendar cell", "guessedname": "renderCellStyleToday", "guessedtype": "function"}}, "file": "Calendar.js", "guessedtype": "function", "shortname": "Calendar", "properties": {"Style.CSS_HEADER_TEXT": {"guessedname": "CSS_HEADER_TEXT", "guessedtype": "property"}, "Style.CSS_CELL_RIGHT": {"guessedname": "CSS_CELL_RIGHT", "guessedtype": "property"}, "Style.CSS_CELL_BOTTOM": {"guessedname": "CSS_CELL_BOTTOM", "guessedtype": "property"}, "YAHOO.widget.Calendar.WEEKDAY": {"description": "Type constant used for renderers to represent a weekday", "static": "", "guessedname": "WEEKDAY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Calendar.LONG": {"description": "Constant used to represent long date field string formats (e.g. Monday or February)", "static": "", "guessedname": "LONG", "guessedtype": "property", "type": "String", "final": ""}, "cfg": {"type": "YAHOO.util.Config", "description": "The Config object used to hold the configuration variables for the Calendar", "guessedname": "cfg", "guessedtype": "property"}, "Style.CSS_HEADER": {"guessedname": "CSS_HEADER", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT4": {"guessedname": "CSS_CELL_HIGHLIGHT4", "guessedtype": "property"}, "Style.CSS_CONTAINER": {"guessedname": "CSS_CONTAINER", "guessedtype": "property"}, "YAHOO.widget.Calendar.MONTH_DAY": {"description": "Type constant used for renderers to represent an individual date across any year (M\/D)", "static": "", "guessedname": "MONTH_DAY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Calendar.IMG_ROOT": {"description": "The path to be used for images loaded for the Calendar", "deprecated": "You can now customize images by overriding the calclose, calnavleft and calnavright default CSS classes for the close icon, left arrow and right arrow respectively", "static": "", "guessedname": "IMG_ROOT", "guessedtype": "property", "type": "String"}, "Style.CSS_NAV_RIGHT": {"guessedname": "CSS_NAV_RIGHT", "guessedtype": "property"}, "Config": {"description": "The configuration object used to set up the calendars various locale and style options.", "deprecated": "Configuration properties should be set by calling Calendar.cfg.setProperty.", "private": "", "guessedname": "Config", "guessedtype": "property", "type": "Object"}, "id": {"type": "String", "description": "The id that uniquely identifies this Calendar.", "guessedname": "id", "guessedtype": "property"}, "_selectedDates": {"guessedname": "_selectedDates", "type": "Array", "description": "The private list of initially selected dates.", "private": "", "guessedtype": "property"}, "index": {"type": "Number", "description": "The index of this item in the parent group", "guessedname": "index", "guessedtype": "property"}, "YAHOO.widget.Calendar.ONE_CHAR": {"description": "Constant used to represent single character date field string formats (e.g. M, T, W)", "static": "", "guessedname": "ONE_CHAR", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Calendar.STOP_RENDER": {"description": "Constant used for halting the execution of the remainder of the render stack", "static": "", "guessedname": "STOP_RENDER", "guessedtype": "property", "type": "String", "final": ""}, "oNavigator": {"type": "CalendarNavigator", "description": "A reference to the CalendarNavigator instance created for this Calendar.\nWill be null if the \"navigator\" configuration property has not been set", "guessedname": "oNavigator", "guessedtype": "property"}, "YAHOO.widget.Calendar.MONTH": {"description": "Type constant used for renderers to represent a month across any year", "static": "", "guessedname": "MONTH", "guessedtype": "property", "type": "String", "final": ""}, "Style.CSS_CELL": {"guessedname": "CSS_CELL", "guessedtype": "property"}, "renderStack": {"type": "Array[]", "description": "The list of render functions, along with required parameters, used to render cells.", "guessedname": "renderStack", "guessedtype": "property"}, "Style.CSS_CELL_LEFT": {"guessedname": "CSS_CELL_LEFT", "guessedtype": "property"}, "Style.CSS_BODY": {"guessedname": "CSS_BODY", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT1": {"guessedname": "CSS_CELL_HIGHLIGHT1", "guessedtype": "property"}, "Style.CSS_SINGLE": {"guessedname": "CSS_SINGLE", "guessedtype": "property"}, "_renderStack": {"guessedname": "_renderStack", "type": "Array", "description": "A copy of the initial render functions created before rendering.", "private": "", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT3": {"guessedname": "CSS_CELL_HIGHLIGHT3", "guessedtype": "property"}, "today": {"type": "Date", "description": "A Date object representing today's date.", "guessedname": "today", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT2": {"guessedname": "CSS_CELL_HIGHLIGHT2", "guessedtype": "property"}, "Style.CSS_WEEKDAY_CELL": {"guessedname": "CSS_WEEKDAY_CELL", "guessedtype": "property"}, "browser": {"description": "Returns a string representing the current browser.", "deprecated": "As of 2.3.0, environment information is available in YAHOO.env.ua", "see": "YAHOO.env.ua", "guessedname": "browser", "guessedtype": "function", "type": "String"}, "containerId": {"type": "String", "description": "The unique id associated with the Calendar's container", "guessedname": "containerId", "guessedtype": "property"}, "parent": {"type": "CalendarGroup", "description": "The parent CalendarGroup, only to be set explicitly by the parent group", "guessedname": "parent", "guessedtype": "property"}, "Style.CSS_CELL_OOM": {"guessedname": "CSS_CELL_OOM", "guessedtype": "property"}, "Style.CSS_CELL_OOB": {"guessedname": "CSS_CELL_OOB", "guessedtype": "property"}, "YAHOO.widget.Calendar._EVENT_TYPES": {"description": "The set of Custom Event types supported by the Calendar", "private": "", "static": "", "guessedname": "_EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "Style.CSS_CLOSE": {"guessedname": "CSS_CLOSE", "guessedtype": "property"}, "Style.CSS_CALENDAR": {"guessedname": "CSS_CALENDAR", "guessedtype": "property"}, "Style.CSS_CELL_TODAY": {"guessedname": "CSS_CELL_TODAY", "guessedtype": "property"}, "Style.CSS_FOOTER": {"guessedname": "CSS_FOOTER", "guessedtype": "property"}, "YAHOO.widget.Calendar._DEFAULT_CONFIG": {"description": "The set of default Config property keys and values for the Calendar", "private": "", "static": "", "guessedname": "_DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "YAHOO.widget.Calendar.MEDIUM": {"description": "Constant used to represent medium date field string formats (e.g. Mon)", "static": "", "guessedname": "MEDIUM", "guessedtype": "property", "type": "String", "final": ""}, "Style.CSS_CELL_SELECTABLE": {"guessedname": "CSS_CELL_SELECTABLE", "guessedtype": "property"}, "YAHOO.widget.Calendar.RANGE": {"description": "Type constant used for renderers to represent a range of individual dates (M\/D\/Y-M\/D\/Y)", "static": "", "guessedname": "RANGE", "guessedtype": "property", "type": "String", "final": ""}, "Style.CSS_CELL_HOVER": {"guessedname": "CSS_CELL_HOVER", "guessedtype": "property"}, "Style.CSS_CELL_SELECTOR": {"guessedname": "CSS_CELL_SELECTOR", "guessedtype": "property"}, "Options": {"type": "Object", "description": "The local object which contains the Calendar's options", "guessedname": "Options", "guessedtype": "property"}, "Style.CSS_WEEKDAY_ROW": {"guessedname": "CSS_WEEKDAY_ROW", "guessedtype": "property"}, "Style.CSS_CELL_RESTRICTED": {"guessedname": "CSS_CELL_RESTRICTED", "guessedtype": "property"}, "cellDates": {"type": "Array[](Number[])", "description": "The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D].", "guessedname": "cellDates", "guessedtype": "property"}, "Style.CSS_ROW_HEADER": {"guessedname": "CSS_ROW_HEADER", "guessedtype": "property"}, "Style.CSS_ROW_FOOTER": {"guessedname": "CSS_ROW_FOOTER", "guessedtype": "property"}, "Style.CSS_CELL_TOP": {"guessedname": "CSS_CELL_TOP", "guessedtype": "property"}, "Locale": {"type": "Object", "description": "The local object which contains the Calendar's locale settings", "guessedname": "Locale", "guessedtype": "property"}, "cells": {"type": "HTMLTableCellElement[]", "description": "The collection of calendar table cells", "guessedname": "cells", "guessedtype": "property"}, "Style.CSS_CELL_SELECTED": {"guessedname": "CSS_CELL_SELECTED", "guessedtype": "property"}, "YAHOO.widget.Calendar.DATE": {"description": "Type constant used for renderers to represent an individual date (M\/D\/Y)", "static": "", "guessedname": "DATE", "guessedtype": "property", "type": "String", "final": ""}, "domEventMap": {"type": "Object", "description": "A map of DOM event handlers to attach to cells associated with specific CSS class names", "guessedname": "domEventMap", "guessedtype": "property"}, "YAHOO.widget.Calendar.DISPLAY_DAYS": {"description": "Constant that represents the total number of date cells that are displayed in a given month", "static": "", "guessedname": "DISPLAY_DAYS", "guessedtype": "property", "type": "Number", "final": ""}, "oDomContainer": {"type": "HTMLElement", "description": "The DOM element reference that points to this calendar's container element. The calendar will be inserted into this element when the shell is rendered.", "guessedname": "oDomContainer", "guessedtype": "property"}, "YAHOO.widget.Calendar._STYLES": {"description": "The set of default style constants for the Calendar", "private": "", "static": "", "guessedname": "_STYLES", "guessedtype": "property", "type": "Object", "final": ""}, "Style.CSS_NAV_LEFT": {"guessedname": "CSS_NAV_LEFT", "guessedtype": "property"}, "Style.CSS_NAV": {"guessedname": "CSS_NAV", "guessedtype": "property"}, "YAHOO.widget.Calendar.SHORT": {"description": "Constant used to represent short date field string formats (e.g. Tu or Feb)", "static": "", "guessedname": "SHORT", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Calendar is the base class for the Calendar widget. In its most basic\nimplementation, it has the ability to render a calendar widget on the page\nthat can be manipulated to select a single date, move back and forth between\nmonths and years.\n<p>To construct the placeholder for the calendar widget, the code is as\nfollows:\n<xmp>\n<div id=\"calContainer\"><\/div>\n<\/xmp>\n<\/p>\n<p>\n<strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.<\/strong>\nThe Calendar can be constructed by simply providing a container ID string, \nor a reference to a container DIV HTMLElement (the element needs to exist \nin the document).\nE.g.:\n<xmp>\nvar c = new YAHOO.widget.Calendar(\"calContainer\", configOptions);\n<\/xmp>\nor:\n<xmp>\nvar containerDiv = YAHOO.util.Dom.get(\"calContainer\");\nvar c = new YAHOO.widget.Calendar(containerDiv, configOptions);\n<\/xmp>\n<\/p>\n<p>\nIf not provided, the ID will be generated from the container DIV ID by adding an \"_t\" suffix.\nFor example if an ID is not provided, and the container's ID is \"calContainer\", the Calendar's ID will be set to \"calContainer_t\".\n<\/p>"}, "YAHOO.widget.Axis": {"name": "YAHOO.widget.Axis", "constructors": [{"description": "Defines a CartesianChart's vertical or horizontal axis."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "Axis", "file": "Axis.js", "guessedtype": "function", "shortname": "Axis", "properties": {"hideOverlappingLabels": {"type": "Boolean", "description": "If true, labels that overlap previously drawn labels on the axis will be hidden.", "guessedname": "hideOverlappingLabels", "guessedtype": "property"}, "labelFunction": {"type": "String", "description": "A string reference to the globally-accessible function that may be called to\ndetermine each of the label values for this axis.", "guessedname": "labelFunction", "guessedtype": "property"}, "type": {"type": "String", "description": "The type of axis.", "guessedname": "type", "guessedtype": "property"}, "orientation": {"type": "String", "description": "The direction in which the axis is drawn. May be \"horizontal\" or \"vertical\".", "guessedname": "orientation", "guessedtype": "property"}, "reverse": {"type": "Boolean", "description": "If true, the items on the axis will be drawn in opposite direction.", "guessedname": "reverse", "guessedtype": "property"}}, "description": "Defines a CartesianChart's vertical or horizontal axis."}, "YAHOO.widget.EditorInfo": {"name": "YAHOO.widget.EditorInfo", "namespace": "YAHOO.widget", "module": "editor", "guessedname": "EditorInfo", "methods": {"toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the EditorInfo.", "guessedname": "toString", "guessedtype": "function"}, "getEditorById": {"return": {"type": "", "description": "Object <a href=\"YAHOO.widget.Editor.html\">YAHOO.widget.Editor<\/a>"}, "params": [{"type": "String\/HTMLElement", "name": "id", "description": " The id or reference of the textarea to return the Editor instance of"}], "description": "Returns a reference to the Editor object associated with the given textarea", "guessedname": "getEditorById", "guessedtype": "function"}}, "static": "", "file": "simple-editor.js", "guessedtype": "property", "shortname": "EditorInfo", "properties": {"window": {"guessedname": "window", "type": "Object <a href=\"YAHOO.widget.EditorWindow.html\">YAHOO.widget.EditorWindow<\/a>", "description": "A reference to the currently open window object in any editor on the page.", "private": "", "guessedtype": "property"}, "_instances": {"guessedname": "_instances", "type": "Object", "description": "A reference to all editors on the page.", "private": "", "guessedtype": "property"}, "Dom": {"private": "", "guessedname": "Dom", "guessedtype": "property"}, "panel": {"guessedname": "panel", "type": "Object <a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay<\/a>", "description": "A reference to the currently open panel in any editor on the page.", "private": "", "guessedtype": "property"}}, "description": "Singleton object used to track the open window objects and panels across the various open editors"}, "YAHOO.util.ArrayAssert": {"name": "YAHOO.util.ArrayAssert", "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "ArrayAssert", "methods": {"containsMatch": {"static": "", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value matching some condition is present in an array. This uses\na function to determine a match.", "guessedname": "containsMatch", "guessedtype": "function"}, "doesNotContain": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "guessedname": "doesNotContain", "guessedtype": "function"}, "indexOf": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the given value is contained in an array at the specified index.\nThis uses the triple equals sign so no type cohersion will occur.", "guessedname": "indexOf", "guessedtype": "function"}, "itemsAreSame": {"static": "", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the values in an array are the same, and in the same position,\nas values in another array. This uses the triple equals sign\nso no type cohersion will occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "guessedname": "itemsAreSame", "guessedtype": "function"}, "contains": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "guessedname": "contains", "guessedtype": "function"}, "containsItems": {"static": "", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a set of values are present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nbe found.", "guessedname": "containsItems", "guessedtype": "function"}, "doesNotContainItems": {"static": "", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are not expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a set of values are not present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nnot be found.", "guessedname": "doesNotContainItems", "guessedtype": "function"}, "itemsAreEquivalent": {"return": {"type": "Void", "description": ""}, "description": "Asserts that the values in an array are equivalent, and in the same position,\nas values in another array. This uses a function to determine if the values\nare equivalent. Note that the array objects themselves\nneed not be the same for this test to pass.", "static": "", "guessedname": "itemsAreEquivalent", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "Function", "name": "comparator", "description": " A function that returns true if the values are equivalent\nor false if not."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreEqual": {"static": "", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the values in an array are equal, and in the same position,\nas values in another array. This uses the double equals sign\nso type cohersion may occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "guessedname": "itemsAreEqual", "guessedtype": "function"}, "isEmpty": {"static": "", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an array is empty.", "guessedname": "isEmpty", "guessedtype": "function"}, "lastIndexOf": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the given value is contained in an array at the specified index,\nstarting from the back of the array.\nThis uses the triple equals sign so no type cohersion will occur.", "guessedname": "lastIndexOf", "guessedtype": "function"}, "isNotEmpty": {"static": "", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an array is not empty.", "guessedname": "isNotEmpty", "guessedtype": "function"}, "doesNotContainMatch": {"static": "", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that no values matching a condition are present in an array. This uses\na function to determine a match.", "guessedname": "doesNotContainMatch", "guessedtype": "function"}}, "static": "", "file": "ArrayAssert.js", "guessedtype": "property", "shortname": "ArrayAssert", "description": "The ArrayAssert object provides functions to test JavaScript array objects\nfor a variety of cases."}, "YAHOO.util.UnexpectedError": {"name": "YAHOO.util.UnexpectedError", "constructors": [{"params": [{"type": "Error", "name": "cause", "description": " The unexpected error that caused this error to be \nthrown."}], "description": "UnexpectedError is subclass of AssertionError that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "UnexpectedError", "extends": "YAHOO.util.AssertionError", "superclass": "YAHOO.util.AssertionError", "file": "Assert.js", "guessedtype": "function", "shortname": "UnexpectedError", "properties": {"cause": {"type": "Error", "description": "The unexpected error that occurred."}, "name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "UnexpectedError is subclass of AssertionError that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}, "YAHOO.util.DataSource": {"name": "YAHOO.util.DataSource", "constructors": [{"params": [{"type": "Object", "name": "oLiveData", "description": "  Pointer to live database."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "The DataSource class defines and manages a live set of data for widgets to\ninteract with. Examples of live databases include in-memory\nlocal data such as a JavaScript array, a JavaScript function, or JSON, or\nremote data such as data retrieved through an XHR connection."}], "namespace": "YAHOO.util", "module": "datasource", "properties": {"DataSource._nTransactionId": {"description": "Internal class variable to assign unique transaction IDs.", "private": "", "static": "", "guessedname": "_nTransactionId", "guessedtype": "property", "type": "Number"}, "TYPE_HTMLTABLE": {"description": "Type is an HTML TABLE element.", "default": "6", "guessedname": "TYPE_HTMLTABLE", "guessedtype": "property", "type": "Number", "final": ""}, "maxCacheEntries": {"default": "0", "type": "Number", "description": "Max size of the local cache.  Set to 0 to turn off caching.  Caching is\nuseful to reduce the number of server connections.  Recommended only for data\nsources that return comprehensive results for queries or when stale data is\nnot an issue.", "guessedname": "maxCacheEntries", "guessedtype": "property"}, "_oQueue": {"guessedname": "_oQueue", "type": "Object", "description": "Local queue of request connections, enabled if queue needs to be managed.", "private": "", "guessedtype": "property"}, "TYPE_TEXT": {"description": "Type is plain text.", "default": "5", "guessedname": "TYPE_TEXT", "guessedtype": "property", "type": "Number", "final": ""}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of DataSource instance.", "private": "", "guessedtype": "property"}, "responseType": {"default": "YAHOO.util.DataSource.TYPE_UNKNOWN", "type": "Number", "description": "Format of response.", "guessedname": "responseType", "guessedtype": "property"}, "TYPE_XHR": {"description": "Type is hosted on a server via an XHR connection.", "default": "2", "guessedname": "TYPE_XHR", "guessedtype": "property", "type": "Number", "final": ""}, "_xhrCallback": {"guessedname": "_xhrCallback", "param": "oResponse {Object} HTTPXMLRequest object", "description": "Define Connection Manager callback object", "private": "", "guessedtype": "property"}, "DataSource._nIndex": {"description": "Internal class variable to index multiple DataSource instances.", "private": "", "static": "", "guessedname": "_nIndex", "guessedtype": "property", "type": "Number"}, "TYPE_JSON": {"description": "Type is JSON.", "default": "3", "guessedname": "TYPE_JSON", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_UNKNOWN": {"description": "Type is unknown.", "default": "-1", "guessedname": "TYPE_UNKNOWN", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_JSFUNCTION": {"description": "Type is a JavaScript Function.", "default": "1", "guessedname": "TYPE_JSFUNCTION", "guessedtype": "property", "type": "Number", "final": ""}, "dataType": {"default": "YAHOO.util.DataSource.TYPE_UNKNOWN", "type": "Number", "description": "Where the live data is held.", "guessedname": "dataType", "guessedtype": "property"}, "_aCache": {"guessedname": "_aCache", "type": "Object[]", "description": "Local cache of data result object literals indexed chronologically.", "private": "", "guessedtype": "property"}, "liveData": {"type": "Object", "description": "Pointer to live database.", "guessedname": "liveData", "guessedtype": "property"}, "ERROR_DATAINVALID": {"description": "Error message for invalid dataresponses.", "default": "\"Invalid data\"", "guessedname": "ERROR_DATAINVALID", "guessedtype": "property", "type": "String", "final": ""}, "connTimeout": {"default": "0", "type": "Number", "description": "If data is accessed over XHR via Connection Manager, the connection timeout\ndefines how many  milliseconds the XHR connection will wait for a server\nresponse. Any non-zero value will enable the Connection utility's\nAuto-Abort feature.", "guessedname": "connTimeout", "guessedtype": "property"}, "responseSchema": {"type": "Object", "description": "Response schema object literal takes a combination of the following properties:\n<dl>\n<dt>resultsList<\/dt> <dd>Pointer to array of tabular data<\/dd>\n<dt>resultNode<\/dt> <dd>Pointer to node name of row data (XML data only)<\/dd>\n<dt>recordDelim<\/dt> <dd>Record delimiter (text data only)<\/dd>\n<dt>fieldDelim<\/dt> <dd>Field delimiter (text data only)<\/dd>\n<dt>fields<\/dt> <dd>Array of field names (aka keys), or array of object literals\nsuch as: {key:\"fieldname\",parser:YAHOO.util.DataSource.parseDate}<\/dd>\n<\/dl>", "guessedname": "responseSchema", "guessedtype": "property"}, "TYPE_JSARRAY": {"description": "Type is a JavaScript Array.", "default": "0", "guessedname": "TYPE_JSARRAY", "guessedtype": "property", "type": "Number", "final": ""}, "connXhrMode": {"default": "\"allowAll\"", "type": "String", "description": "If data is accessed over XHR via Connection Manager, this setting defines\nrequest\/response management in the following manner:\n<dl>\n<dt>queueRequests<\/dt>\n<dd>If a request is already in progress, wait until response is returned\nbefore sending the next request.<\/dd>\n<dt>cancelStaleRequests<\/dt>\n<dd>If a request is already in progress, cancel it before sending the next\nrequest.<\/dd>\n<dt>ignoreStaleResponses<\/dt>\n<dd>Send all requests, but handle only the response for the most recently\nsent request.<\/dd>\n<dt>allowAll<\/dt>\n<dd>Send all requests and handle all responses.<\/dd>\n<\/dl>", "guessedname": "connXhrMode", "guessedtype": "property"}, "TYPE_XML": {"description": "Type is XML.", "default": "4", "guessedname": "TYPE_XML", "guessedtype": "property", "type": "Number", "final": ""}, "ERROR_DATANULL": {"description": "Error message for null data responses.", "default": "\"Null data\"", "guessedname": "ERROR_DATANULL", "guessedtype": "property", "type": "String", "final": ""}, "connMethodPost": {"default": "false", "type": "Boolean", "description": "If data is accessed over XHR via Connection Manager, true if data should be\nsent via POST, otherwise data will be sent via GET.", "guessedname": "connMethodPost", "guessedtype": "property"}, "_aIntervals": {"guessedname": "_aIntervals", "type": "Array", "description": "Array of polling interval IDs that have been enabled, needed to clear all intervals.", "private": "", "guessedtype": "property"}, "connMgr": {"default": "YAHOO.util.Connect", "type": "Object", "description": "Alias to YUI Connection Manager. Allows implementers to specify their own\nsubclasses of the YUI Connection Manager utility.", "guessedname": "connMgr", "guessedtype": "property"}}, "guessedname": "DataSource", "methods": {"DataSource.parseString": {"return": {"type": "Number", "description": "A string, or null."}, "description": "Converts data to type String.", "static": "", "guessedname": "parseString", "guessedtype": "function", "params": [{"type": "String | Number | Boolean | Date | Array | Object", "name": "oData", "description": "  Data to parse.\nThe special values null and undefined will return null."}]}, "flushCache": {"description": "Flushes cache.", "guessedname": "flushCache", "guessedtype": "function"}, "clearInterval": {"params": [{"type": "Number", "name": "nId", "description": "  Interval ID."}], "description": "Disables polling mechanism associated with the given interval ID.", "guessedname": "clearInterval", "guessedtype": "function"}, "parseArrayData": {"return": {"type": "Object", "description": "Parsed response object."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oRawResponse", "description": "  The raw response from the live database."}], "description": "Overridable method parses raw array data into a response object.", "guessedname": "parseArrayData", "guessedtype": "function"}, "sendRequest": {"return": {"type": "Number", "description": "Transaction ID, or null if response found in cache."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Function", "name": "oCallback", "description": "  Handler function to receive the response."}, {"type": "Object", "name": "oCaller", "description": "  The Calling object that is making the request."}], "description": "First looks for cached response, then sends request to live data.", "guessedname": "sendRequest", "guessedtype": "function"}, "_xhrFailure": {"guessedname": "_xhrFailure", "params": [{"type": "Object", "name": "oResponse", "description": "  HTTPXMLRequest object"}], "description": "Define Connection Manager failure handler", "private": "", "guessedtype": "function"}, "parseJSONData": {"return": {"type": "Object", "description": "Parsed response object."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oRawResponse", "description": "  The raw response from the live database."}], "description": "Overridable method parses raw JSON data into a response object.", "guessedname": "parseJSONData", "guessedtype": "function"}, "parseTextData": {"return": {"type": "Object", "description": "Parsed response object."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oRawResponse", "description": "  The raw response from the live database."}], "description": "Overridable method parses raw plain text data into a response object.", "guessedname": "parseTextData", "guessedtype": "function"}, "parseHTMLTableData": {"return": {"type": "Object", "description": "Parsed response object."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oRawResponse", "description": "  The raw response from the live database."}], "description": "Overridable method parses raw HTML TABLE element data into a response object.", "guessedname": "parseHTMLTableData", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the DataSource instance."}, "description": "Public accessor to the unique name of the DataSource instance.", "guessedname": "toString", "guessedtype": "function"}, "doBeforeCallback": {"return": {"type": "Object", "description": "Parsed response object."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oRawResponse", "description": "  The raw response from the live database."}, {"type": "Object", "name": "oParsedResponse", "description": "  The parsed response to return to calling object."}], "description": "Overridable method gives implementers access to the original raw response and\nthe parsed response (parsed against the given schema) before the data\nis added to the cache (if applicable) and then sent back to callback function.\nThis is your chance to access the raw response and\/or populate the parsed\nresponse with any custom data.", "guessedname": "doBeforeCallback", "guessedtype": "function"}, "DataSource.parseDate": {"return": {"type": "Date", "description": "A Date instance."}, "description": "Converts data to type Date.", "static": "", "guessedname": "parseDate", "guessedtype": "function", "params": [{"type": "Date | String | Number", "name": "oData", "description": "  Data to convert."}]}, "addToCache": {"params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oResponse", "description": "  Response object to cache."}], "description": "Adds a new item to the cache. If cache is full, evicts the stalest item\nbefore adding the new item.", "guessedname": "addToCache", "guessedtype": "function"}, "getCachedResponse": {"return": {"type": "Object", "description": "Cached response object or null."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Function", "name": "oCallback", "description": "  Handler function to receive the response."}, {"type": "Object", "name": "oCaller", "description": "  The Calling object that is making the request."}], "description": "Overridable method passes request to cache and returns cached response if any,\nrefreshing the hit in the cache as the newest item. Returns null if there is\nno cache hit.", "guessedname": "getCachedResponse", "guessedtype": "function"}, "setInterval": {"return": {"type": "Number", "description": "Interval ID."}, "params": [{"type": "Number", "name": "nMsec", "description": "  Length of interval in milliseconds."}, {"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Function", "name": "oCallback", "description": "  Handler function to receive the response."}, {"type": "Object", "name": "oCaller", "description": "  The Calling object that is making the request."}], "description": "Sets up a polling mechanism to send requests at set intervals and forward\nresponses to given callback.", "guessedname": "setInterval", "guessedtype": "function"}, "handleResponse": {"params": [{"type": "Object", "name": "oRequest", "description": "  Request object"}, {"type": "Object", "name": "oRawResponse", "description": "  The raw response from the live database."}, {"type": "Function", "name": "oCallback", "description": "  Handler function to receive the response."}, {"type": "Object", "name": "oCaller", "description": "  The calling object that is making the request."}, {"type": "Number", "name": "tId", "description": "  Transaction ID."}], "description": "Handles raw data response from live data source. Sends a parsed response object\nto the callback function in this format:\nfnCallback(oRequest, oParsedResponse)\nwhere the oParsedResponse object literal with the following properties:\n<ul>\n<li>tId {Number} Unique transaction ID<\/li>\n<li>results {Array} Array of parsed data results<\/li>\n<li>error {Boolean} True if there was an error<\/li>\n<\/ul>", "guessedname": "handleResponse", "guessedtype": "function"}, "parseXMLData": {"return": {"type": "Object", "description": "Parsed response object."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oRawResponse", "description": "  The raw response from the live database."}], "description": "Overridable method parses raw XML data into a response object.", "guessedname": "parseXMLData", "guessedtype": "function"}, "isCacheHit": {"return": {"type": "Boolean", "description": "True if given request matches cached request, false otherwise."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCachedRequest", "description": "  Cached request object."}], "description": "Default overridable method matches given request to given cached request.\nReturns true if is a hit, returns false otherwise.  Implementers should\noverride this method to customize the cache-matching algorithm.", "guessedname": "isCacheHit", "guessedtype": "function"}, "makeConnection": {"return": {"type": "Number", "description": "Transaction ID."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Function", "name": "oCallback", "description": "  Handler function to receive the response."}, {"type": "Object", "name": "oCaller", "description": "  The Calling object that is making the request."}], "description": "Overridable method provides default functionality to make a connection to\nlive data in order to send request. The response coming back is then\nforwarded to the handleResponse function. This method should be customized\nto achieve more complex implementations.", "guessedname": "makeConnection", "guessedtype": "function"}, "doBeforeParseData": {"return": {"type": "Object", "description": "Raw response for parsing."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oRawResponse", "description": "  The raw response from the live database."}], "description": "Overridable method gives implementers access to the original raw response\nbefore the data gets parsed. Implementers should take care not to return an\nunparsable or otherwise invalid raw response.", "guessedname": "doBeforeParseData", "guessedtype": "function"}, "DataSource.parseNumber": {"return": {"type": "Number", "description": "A number, or null if NaN."}, "description": "Converts data to type Number.", "static": "", "guessedname": "parseNumber", "guessedtype": "function", "params": [{"type": "String | Number | Boolean | Null", "name": "oData", "description": "  Data to convert. Beware, null\nreturns as 0."}]}, "_xhrSuccess": {"guessedname": "_xhrSuccess", "params": [{"type": "Object", "name": "oResponse", "description": "  HTTPXMLRequest object"}], "description": "Define Connection Manager success handler", "private": "", "guessedtype": "function"}, "clearAllIntervals": {"description": "Disables all known polling intervals.", "guessedname": "clearAllIntervals", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "DataSource.js", "guessedtype": "function", "shortname": "DataSource", "events": {"dataErrorEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Function", "name": "oArgs.callback", "description": "  The callback function."}, {"type": "Object", "name": "oArgs.caller", "description": "  The parent object of the callback function."}, {"type": "String", "name": "oArgs.message", "description": "  The error message."}], "description": "Fired when an error is encountered with the live data source."}, "responseEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The raw response object."}, {"type": "Function", "name": "oArgs.callback", "description": "  The callback function."}, {"type": "Object", "name": "oArgs.caller", "description": "  The parent object of the callback function."}], "description": "Fired when live data source sends response."}, "responseCacheEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The parsed response object."}, {"type": "Function", "name": "oArgs.callback", "description": "  The callback function."}, {"type": "Object", "name": "oArgs.caller", "description": "  The parent object of the callback function."}], "description": "Fired when response is cached."}, "cacheFlushEvent": {"description": "Fired when the local cache is flushed."}, "requestEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Function", "name": "oArgs.callback", "description": "  The callback function."}, {"type": "Object", "name": "oArgs.caller", "description": "  The parent object of the callback function."}], "description": "Fired when a request is sent to the live data source."}, "cacheRequestEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Function", "name": "oArgs.callback", "description": "  The callback function."}, {"type": "Object", "name": "oArgs.caller", "description": "  The parent object of the callback function."}], "description": "Fired when a request is made to the local cache."}, "getCachedResponseEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The response object."}, {"type": "Function", "name": "oArgs.callback", "description": "  The callback function."}, {"type": "Object", "name": "oArgs.caller", "description": "  The parent object of the callback function."}, {"type": "Number", "name": "oArgs.tId", "description": "  Transaction ID."}], "description": "Fired when data is retrieved from the local cache."}, "responseParseEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The parsed response object."}, {"type": "Function", "name": "oArgs.callback", "description": "  The callback function."}, {"type": "Object", "name": "oArgs.caller", "description": "  The parent object of the callback function."}], "description": "Fired when response is parsed."}}, "description": "The DataSource class defines and manages a live set of data for widgets to\ninteract with. Examples of live databases include in-memory\nlocal data such as a JavaScript array, a JavaScript function, or JSON, or\nremote data such as data retrieved through an XHR connection."}, "YAHOO.tool.TestRunner": {"name": "YAHOO.tool.TestRunner", "namespace": "YAHOO.tool", "module": "yuitest", "guessedname": "TestRunner", "static": "", "file": "TestRunner.js", "guessedtype": "function", "shortname": "TestRunner", "description": "Runs test suites and test cases, providing events to allowing for the\ninterpretation of test results."}, "YAHOO.widget.Series": {"name": "YAHOO.widget.Series", "constructors": [{"description": "Series class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "Series", "file": "Series.js", "guessedtype": "function", "shortname": "Series", "description": "Series class for the YUI Charts widget."}, "YAHOO.util.DDTarget": {"name": "YAHOO.util.DDTarget", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the element that is a drop target"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop objects"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DDTarget in addition to those in \nDragDrop: \nnone"}], "description": "A DragDrop implementation that does not move, but can be a drop \ntarget.  You would get the same result by simply omitting implementation \nfor the event callbacks, but this way we reduce the processing cost of the \nevent listener and the callbacks."}], "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DDTarget", "extends": "YAHOO.util.DragDrop", "superclass": "YAHOO.util.DragDrop", "file": "DDTarget.js", "guessedtype": "function", "shortname": "DDTarget", "description": "A DragDrop implementation that does not move, but can be a drop \ntarget.  You would get the same result by simply omitting implementation \nfor the event callbacks, but this way we reduce the processing cost of the \nevent listener and the callbacks."}, "YAHOO.widget.ButtonGroup": {"name": "YAHOO.widget.ButtonGroup", "configs": {"disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the button group should be \ndisabled.  Disabling the button group will disable each button \nin the button group.  Disabled buttons are dimmed and will not \nrespond to user input or fire events."}, "checkedButton": {"default": "null", "type": "{<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button<\/a>}", "description": "Reference for the button in the button group that \nis checked."}, "container": {"default": "null", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>|String", "description": "HTML element reference or string specifying the id \nattribute of the HTML element that the button group's markup\nshould be rendered into."}, "name": {"default": "null", "type": "String", "description": "String specifying the name for the button group.  \nThis name will be applied to each button in the button group."}, "value": {"default": "null", "type": "Object", "description": "Object specifying the value for the button group."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the button group."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;<\/code> element of the button group."}, {"type": "Object", "name": "p_oElement", "description": " Object literal specifying a set of \nconfiguration attributes used to create the button group."}, {"type": "Object", "name": "p_oAttributes", "description": " Optional. Object literal specifying a set \nof configuration attributes used to create the button group."}], "description": "The ButtonGroup class creates a set of buttons that are mutually \nexclusive; checking one button in the set will uncheck all others in the \nbutton group."}], "namespace": "YAHOO.widget", "module": "button", "events": {"beforeContainerChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeContainerChangeEvent", "description": "Fires before the value for the configuration attribute 'container' changes. Return false to cancel the attribute change."}, "beforeDisabledChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDisabledChangeEvent", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "beforeCheckedbuttonChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeCheckedbuttonChangeEvent", "description": "Fires before the value for the configuration attribute 'checkedButton' changes. Return false to cancel the attribute change."}, "checkedButtonChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "checkedButtonChangeEvent", "description": "Fires when the value for the configuration attribute 'checkedButton' changes."}, "containerChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "containerChangeEvent", "description": "Fires when the value for the configuration attribute 'container' changes."}, "beforeNameChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeNameChangeEvent", "description": "Fires before the value for the configuration attribute 'name' changes. Return false to cancel the attribute change."}, "nameChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "nameChangeEvent", "description": "Fires when the value for the configuration attribute 'name' changes."}, "valueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChangeEvent", "description": "Fires when the value for the configuration attribute 'value' changes."}, "disabledChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChangeEvent", "description": "Fires when the value for the configuration attribute 'disabled' changes."}, "beforeValueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeValueChangeEvent", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}}, "guessedname": "ButtonGroup", "methods": {"getButton": {"return": {"type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button<\/a>", "description": ""}, "params": [{"type": "Number", "name": "p_nIndex", "description": " The index of the button to retrieve from the \nbutton group."}], "description": "Returns the button at the specified index.", "guessedname": "getButton", "guessedtype": "function"}, "_setDisabled": {"protected": "", "params": [{"type": "Boolean", "name": "p_bDisabled", "description": " Boolean indicating the value for\nthe button group's \"disabled\" attribute."}], "description": "Sets the value of the button groups's \n\"disabled\" attribute.", "guessedname": "_setDisabled", "guessedtype": "function"}, "getButtons": {"return": {"type": "Array", "description": ""}, "description": "Returns an array of the buttons in the button group.", "guessedname": "getButtons", "guessedtype": "function"}, "destroy": {"description": "Removes the button group's element from its parent \nelement and removes all event handlers.", "guessedname": "destroy", "guessedtype": "function"}, "addButtons": {"return": {"type": "Array", "description": ""}, "params": [{"type": "Array", "name": "p_aButtons", "description": " Array of <a href=\"YAHOO.widget.Button.html\">\nYAHOO.widget.Button<\/a> instances to be added \nto the button group."}, {"type": "Array", "name": "p_aButtons", "description": " Array of strings specifying the id \nattribute of the <code>&#60;input&#62;<\/code> or <code>&#60;span&#62;\n<\/code> elements to be used to create the buttons to be added to the \nbutton group."}, {"type": "Array", "name": "p_aButtons", "description": " Array of object references for the \n<code>&#60;input&#62;<\/code> or <code>&#60;span&#62;<\/code> elements \nto be used to create the buttons to be added to the button group."}, {"type": "Array", "name": "p_aButtons", "description": " Array of object literals, each containing\na set of <a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button<\/a>  \nconfiguration attributes used to configure each button to be added \nto the button group."}], "description": "Adds the array of buttons to the button group.", "guessedname": "addButtons", "guessedtype": "function"}, "focus": {"params": [{"type": "Number", "name": "p_nIndex", "description": " Number indicating the index of the button \nto focus."}], "description": "Sets focus to the button at the specified index.", "guessedname": "focus", "guessedtype": "function"}, "addButton": {"return": {"type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button<\/a>", "description": ""}, "params": [{"type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button<\/a>", "name": "p_oButton", "description": " Object reference for the <a href=\"YAHOO.widget.Button.html\">\nYAHOO.widget.Button<\/a> instance to be added to the button group."}, {"type": "String", "name": "p_oButton", "description": " String specifying the id attribute of the \n<code>&#60;input&#62;<\/code> or <code>&#60;span&#62;<\/code> element \nto be used to create the button to be added to the button group."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-6043025\">HTMLInputElement<\/a>|<a href=\"\nhttp:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html#\nID-33759296\">HTMLElement<\/a>", "name": "p_oButton", "description": " Object reference for the \n<code>&#60;input&#62;<\/code> or <code>&#60;span&#62;<\/code> element \nto be used to create the button to be added to the button group."}, {"type": "Object", "name": "p_oButton", "description": " Object literal specifying a set of \n<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button<\/a> \nconfiguration attributes used to configure the button to be added to \nthe button group."}], "description": "Adds the button to the button group.", "guessedname": "addButton", "guessedtype": "function"}, "removeButton": {"params": [{"type": "Number", "name": "p_nIndex", "description": " Number specifying the index of the button \nto be removed from the button group."}], "description": "Removes the button at the specified index from the \nbutton group.", "guessedname": "removeButton", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the button group."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;<\/code> element of the button group."}, {"type": "Object", "name": "p_oElement", "description": " Object literal specifying a set of  \nconfiguration attributes used to create the button group."}, {"type": "Object", "name": "p_oAttributes", "description": " Optional. Object literal specifying a\nset of configuration attributes used to create the button group."}], "description": "The ButtonGroup class's initialization method.", "guessedname": "init", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "p_oAttributes", "description": " Object literal specifying a set of \nconfiguration attributes used to create the button group."}], "description": "Initializes all of the configuration attributes used to  \ncreate the button group.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the button group.", "guessedname": "toString", "guessedtype": "function"}, "getCount": {"return": {"type": "Number", "description": ""}, "description": "Returns the number of buttons in the button group.", "guessedname": "getCount", "guessedtype": "function"}, "_onAppendTo": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the event that was fired."}], "description": "\"appendTo\" event handler for the button group.", "guessedname": "_onAppendTo", "guessedtype": "function"}, "_onButtonCheckedChange": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the event that was fired."}, {"type": "<a href=\"YAHOO.widget.Button.html\">YAHOO.widget.Button<\/a>", "name": "p_oButton", "description": " Object representing the button that fired the event."}], "description": "\"checkedChange\" event handler for each button in the \nbutton group.", "guessedname": "_onButtonCheckedChange", "guessedtype": "function"}, "_onKeyDown": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"keydown\" event handler for the button group.", "guessedname": "_onKeyDown", "guessedtype": "function"}, "check": {"params": [{"type": "Number", "name": "p_nIndex", "description": " Number indicating the index of the button \nto check."}], "description": "Checks the button at the specified index.", "guessedname": "check", "guessedtype": "function"}, "_createGroupElement": {"protected": "", "return": {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-22445964\">HTMLDivElement<\/a>", "description": ""}, "description": "Creates the button group's element.", "guessedname": "_createGroupElement", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "buttongroup.js", "guessedtype": "function", "shortname": "ButtonGroup", "properties": {"_buttons": {"description": "Array of buttons in the button group.", "default": "null", "protected": "", "guessedname": "_buttons", "guessedtype": "property", "type": "Array"}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied  \nto the button group's element.", "default": "\"yui-buttongroup\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "NODE_NAME": {"description": "The name of the tag to be used for the button \ngroup's element.", "default": "\"DIV\"", "guessedname": "NODE_NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "The ButtonGroup class creates a set of buttons that are mutually \nexclusive; checking one button in the set will uncheck all others in the \nbutton group."}, "YAHOO.widget.LogReader": {"name": "YAHOO.widget.LogReader", "constructors": [{"params": [{"type": "HTMLElement", "name": "elContainer", "description": "  (optional) DOM element reference of an existing DIV."}, {"type": "String", "name": "elContainer", "description": "  (optional) String ID of an existing DIV."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of configuration params."}], "description": "The LogReader class provides UI to read messages logged to YAHOO.widget.Logger."}], "namespace": "YAHOO.widget", "module": "logger", "guessedname": "LogReader", "methods": {"getLastTime": {"return": {"type": "Date", "description": "Timestamp of the last log."}, "description": "Gets timestamp of the last log.", "guessedname": "getLastTime", "guessedtype": "function"}, "_onReset": {"guessedname": "_onReset", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's resetEvent.", "private": "", "guessedtype": "function"}, "show": {"description": "Shows UI of LogReader. Logging functionality is not disrupted.", "guessedname": "show", "guessedtype": "function"}, "setTitle": {"params": [{"type": "String", "name": "sTitle", "description": "  New title."}], "description": "Updates title to given string.", "guessedname": "setTitle", "guessedtype": "function"}, "getCategories": {"return": {"type": "String[]", "description": "Array of enabled categories."}, "description": "Returns array of enabled categories.", "guessedname": "getCategories", "guessedtype": "function"}, "_createSourceCheckbox": {"guessedname": "_createSourceCheckbox", "params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "description": "Creates a checkbox in the LogReader footer element to filter by source.", "private": "", "guessedtype": "function"}, "_onClickClearBtn": {"guessedname": "_onClickClearBtn", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles click events on the clear button.", "private": "", "guessedtype": "function"}, "_initCategories": {"private": "", "description": "Initializes category filters.", "guessedname": "_initCategories", "guessedtype": "function"}, "pause": {"description": "Pauses output of log messages. While paused, log messages are not lost, but\r\nget saved to a buffer and then output upon resume of LogReader.", "guessedname": "pause", "guessedtype": "function"}, "hide": {"description": "Hides UI of LogReader. Logging functionality is not disrupted.", "guessedname": "hide", "guessedtype": "function"}, "_printToConsole": {"guessedname": "_printToConsole", "params": [{"type": "Object[]", "name": "aEntries", "description": "  Array of LogMsg objects to output to console."}], "description": "Cycles through an array of log messages, and outputs each one to the console\r\nif its category has not been filtered out.", "private": "", "guessedtype": "function"}, "_initHeaderEl": {"private": "", "description": "Initializes the header element.", "guessedname": "_initHeaderEl", "guessedtype": "function"}, "_initDragDrop": {"private": "", "description": "Initializes Drag and Drop on the header element.", "guessedname": "_initDragDrop", "guessedtype": "function"}, "_printBuffer": {"private": "", "description": "Sends buffer of log messages to output and clears buffer.", "guessedname": "_printBuffer", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the LogReader instance."}, "description": "Public accessor to the unique name of the LogReader instance.", "guessedname": "toString", "guessedtype": "function"}, "showSource": {"params": [{"type": "String", "name": "Source", "description": " name."}], "description": "Shows log messages associated with given source.", "guessedname": "showSource", "guessedtype": "function"}, "getCheckbox": {"return": {"type": "Array", "description": "Array of all filter checkboxes."}, "params": [{"type": "String", "name": "Category", "description": " or source name."}], "description": "Returns related checkbox element for given filter (i.e., category or source).", "guessedname": "getCheckbox", "guessedtype": "function"}, "showCategory": {"params": [{"type": "String", "name": "Category", "description": " name."}], "description": "Shows log messages associated with given category.", "guessedname": "showCategory", "guessedtype": "function"}, "_onClickCollapseBtn": {"guessedname": "_onClickCollapseBtn", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance"}], "description": "Handles click events on the collapse button.", "private": "", "guessedtype": "function"}, "_onCategoryCreate": {"guessedname": "_onCategoryCreate", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's categoryCreateEvent.", "private": "", "guessedtype": "function"}, "collapse": {"description": "Collapses UI of LogReader. Logging functionality is not disrupted.", "guessedname": "collapse", "guessedtype": "function"}, "resume": {"description": "Resumes output of log messages, including outputting any log messages that\r\nhave been saved to buffer while paused.", "guessedname": "resume", "guessedtype": "function"}, "_onSourceCreate": {"guessedname": "_onSourceCreate", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's sourceCreateEvent.", "private": "", "guessedtype": "function"}, "_onClickPauseBtn": {"guessedname": "_onClickPauseBtn", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles click events on the pause button.", "private": "", "guessedtype": "function"}, "_initFooterEl": {"private": "", "description": "Initializes the footer element.", "guessedname": "_initFooterEl", "guessedtype": "function"}, "_onNewLog": {"guessedname": "_onNewLog", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's newLogEvent.", "private": "", "guessedtype": "function"}, "html2Text": {"guessedname": "html2Text", "params": [{"type": "String", "name": "sHtml", "description": "  String to convert."}], "description": "Converts input chars \"<\", \">\", and \"&\" to HTML entities.", "private": "", "guessedtype": "function"}, "_filterLogs": {"private": "", "description": "Reprints all log messages in the stack through filters.", "guessedname": "_filterLogs", "guessedtype": "function"}, "_onCheckCategory": {"guessedname": "_onCheckCategory", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles check events on the category filter checkboxes.", "private": "", "guessedtype": "function"}, "_onCheckSource": {"guessedname": "_onCheckSource", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles check events on the category filter checkboxes.", "private": "", "guessedtype": "function"}, "expand": {"description": "Expands UI of LogReader. Logging functionality is not disrupted.", "guessedname": "expand", "guessedtype": "function"}, "getSources": {"return": {"type": "Array", "description": "Array of enabled sources."}, "description": "Returns array of enabled sources.", "guessedname": "getSources", "guessedtype": "function"}, "_initSources": {"private": "", "description": "Initializes source filters.", "guessedname": "_initSources", "guessedtype": "function"}, "hideCategory": {"params": [{"type": "String", "name": "Category", "description": " name."}], "description": "Hides log messages associated with given category.", "guessedname": "hideCategory", "guessedtype": "function"}, "formatMsg": {"return": {"type": "String", "description": "HTML-formatted message for output to console."}, "params": [{"type": "Object", "name": "oLogMsg", "description": "  Log message object."}], "description": "Formats message string to HTML for output to console.", "guessedname": "formatMsg", "guessedtype": "function"}, "_createCategoryCheckbox": {"guessedname": "_createCategoryCheckbox", "params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Creates the UI for a category filter in the LogReader footer element.", "private": "", "guessedtype": "function"}, "_initConsoleEl": {"private": "", "description": "Initializes the console element.", "guessedname": "_initConsoleEl", "guessedtype": "function"}, "_initContainerEl": {"guessedname": "_initContainerEl", "params": [{"type": "HTMLElement", "name": "elContainer", "description": "  Container element by reference or string ID."}], "description": "Initializes the primary container element.", "private": "", "guessedtype": "function"}, "clearConsole": {"description": "Does not delete any log messages, but clears all printed log messages from\r\nthe console. Log messages will be printed out again if user re-filters. The\r\nstatic method YAHOO.widget.Logger.reset() should be called in order to\r\nactually delete log messages.", "guessedname": "clearConsole", "guessedtype": "function"}, "hideSource": {"params": [{"type": "String", "name": "Source", "description": " name."}], "description": "Hides log messages associated with given source.", "guessedname": "hideSource", "guessedtype": "function"}}, "file": "LogReader.js", "guessedtype": "function", "shortname": "LogReader", "properties": {"right": {"type": "String", "description": "Public member to access CSS right position of the LogReader container.", "guessedname": "right", "guessedtype": "property"}, "height": {"type": "String", "description": "Public member to access CSS height of the LogReader container.", "guessedname": "height", "guessedtype": "property"}, "newestOnTop": {"type": "Boolean", "description": "Whether or not newest message is printed on top.", "guessedname": "newestOnTop", "guessedtype": "property"}, "_elCategoryFilters": {"guessedname": "_elCategoryFilters", "type": "HTMLElement", "description": "Container element for LogReader category filter checkboxes.", "private": "", "guessedtype": "property"}, "_memberName": {"description": "Internal class member to index multiple LogReader instances.", "default": "0", "private": "", "static": "", "guessedname": "_index", "guessedtype": "property", "type": "Number"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of LogReader instance.", "private": "", "guessedtype": "property"}, "isCollapsed": {"default": "false", "type": "Boolean", "description": "True when LogReader is in a collapsed state, false otherwise.", "guessedname": "isCollapsed", "guessedtype": "property"}, "_btnCollapse": {"guessedname": "_btnCollapse", "type": "HTMLElement", "description": "LogReader collapse button element.", "private": "", "guessedtype": "property"}, "logReaderEnabled": {"default": "true", "type": "Boolean", "description": "Whether or not LogReader is enabled to output log messages.", "guessedname": "logReaderEnabled", "guessedtype": "property"}, "_filterCheckboxes": {"guessedname": "_filterCheckboxes", "type": "Object", "description": "Hash of filters and their related checkbox elements.", "private": "", "guessedtype": "property"}, "thresholdMax": {"default": "500", "type": "Number", "description": "Maximum number of messages a LogReader console will display.", "guessedname": "thresholdMax", "guessedtype": "property"}, "_buffer": {"guessedname": "_buffer", "type": "Object[]", "description": "Buffer of log message objects for batch output.", "private": "", "guessedtype": "property"}, "bottom": {"type": "String", "description": "Public member to access CSS bottom position of the LogReader container.", "guessedname": "bottom", "guessedtype": "property"}, "_elBtns": {"guessedname": "_elBtns", "type": "HTMLElement", "description": "LogReader buttons container element.", "private": "", "guessedtype": "property"}, "_lastTime": {"guessedname": "_lastTime", "type": "Date", "description": "Date of last output log message.", "private": "", "guessedtype": "property"}, "top": {"type": "String", "description": "Public member to access CSS top position of the LogReader container.", "guessedname": "top", "guessedtype": "property"}, "_btnPause": {"guessedname": "_btnPause", "type": "HTMLElement", "description": "LogReader pause button element.", "private": "", "guessedtype": "property"}, "_elContainer": {"guessedname": "_elContainer", "type": "HTMLElement", "description": "LogReader container element.", "private": "", "guessedtype": "property"}, "width": {"type": "String", "description": "Public member to access CSS width of the LogReader container.", "guessedname": "width", "guessedtype": "property"}, "fontSize": {"type": "String", "description": "Public member to access CSS font size of the LogReader container.", "guessedname": "fontSize", "guessedtype": "property"}, "footerEnabled": {"default": "true", "type": "Boolean", "description": "Whether or not the footer UI is enabled for the LogReader.", "guessedname": "footerEnabled", "guessedtype": "property"}, "verboseOutput": {"default": "true", "type": "Boolean", "description": "Whether or not output is verbose (more readable). Setting to true will make\r\noutput more compact (less readable).", "guessedname": "verboseOutput", "guessedtype": "property"}, "_sourceFilters": {"guessedname": "_sourceFilters", "type": "String[]", "description": "Array of filters for log message sources.", "private": "", "guessedtype": "property"}, "_elHd": {"guessedname": "_elHd", "type": "HTMLElement", "description": "LogReader header element.", "private": "", "guessedtype": "property"}, "_categoryFilters": {"guessedname": "_categoryFilters", "type": "String[]", "description": "Array of filters for log message categories.", "private": "", "guessedtype": "property"}, "_consoleMsgCount": {"description": "Number of log messages output to console.", "default": "0", "private": "", "guessedname": "_consoleMsgCount", "guessedtype": "property", "type": "Number"}, "_elSourceFilters": {"guessedname": "_elSourceFilters", "type": "HTMLElement", "description": "Container element for LogReader source filter checkboxes.", "private": "", "guessedtype": "property"}, "thresholdMin": {"default": "100", "type": "Number", "description": "When a LogReader console reaches its thresholdMax, it will clear out messages\r\nand print out the latest thresholdMin number of messages.", "guessedname": "thresholdMin", "guessedtype": "property"}, "_title": {"guessedname": "_title", "type": "HTMLElement", "description": "LogReader title header element.", "private": "", "guessedtype": "property"}, "_elDefaultContainer": {"type": "HTMLElement", "description": "A class member shared by all LogReaders if a container needs to be\r\ncreated during instantiation. Will be null if a container element never needs to\r\nbe created on the fly, such as when the implementer passes in their own element.", "private": ""}, "_elFt": {"guessedname": "_elFt", "type": "HTMLElement", "description": "LogReader footer element.", "private": "", "guessedtype": "property"}, "outputBuffer": {"default": "100", "type": "Number", "description": "Output timeout buffer in milliseconds.", "guessedname": "outputBuffer", "guessedtype": "property"}, "_elConsole": {"guessedname": "_elConsole", "type": "HTMLElement", "description": "LogReader console element.", "private": "", "guessedtype": "property"}, "draggable": {"default": "true", "type": "Boolean", "description": "Enables draggable LogReader if DragDrop Utility is present.", "guessedname": "draggable", "guessedtype": "property"}, "isPaused": {"default": "false", "type": "Boolean", "description": "True when LogReader is in a paused state, false otherwise.", "guessedname": "isPaused", "guessedtype": "property"}, "_btnClear": {"guessedname": "_btnClear", "type": "HTMLElement", "description": "Clear button element.", "private": "", "guessedtype": "property"}, "_timeout": {"guessedname": "_timeout", "type": "Number", "description": "Batched output timeout ID.", "private": "", "guessedtype": "property"}, "_elCollapse": {"guessedname": "_elCollapse", "type": "HTMLElement", "description": "LogReader collapse element.", "private": "", "guessedtype": "property"}, "left": {"type": "String", "description": "Public member to access CSS left position of the LogReader container.", "guessedname": "left", "guessedtype": "property"}}, "description": "The LogReader class provides UI to read messages logged to YAHOO.widget.Logger."}, "YAHOO.util.ImageLoader.pngBgImgObj": {"name": "YAHOO.util.ImageLoader.pngBgImgObj", "constructors": [{"params": [{"type": "String", "name": "domId", "description": "\tHTML DOM id of the image element"}, {"type": "String", "name": "url", "description": "\tURL for the image"}], "description": "PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by \"background-image\" in the element's style"}], "namespace": "YAHOO.util", "module": "imageloader", "guessedname": "pngBgImgObj", "methods": {"_applyUrl": {"guessedname": "_applyUrl", "params": [{"type": "Object", "name": "el", "description": "\tHTML DOM element"}], "description": "Inserts the image URL into the DOM so that the image is displayed.\nIf the browser is determined to be IE6 (or older), sets the AlphaImageLoader src; otherwise sets style.backgroundImage", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.ImageLoader.imgObj", "superclass": "YAHOO.util.ImageLoader.imgObj", "file": "ImageLoader.js", "guessedtype": "function", "shortname": "ImageLoader.pngBgImgObj", "description": "PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by \"background-image\" in the element's style"}, "YAHOO.widget.MenuManager": {"name": "YAHOO.widget.MenuManager", "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuManager", "methods": {"getFocusedMenu": {"return": {"type": "YAHOO.widget.Menu", "description": ""}, "description": "Returns a reference to the menu that currently \nhas focus.", "guessedname": "getFocusedMenu", "guessedtype": "function"}, "onDOMEvent": {"params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "Generic, global event handler for all of a menu's \nDOM-based events.  This listens for events against the document \nobject.  If the target of a given event is a member of a menu or \nmenu item's DOM, the instance's corresponding Custom Event is fired.", "private": ""}, "getMenu": {"return": {"type": "YAHOO.widget.Menu", "description": ""}, "params": [{"type": "String", "name": "p_sId", "description": " String specifying the id of the \n<code>&#60;div&#62;<\/code> element representing the menu to\nbe retrieved."}], "description": "Returns a menu with the specified id.", "guessedname": "getMenu", "guessedtype": "function"}, "onMenuVisibleConfigChange": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "Event handler for when the \"visible\" configuration  \nproperty of a Menu instance changes.", "private": ""}, "getMenuRootElement": {"params": [{"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying an HTML element."}], "description": "Finds the root DIV node of a menu or the root LI node of \na menu item.", "private": ""}, "addMenu": {"params": [{"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object specifying the Menu  \ninstance to be added."}], "description": "Adds a menu to the collection of known menus.", "guessedname": "addMenu", "guessedtype": "function"}, "onMenuDestroy": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " The menu that fired the event."}], "description": "\"destroy\" event handler for a menu.", "private": ""}, "onMenuBlur": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"blur\" event handler for a MenuItem instance.", "private": ""}, "getVisible": {"return": {"type": "Array", "description": ""}, "description": "Returns a collection of all visible menus registered\nwith the menu manger.", "guessedname": "getVisible", "guessedtype": "function"}, "getFocusedMenuItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Returns a reference to the menu item that currently \nhas focus.", "guessedname": "getFocusedMenuItem", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu manager.", "guessedname": "toString", "guessedtype": "function"}, "getMenuItemGroup": {"return": {"type": "Array", "description": ""}, "params": [{"type": "String", "name": "p_sId", "description": " String specifying the id of the \n<code>&#60;ul&#62;<\/code> element representing the group of \nmenu items to be retrieved."}], "description": "Returns an array of menu item instances whose \ncorresponding <code>&#60;li&#62;<\/code> elements are child \nnodes of the <code>&#60;ul&#62;<\/code> element with the \nspecified id.", "guessedname": "getMenuItemGroup", "guessedtype": "function"}, "getMenuItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "String", "name": "p_sId", "description": " String specifying the id of the \n<code>&#60;li&#62;<\/code> element representing the menu item to\nbe retrieved."}], "description": "Returns a menu item with the specified id.", "guessedname": "getMenuItem", "guessedtype": "function"}, "getMenus": {"return": {"type": "Array", "description": ""}, "description": "Returns a collection of all menus registered with the \nmenu manger.", "guessedname": "getMenus", "guessedtype": "function"}, "onItemDestroy": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"destroy\" event handler for a MenuItem instance.", "private": ""}, "onItemAdded": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"itemadded\" event handler for a Menu instance.", "private": ""}, "onMenuFocus": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"focus\" event handler for a MenuItem instance.", "private": ""}, "hideVisible": {"description": "Hides all visible, dynamically positioned menus \n(excluding instances of YAHOO.widget.MenuBar).", "guessedname": "hideVisible", "guessedtype": "function"}, "removeMenu": {"params": [{"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object specifying the Menu  \ninstance to be removed."}], "description": "Removes a menu from the collection of known menus.", "guessedname": "removeMenu", "guessedtype": "function"}}, "static": "", "file": "menumanager.js", "guessedtype": "function", "shortname": "MenuManager", "description": "Singleton that manages a collection of all menus and menu items.  Listens \nfor DOM events at the document level and dispatches the events to the \ncorresponding menu or menu item."}, "YAHOO.widget.Logger": {"name": "YAHOO.widget.Logger", "namespace": "YAHOO.widget", "module": "logger", "events": {"logResetEvent": {"description": "Fired when the Logger has been reset has been created.", "guessedname": "logResetEvent", "guessedtype": "property"}, "newLogEvent": {"params": [{"type": "String", "name": "sMsg", "description": "  Log message."}], "description": "Fired when a new log message has been created.", "guessedname": "newLogEvent", "guessedtype": "property"}, "sourceCreateEvent": {"params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "description": "Fired when a new source has been named.", "guessedname": "sourceCreateEvent", "guessedtype": "property"}, "categoryCreateEvent": {"params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Fired when a new category has been created.", "guessedname": "categoryCreateEvent", "guessedtype": "property"}}, "guessedname": "Logger", "methods": {"reset": {"description": "Resets internal stack and startTime, enables Logger, and fires logResetEvent.", "guessedname": "reset", "guessedtype": "function"}, "_isNewSource": {"return": {"type": "Boolean", "description": "Returns true if source is unknown, else returns false."}, "description": "Checks to see if a source already exists.", "private": "", "params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "guessedname": "_isNewSource", "guessedtype": "function"}, "getStack": {"return": {"type": "Object[]", "description": "Array of log message objects."}, "description": "Public accessor to internal stack of log message objects.", "guessedname": "getStack", "guessedtype": "function"}, "log": {"params": [{"type": "String", "name": "sMsg", "description": "  The log message."}, {"type": "String", "name": "sCategory", "description": "  Category of log message, or null."}, {"type": "String", "name": "sSource", "description": "  Source of LogWriter, or null if global."}], "description": "Saves a log message to the stack and fires newLogEvent. If the log message is\r\nassigned to an unknown category, creates a new category. If the log message is\r\nfrom an unknown source, creates a new source.  If browser console is enabled,\r\noutputs the log message to browser console.", "guessedname": "log", "guessedtype": "function"}, "_onWindowError": {"guessedname": "_onWindowError", "params": [{"type": "String", "name": "sMsg", "description": "  The error message."}, {"type": "String", "name": "sUrl", "description": "  URL of the error."}, {"type": "String", "name": "sLine", "description": "  Line number of the error."}], "description": "Handles logging of messages due to window error events.", "private": "", "guessedtype": "function"}, "_isNewCategory": {"return": {"type": "Boolean", "description": "Returns true if category is unknown, else returns false."}, "description": "Checks to see if a category has already been created.", "private": "", "params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "guessedname": "_isNewCategory", "guessedtype": "function"}, "handleWindowErrors": {"description": "Surpresses native JavaScript errors and outputs to console. By default,\r\nLogger does not handle JavaScript window error events.\r\nNB: Not all browsers support the window.onerror event.", "guessedname": "handleWindowErrors", "guessedtype": "function"}, "_printToBrowserConsole": {"guessedname": "_printToBrowserConsole", "params": [{"type": "Object", "name": "oEntry", "description": "  Log entry object."}], "description": "Outputs a log message to global console.log() function.", "private": "", "guessedtype": "function"}, "_createNewCategory": {"guessedname": "_createNewCategory", "params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Creates a new category of log messages and fires categoryCreateEvent.", "private": "", "guessedtype": "function"}, "_createNewSource": {"guessedname": "_createNewSource", "params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "description": "Creates a new source of log messages and fires sourceCreateEvent.", "private": "", "guessedtype": "function"}, "enableBrowserConsole": {"description": "Enables output to the browser's global console.log() function, which is used\r\nby the Firebug extension to Firefox as well as Safari.", "guessedname": "enableBrowserConsole", "guessedtype": "function"}, "disableBrowserConsole": {"description": "Disables output to the browser's global console.log() function, which is used\r\nby the Firebug extension to Firefox as well as Safari.", "guessedname": "disableBrowserConsole", "guessedtype": "function"}, "unhandleWindowErrors": {"description": "Unsurpresses native JavaScript errors. By default,\r\nLogger does not handle JavaScript window error events.\r\nNB: Not all browsers support the window.onerror event.", "guessedname": "unhandleWindowErrors", "guessedtype": "function"}, "getStartTime": {"return": {"type": "Date", "description": "Internal date of when Logger singleton was initialized."}, "description": "Public accessor to internal start time.", "guessedname": "getStartTime", "guessedtype": "function"}}, "static": "", "file": "Logger.js", "guessedtype": "property", "shortname": "Logger", "properties": {"maxStackEntries": {"default": "2500", "type": "Number", "static": "", "description": "Upper limit on size of internal stack."}, "_lastTime": {"type": "Date", "static": "", "description": "Timestamp of last logged message.", "private": ""}, "_startTime": {"type": "Date", "static": "", "description": "Static timestamp of Logger initialization.", "private": ""}, "_browserConsoleEnabled": {"default": "false", "type": "Boolean", "static": "", "description": "Internal property to track whether output to browser console is enabled.", "private": ""}, "loggerEnabled": {"default": "true", "type": "Boolean", "static": "", "description": "True if Logger is enabled, false otherwise."}, "sources": {"default": "[\"global\"]", "type": "String[]", "static": "", "description": "Array of sources."}, "_stack": {"type": "Array", "static": "", "description": "Array to hold all log messages.", "private": ""}, "categories": {"default": "[\"info\",\"warn\",\"error\",\"time\",\"window\"]", "type": "String[]", "static": "", "description": "Array of categories."}}, "description": "The singleton Logger class provides core log management functionality. Saves\r\nlogs written through the global YAHOO.log function or written by a LogWriter\r\ninstance. Provides access to logs for reading by a LogReader instance or\r\nnative browser console such as the Firebug extension to Firefox or Safari's\r\nJavaScript console through integration with the console.log() method."}, "YAHOO.widget.Overlay": {"name": "YAHOO.widget.Overlay", "configs": {"iframe": {"default": "true for IE6 and below, false for all other browsers.", "type": "Boolean", "description": "Boolean indicating whether or not the Overlay should \nhave an IFRAME shim; used to prevent SELECT elements from \npoking through an Overlay instance in IE6.  When set to \"true\", \nthe iframe shim is created when the Overlay instance is intially\nmade visible."}, "constraintoviewport": {"default": "false", "type": "Boolean", "description": "True if the Overlay should be prevented from being positioned \nout of the viewport."}, "height": {"default": "null", "type": "String", "description": "CSS height of the Overlay."}, "zIndex": {"default": "null", "type": "Number", "description": "CSS z-index of the Overlay."}, "width": {"default": "null", "type": "String", "description": "CSS width of the Overlay."}, "xy": {"default": "null", "type": "Number[]", "description": "An array with the absolute x and y positions of the Overlay"}, "context": {"default": "null", "type": "Array", "description": "The array of context arguments for context-sensitive positioning.  \nThe format is: [id or element, element corner, context corner]. \nFor example, setting this property to [\"img1\", \"tl\", \"bl\"] would \nalign the Overlay's top left corner to the context element's \nbottom left corner."}, "y": {"default": "null", "type": "Number", "description": "The absolute y-coordinate position of the Overlay"}, "x": {"default": "null", "type": "Number", "description": "The absolute x-coordinate position of the Overlay"}, "fixedcenter": {"default": "false", "type": "Boolean", "description": "True if the Overlay should be anchored to the center of \nthe viewport."}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the Overlay <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal containing \nthe configuration that should be set for this Overlay. See configuration \ndocumentation for more details."}], "description": "Overlay is a Module that is absolutely positioned above the page flow. It \nhas convenience methods for positioning and sizing, as well as options for \ncontrolling zIndex and constraining the Overlay's position to the current \nvisible viewport. Overlay also contains a dynamicly generated IFRAME which \nis placed beneath it for Internet Explorer 6 and 5.x so that it will be \nproperly rendered above SELECT elements."}], "namespace": "YAHOO.widget", "module": "container", "events": {"YAHOO.widget.Overlay.windowScrollEvent": {"description": "A singleton CustomEvent used for reacting to the DOM event for \nwindow scroll", "guessedname": "windowScrollEvent", "guessedtype": "property"}, "moveEvent": {"params": [{"type": "Number", "name": "x", "description": " x coordinate"}, {"type": "Number", "name": "y", "description": " y coordinate"}], "description": "CustomEvent fired after the Overlay is moved.", "guessedname": "moveEvent", "guessedtype": "property"}, "YAHOO.widget.Overlay.windowResizeEvent": {"description": "A singleton CustomEvent used for reacting to the DOM event for\nwindow resize", "guessedname": "windowResizeEvent", "guessedtype": "property"}, "beforeMoveEvent": {"params": [{"type": "Number", "name": "x", "description": " x coordinate"}, {"type": "Number", "name": "y", "description": " y coordinate"}], "description": "CustomEvent fired before the Overlay is moved.", "guessedname": "beforeMoveEvent", "guessedtype": "property"}}, "guessedname": "Overlay", "methods": {"moveTo": {"params": [{"type": "Number", "name": "x", "description": " The Overlay's new x position"}, {"type": "Number", "name": "y", "description": " The Overlay's new y position"}], "description": "Moves the Overlay to the specified position. This function is  \nidentical to calling this.cfg.setProperty(\"xy\", [x,y]);", "guessedname": "moveTo", "guessedtype": "function"}, "stackIframe": {"description": "Sets the zindex of the iframe shim, if it exists, based on the zindex of\nthe Overlay element. The zindex of the iframe is set to be one less \nthan the Overlay element's zindex.\n<p>NOTE: This method will not bump up the zindex of the Overlay element\nto ensure that the iframe shim has a non-negative zindex.\nIf you require the iframe zindex to be 0 or higher, the zindex of \nthe Overlay element should be set to a value greater than 0, before \nthis method is called.\n<\/p>", "guessedname": "stackIframe", "guessedtype": "function"}, "showIframe": {"description": "Shows the iframe shim, if it has been enabled.", "guessedname": "showIframe", "guessedtype": "function"}, "configFixedCenter": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"fixedcenter\" property \nis changed.", "guessedname": "configFixedCenter", "guessedtype": "function"}, "YAHOO.widget.Overlay.windowResizeHandler": {"static": "", "params": [{"type": "DOMEvent", "name": "e", "description": " The DOM resize event"}], "description": "The DOM event handler used to fire the CustomEvent for window resize", "guessedname": "windowResizeHandler", "guessedtype": "function"}, "showMacGeckoScrollbars": {"description": "Adds a CSS class (\"show-scrollbars\") and removes a CSS class \n(\"hide-scrollbars\") to the Overlay to fix a bug in Gecko on Mac OS X \n(https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=187435)", "guessedname": "showMacGeckoScrollbars", "guessedtype": "function"}, "hideMacGeckoScrollbars": {"description": "Adds a CSS class (\"hide-scrollbars\") and removes a CSS class \n(\"show-scrollbars\") to the Overlay to fix a bug in Gecko on Mac OS X \n(https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=187435)", "guessedname": "hideMacGeckoScrollbars", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Overlay which are fired  \nautomatically at appropriate times by the Overlay class.", "guessedname": "initEvents", "guessedtype": "function"}, "bringToTop": {"description": "Places the Overlay on top of all other instances of \nYAHOO.widget.Overlay.", "guessedname": "bringToTop", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the Overlay <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal \ncontaining the configuration that should be set for this Overlay. \nSee configuration documentation for more details."}], "description": "The Overlay initialization method, which is executed for Overlay and  \nall of its subclasses. This method is automatically called by the \nconstructor, and  sets up all DOM references for pre-existing markup, \nand creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "configXY": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"xy\" property is changed.", "guessedname": "configXY", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Overlay."}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "syncPosition": {"description": "Synchronizes the Panel's \"xy\", \"x\", and \"y\" properties with the \nPanel's position in the DOM. This is primarily used to update  \nposition information during drag & drop.", "guessedname": "syncPosition", "guessedtype": "function"}, "hideIframe": {"description": "Hides the iframe shim, if it has been enabled.", "guessedname": "hideIframe", "guessedtype": "function"}, "configHeight": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"height\" property is changed.", "guessedname": "configHeight", "guessedtype": "function"}, "getConstrainedXY": {"return": {"type": "Array", "description": "The constrained x and y coordinates at index 0 and 1 respectively;"}, "params": [{"type": "Number", "name": "x", "description": " The X coordinate value to be constrained"}, {"type": "Number", "name": "y", "description": " The Y coordinate value to be constrained"}], "description": "Given x, y coordinate values, returns the calculated coordinates required to \nposition the Overlay if it is to be constrained to the viewport, based on the \ncurrent element size, viewport dimensions and scroll values.", "guessedname": "getConstrainedXY", "guessedtype": "function"}, "configContext": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"context\" property \nis changed.", "guessedname": "configContext", "guessedtype": "function"}, "onDomResize": {"params": [{"type": "DOMEvent", "name": "e", "description": " The resize DOM event"}, {"type": "Object", "name": "obj", "description": " The scope object"}], "description": "Event handler fired when the resize monitor element is resized.", "guessedname": "onDomResize", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration\nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"visible\" property is \nchanged.  This method is responsible for firing showEvent\nand hideEvent.", "guessedname": "configVisible", "guessedtype": "function"}, "enforceConstraints": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler executed when the moveEvent is fired, if the \n\"constraintoviewport\" is set to true.", "guessedname": "enforceConstraints", "guessedtype": "function"}, "configWidth": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"width\" property is changed.", "guessedname": "configWidth", "guessedtype": "function"}, "destroy": {"description": "Removes the Overlay element from the DOM and sets all child \nelements to null.", "guessedname": "destroy", "guessedtype": "function"}, "configConstrainToViewport": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for \nthe property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"constraintoviewport\" \nproperty is changed.", "guessedname": "configConstrainToViewport", "guessedtype": "function"}, "YAHOO.widget.Overlay.windowScrollHandler": {"static": "", "params": [{"type": "DOMEvent", "name": "e", "description": " The DOM scroll event"}], "description": "The DOM event handler used to fire the CustomEvent for window scroll", "guessedname": "windowScrollHandler", "guessedtype": "function"}, "center": {"description": "Centers the container in the viewport.", "guessedname": "center", "guessedtype": "function"}, "align": {"params": [{"type": "String", "name": "elementAlign", "description": "  The String representing the corner of \nthe Overlay that should be aligned to the context element"}, {"type": "String", "name": "contextAlign", "description": "  The corner of the context element \nthat the elementAlign corner should stick to."}], "description": "Aligns the Overlay to its context element using the specified corner \npoints (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, \nand BOTTOM_RIGHT.", "guessedname": "align", "guessedtype": "function"}, "syncIframe": {"description": "Syncronizes the size and position of iframe shim to that of its \ncorresponding Overlay instance.", "guessedname": "syncIframe", "guessedtype": "function"}, "configIframe": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"iframe\" property is changed.", "guessedname": "configIframe", "guessedtype": "function"}, "configY": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"y\" property is changed.", "guessedname": "configY", "guessedtype": "function"}, "configX": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"x\" property is changed.", "guessedname": "configX", "guessedtype": "function"}, "configzIndex": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"zIndex\" property is changed.", "guessedname": "configzIndex", "guessedtype": "function"}, "doCenterOnDOMEvent": {"description": "Center event handler used for centering on scroll\/resize, but only if \nthe Overlay is visible", "guessedname": "doCenterOnDOMEvent", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed \nusing the Overlay's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Module", "superclass": "YAHOO.widget.Module", "file": "Overlay.js", "guessedtype": "function", "shortname": "Overlay", "properties": {"DEFAULT_CONFIG": {"description": "Constant representing the Overlay's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}, "YAHOO.widget.Overlay._initialized": {"guessedname": "_initialized", "type": "Boolean", "description": "A boolean that indicated whether the window resize and scroll events have \nalready been subscribed to.", "private": "", "guessedtype": "property"}, "YAHOO.widget.Overlay.CSS_OVERLAY": {"description": "Constant representing the default CSS class used for an Overlay", "static": "", "guessedname": "CSS_OVERLAY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.BOTTOM_RIGHT": {"description": "Constant representing the bottom right corner of an element, used for \nconfiguring the context element alignment", "static": "", "guessedname": "BOTTOM_RIGHT", "guessedtype": "property", "type": "String", "final": ""}, "EVENT_TYPES": {"description": "Constant representing the name of the Overlay's events", "private": "", "guessedname": "EVENT_TYPES", "guessedtype": "property", "type": "Object", "final": ""}, "YAHOO.widget.Overlay.VIEWPORT_OFFSET": {"description": "Number representing the minimum distance an Overlay instance should be \npositioned relative to the boundaries of the browser's viewport, in pixels.", "default": "10", "static": "", "guessedname": "VIEWPORT_OFFSET", "guessedtype": "property", "type": "Number", "final": ""}, "YAHOO.widget.Overlay.TOP_RIGHT": {"description": "Constant representing the top right corner of an element, used for \nconfiguring the context element alignment", "static": "", "guessedname": "TOP_RIGHT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.TOP_LEFT": {"description": "Constant representing the top left corner of an element, used for \nconfiguring the context element alignment", "static": "", "guessedname": "TOP_LEFT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.IFRAME_SRC": {"description": "The URL that will be placed in the iframe", "default": "3", "static": "", "guessedname": "IFRAME_SRC", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.BOTTOM_LEFT": {"description": "Constant representing the top bottom left corner of an element, used for \nconfiguring the context element alignment", "static": "", "guessedname": "BOTTOM_LEFT", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Overlay is a Module that is absolutely positioned above the page flow. It \nhas convenience methods for positioning and sizing, as well as options for \ncontrolling zIndex and constraining the Overlay's position to the current \nvisible viewport. Overlay also contains a dynamicly generated IFRAME which \nis placed beneath it for Internet Explorer 6 and 5.x so that it will be \nproperly rendered above SELECT elements."}, "YAHOO.widget.EditorWindow": {"file": "editor.js", "description": "Class to hold Window information between uses. We use the same panel to show the windows, so using this will allow you to configure a window before it is shown.\nThis is what you pass to Editor.openWindow();. These parameters will not take effect until the openWindow() is called in the editor.", "namespace": "YAHOO.widget", "module": "editor", "events": {"windowCMDOpen": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow<\/a>", "name": "win", "description": " The EditorWindow object"}, {"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}], "description": "Dynamic event fired when an <a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow<\/a> is opened.. The dynamic event is based on the name of the window. Example Window: createlink, opening this window would fire the windowcreatelinkOpen event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "closeWindow": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow<\/a>", "name": "win", "description": " The EditorWindow object"}], "description": "Event fires after an Editor Window is closed. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "beforeOpenWindow": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow<\/a>", "name": "win", "description": " The EditorWindow object"}, {"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}], "description": "Event fires before an Editor Window is opened. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "windowCMDClose": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow<\/a>", "name": "win", "description": " The EditorWindow object"}, {"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}], "description": "Dynamic event fired when an <a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow<\/a> is closed.. The dynamic event is based on the name of the window. Example Window: createlink, opening this window would fire the windowcreatelinkClose event. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}, "afterOpenWindow": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "<a href=\"YAHOO.widget.EditorWindow.html\">EditorWindow<\/a>", "name": "win", "description": " The EditorWindow object"}, {"type": "Overlay", "name": "panel", "description": " The Overlay object that is used to create the window."}], "description": "Event fires after an Editor Window is opened. See <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for more information on listening for this event."}}, "methods": {"setFooter": {"params": [{"type": "String\/HTMLElement", "name": "str", "description": " The string or DOM reference to be used as the windows footer."}], "description": "Sets the footer for the window.", "guessedname": "setFooter", "guessedtype": "function"}, "setBody": {"params": [{"type": "String\/HTMLElement", "name": "str", "description": " The string or DOM reference to be used as the windows body."}], "description": "Sets the body for the window.", "guessedname": "setBody", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the EditorWindow.", "guessedname": "toString", "guessedtype": "function"}, "setHeader": {"params": [{"type": "String\/HTMLElement", "name": "str", "description": " The string or DOM reference to be used as the windows header."}], "description": "Sets the header for the window.", "guessedname": "setHeader", "guessedtype": "function"}}, "param": "{String} name The name of the window.", "guessedname": "EditorWindow", "guessedtype": "function", "shortname": "EditorWindow", "properties": {"body": {"private": "", "description": "Holder for the body of the window, used in Editor.openWindow", "guessedname": "body", "guessedtype": "property"}, "name": {"private": "", "description": "A unique name for the window", "guessedname": "name", "guessedtype": "property"}, "footer": {"private": "", "description": "Holder for the footer of the window, used in Editor.openWindow", "guessedname": "footer", "guessedtype": "property"}, "header": {"private": "", "description": "Holder for the header of the window, used in Editor.openWindow", "guessedname": "header", "guessedtype": "property"}, "attrs": {"private": "", "description": "The window attributes", "guessedname": "attrs", "guessedtype": "property"}, "_cache": {"private": "", "description": "Holds a cache of the DOM for the window so we only have to build it once..", "guessedname": "_cache", "guessedtype": "property"}}, "name": "YAHOO.widget.EditorWindow"}, "YAHOO.util.AnimMgr": {"name": "YAHOO.util.AnimMgr", "namespace": "YAHOO.util", "module": "animation", "guessedname": "AnimMgr", "methods": {"run": {"description": "Called per Interval to handle each animation frame.", "guessedname": "run", "guessedtype": "function"}, "unRegister": {"guessedname": "unRegister", "params": [{"type": "object", "name": "tween", "description": " The Anim instance to be be registered"}, {"type": "Int", "name": "index", "description": " The index of the Anim instance"}], "description": "removes an animation instance from the animation queue.\nAll animation instances must be registered in order to animate.", "private": "", "guessedtype": "function"}, "stop": {"params": [{"type": "object", "name": "tween", "description": " A specific Anim instance to stop (optional)\nIf no instance given, Manager stops thread and all animations."}], "description": "Stops the animation thread or a specific animation instance.", "guessedname": "stop", "guessedtype": "function"}, "start": {"description": "Starts the animation thread.\nOnly one thread can run at a time.", "guessedname": "start", "guessedtype": "function"}, "registerElement": {"params": [{"type": "object", "name": "tween", "description": " The Anim instance to be be registered"}], "description": "Adds an animation instance to the animation queue.\nAll animation instances must be registered in order to animate.", "guessedname": "registerElement", "guessedtype": "function"}, "correctFrame": {"guessedname": "correctFrame", "params": [{"type": "Object", "name": "tween", "description": " The Anim instance being corrected."}], "description": "On the fly frame correction to keep animation on time.", "private": "", "guessedtype": "function"}}, "file": "AnimMgr.js", "guessedtype": "function", "shortname": "AnimMgr", "properties": {"queue": {"guessedname": "queue", "type": "Array", "description": "The current queue of registered animation objects.", "private": "", "guessedtype": "property"}, "tweenCount": {"guessedname": "tweenCount", "type": "Int", "description": "The number of active animations.", "private": "", "guessedtype": "property"}, "delay": {"type": "Int", "description": "Interval delay in milliseconds, defaults to fastest possible.", "guessedname": "delay", "guessedtype": "property"}, "fps": {"type": "Int", "description": "Base frame rate (frames per second). \nArbitrarily high for better x-browser calibration (slower browsers drop more frames).", "guessedname": "fps", "guessedtype": "property"}, "thread": {"guessedname": "thread", "type": "Int", "description": "Reference to the animation Interval.", "private": "", "guessedtype": "property"}}, "description": "Handles animation queueing and threading.\nUsed by Anim and subclasses."}, "YAHOO.util.Event": {"name": "YAHOO.util.Event", "namespace": "YAHOO.util", "module": "event", "events": {"DOMReadyEvent": {"description": "Custom event the fires when the dom is initially usable", "guessedname": "DOMReadyEvent", "guessedtype": "property"}}, "guessedname": "Event", "methods": {"regCE": {"description": "Used by old versions of CustomEvent, restored for backwards\ncompatibility", "deprecated": "still here for backwards compatibility", "private": "", "static": "", "guessedname": "regCE", "guessedtype": "function"}, "_simpleRemove": {"description": "Basic remove listener", "private": "", "static": "", "guessedname": "_simpleRemove", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "sType", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_getScrollLeft": {"guessedname": "_getScrollLeft", "static": "", "description": "Returns scrollLeft", "private": "", "guessedtype": "function"}, "getTime": {"return": {"type": "Date", "description": "the time of the event"}, "description": "Returns the time of the event.  If the time is not included, the\nevent is modified using the current time.", "static": "", "guessedname": "getTime", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "stopEvent": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Convenience method for stopPropagation + preventDefault", "guessedname": "stopEvent", "guessedtype": "function"}, "generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already \nhave one.", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "getTarget": {"return": {"type": "HTMLElement", "description": "the event's target"}, "description": "Returns the event's target element.  Safari sometimes provides\na text node, and this is automatically resolved to the text\nnode's parent so that it behaves like other browsers.", "static": "", "guessedname": "getTarget", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}, {"type": "boolean", "name": "resolveTextNode", "description": " when set to true the target's\nparent will be returned if the target is a \ntext node.  @deprecated, the text node is\nnow resolved automatically"}]}, "stopPropagation": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Stops event propagation", "guessedname": "stopPropagation", "guessedtype": "function"}, "getCharCode": {"return": {"type": "int", "description": "the event's charCode"}, "description": "Returns the charcode for an event", "static": "", "guessedname": "getCharCode", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "clearCache": {"description": "Clears the element cache", "deprecated": "Elements are not cached any longer", "private": "", "static": "", "guessedname": "clearCache", "guessedtype": "function"}, "_simpleAdd": {"description": "Adds a DOM event directly without the caching, cleanup, scope adj, etc", "private": "", "static": "", "guessedname": "_simpleAdd", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "sType", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "useLegacyEvent": {"guessedname": "useLegacyEvent", "static": "", "description": "Logic that determines when we should automatically use legacy\nevents instead of DOM2 events.  Currently this is limited to old\nSafari browsers with a broken preventDefault", "private": "", "guessedtype": "function"}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.", "private": "", "static": "", "guessedname": "_isValidCollection", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "getEl": {"description": "We cache elements bound by id because when the unload event \nfires, we can no longer use document.getElementById", "deprecated": "Elements are not cached any longer", "private": "", "static": "", "guessedname": "getEl", "guessedtype": "function"}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}, "resolveTextNode": {"return": {"type": "HTMLElement", "description": "the normized node"}, "description": "In some cases, some browsers will return a text node inside\nthe actual element that was targeted.  This normalizes the\nreturn value for getTarget and getRelatedTarget.", "static": "", "guessedname": "resolveTextNode", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "node", "description": " node to resolve"}]}, "fireLegacyEvent": {"guessedname": "fireLegacyEvent", "static": "", "description": "When using legacy events, the handler is routed to this object\nso we can fire our custom listener stack.", "private": "", "guessedtype": "function"}, "getLegacyIndex": {"guessedname": "getLegacyIndex", "static": "", "description": "Returns the legacy event index that matches the supplied \nsignature", "private": "", "guessedtype": "function"}, "getXY": {"return": {"type": "[x, y]", "description": "the pageX and pageY properties of the event"}, "description": "Returns the pageX and pageY properties as an indexed array.", "static": "", "guessedname": "getXY", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "addListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends an event handler", "static": "", "guessedname": "addListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to assign the \nlistener to."}, {"type": "String", "name": "sType", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "override", "description": "  If true, the obj passed in becomes\nthe execution scope of the listener. If an\nobject, this object becomes the execution\nscope."}]}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "_tryPreloadAttach": {"guessedname": "_tryPreloadAttach", "static": "", "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable", "private": "", "guessedtype": "function"}, "_getScrollTop": {"guessedname": "_getScrollTop", "static": "", "description": "Returns scrollTop", "private": "", "guessedtype": "function"}, "onContentReady": {"static": "", "params": [{"type": "string", "name": "p_id", "description": " the id of the element to look for."}, {"type": "function", "name": "p_fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to p_fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, p_fn will execute\nin the scope of p_obj.  If an object, p_fn will\nexectute in the scope of that object"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>", "guessedname": "onContentReady", "guessedtype": "function"}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "onAvailable": {"static": "", "params": [{"type": "string||string[]", "name": "p_id", "description": " the id of the element, or an array\nof ids to look for."}, {"type": "function", "name": "p_fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to p_fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, p_fn will execute\nin the scope of p_obj, if set to an object it\nwill execute in the scope of that object"}, {"type": "boolean", "name": "checkContent", "description": "  check child node readiness (onContentReady)"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>", "guessedname": "onAvailable", "guessedtype": "function"}, "removeListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false \notherwise."}, "description": "Removes an event listener", "static": "", "guessedname": "removeListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to remove\nthe listener from."}, {"type": "String", "name": "sType", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."}]}, "onDOMReady": {"static": "", "params": [{"type": "function", "name": "p_fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to p_fn."}, {"type": "boolean|object", "name": "p_scope", "description": " If set to true, p_fn will execute\nin the scope of p_obj, if set to an object it\nwill execute in the scope of that object"}], "description": "Executes the supplied callback when the DOM is first usable.  This\nwill execute immediately if called after the DOMReady event has\nfired.   @todo the DOMContentReady event does not fire when the\nscript is dynamically injected into the page.  This means the\nDOMReady custom event will never fire in FireFox or Opera when the\nlibrary is injected.  It _will_ fire in Safari, and the IE \nimplementation would allow for us to fire it if the defered script\nis not available.  We want this to behave the same in all browsers.\nIs there a way to identify when the script has been injected \ninstead of included inline?  Is there a way to know whether the \nwindow onload event has fired without having had a listener attached \nto it when it did so?\n<p>The callback is a CustomEvent, so the signature is:<\/p>\n<p>type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;<\/p>\n<p>For DOMReady events, there are no fire argments, so the\nsignature is:<\/p>\n<p>\"DOMReady\", [], obj<\/p>", "guessedname": "onDOMReady", "guessedtype": "function"}, "on": {"see": "addListener", "static": "", "description": "YAHOO.util.Event.on is an alias for addListener", "guessedname": "on", "guessedtype": "property"}, "_getScroll": {"guessedname": "_getScroll", "static": "", "description": "Returns the scrollTop and scrollLeft.  Used to calculate the \npageX and pageY in Internet Explorer", "private": "", "guessedtype": "function"}, "getListeners": {"return": {"type": "Object", "description": "the listener. Contains the following fields:\n&nbsp;&nbsp;type:   (string)   the type of event\n&nbsp;&nbsp;fn:     (function) the callback supplied to addListener\n&nbsp;&nbsp;obj:    (object)   the custom object supplied to addListener\n&nbsp;&nbsp;adjust: (boolean|object)  whether or not to adjust the default scope\n&nbsp;&nbsp;scope: (boolean)  the derived scope based on the adjust parameter\n&nbsp;&nbsp;index:  (int)      its position in the Event util listener cache"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement|string", "name": "el", "description": "  the element or element id to inspect"}, {"type": "string", "name": "sType", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}, {"type": "HTMLElement", "name": "boundEl", "description": " the element the listener is attached to"}]}, "purgeElement": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "sType", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}], "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "guessedname": "purgeElement", "guessedtype": "function"}, "preventDefault": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Prevents the default behavior of the event", "guessedname": "preventDefault", "guessedtype": "function"}, "_getCacheIndex": {"guessedname": "_getCacheIndex", "static": "", "description": "Locating the saved event handler data by function ref", "private": "", "guessedtype": "function"}, "_ready": {"guessedname": "_ready", "static": "", "description": "Fires the DOMReady event listeners the first time the document is\nusable.", "private": "", "guessedtype": "function"}, "getPageY": {"return": {"type": "int", "description": "the event's pageY"}, "description": "Returns the event's pageY", "static": "", "guessedname": "getPageY", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "getPageX": {"return": {"type": "int", "description": "the event's pageX"}, "description": "Returns the event's pageX", "static": "", "guessedname": "getPageX", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "getRelatedTarget": {"return": {"type": "HTMLElement", "description": "the event's relatedTarget"}, "description": "Returns the event's related target", "static": "", "guessedname": "getRelatedTarget", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}}, "static": "", "file": "Event.js", "guessedtype": "function", "shortname": "Event", "properties": {"isSafari": {"description": "Safari detection", "deprecated": "use YAHOO.env.ua.webkit", "private": "", "static": "", "guessedname": "isSafari", "guessedtype": "property"}, "WFN": {"description": "Function wrapped for scope correction and cleanup, int constant", "static": "", "guessedname": "WFN", "guessedtype": "property", "type": "int", "final": ""}, "legacyEvents": {"guessedname": "legacyEvents", "static": "", "description": "Cache of DOM0 event handlers to work around issues with DOM2 events\nin Safari", "private": "", "guessedtype": "property"}, "legacyHandlers": {"guessedname": "legacyHandlers", "static": "", "description": "Listener stack for DOM0 events", "private": "", "guessedtype": "property"}, "FN": {"description": "Function to execute, int constant", "static": "", "guessedname": "FN", "guessedtype": "property", "type": "int", "final": ""}, "DOMReady": {"type": "boolean", "static": "", "description": "True when the document is initially usable", "guessedname": "DOMReady", "guessedtype": "property"}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 4000@amp;10 ms, so it will poll\nfor 40 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "isIE": {"description": "IE detection", "deprecated": "use YAHOO.env.ua.ie", "private": "", "static": "", "guessedname": "isIE", "guessedtype": "property"}, "unloadListeners": {"description": "User-defined unload function that will be fired before all events\nare detached", "private": "", "static": "", "guessedname": "unloadListeners", "guessedtype": "property", "type": "array"}, "OVERRIDE": {"description": "The original scope parameter passed into addListener", "static": "", "guessedname": "OVERRIDE", "guessedtype": "property", "type": "int", "final": ""}, "EL": {"description": "Element to bind, int constant", "static": "", "guessedname": "EL", "guessedtype": "property", "type": "int", "final": ""}, "OBJ": {"description": "Object passed in by the user that will be returned as a \nparameter to the callback, int constant.  Specific to\nunload listeners", "static": "", "guessedname": "UNLOAD_OBJ", "guessedtype": "property", "type": "int", "final": ""}, "elCache\nDOM element cache": {"deprecated": "Elements are not cached due to issues that arise when\nelements are removed and re-added", "static": "", "guessedname": "elCache", "private": "", "guessedtype": "property"}, "_interval": {"guessedname": "_interval", "static": "", "description": "poll handle", "private": "", "guessedtype": "property"}, "webkit": {"description": "webkit version", "deprecated": "use YAHOO.env.ua.webkit", "private": "", "static": "", "guessedname": "webkit", "guessedtype": "property", "type": "string"}, "legacyMap": {"guessedname": "legacyMap", "static": "", "description": "Lookup table for legacy events", "private": "", "guessedtype": "property"}, "loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "loadComplete", "guessedtype": "property", "type": "boolean"}, "webkitKeymap": {"description": "Normalized keycodes for webkit\/safari", "private": "", "static": "", "guessedname": "webkitKeymap", "guessedtype": "property", "type": "{int: int}", "final": ""}, "_dri": {"guessedname": "_dri", "static": "", "description": "document readystate poll handle", "private": "", "guessedtype": "property"}, "counter": {"guessedname": "counter", "static": "", "description": "Counter for auto id generation", "private": "", "guessedtype": "property"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "ADJ_SCOPE": {"description": "Adjusted scope, either the element we are registering the event\non or the custom object passed in by the listener, int constant", "static": "", "guessedname": "ADJ_SCOPE", "guessedtype": "property", "type": "int", "final": ""}, "onAvailStack": {"guessedname": "onAvailStack", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}, "listeners": {"description": "Cache of wrapped listeners", "private": "", "static": "", "guessedname": "listeners", "guessedtype": "property", "type": "array"}, "retryCount": {"guessedname": "retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "lastError": {"type": "Error", "static": "", "description": "addListener\/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set", "guessedname": "lastError", "guessedtype": "property"}, "TYPE": {"description": "Type of event, int constant", "static": "", "guessedname": "TYPE", "guessedtype": "property", "type": "int", "final": ""}}, "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event."}, "YAHOO.util.Dom": {"name": "YAHOO.util.Dom", "namespace": "YAHOO.util", "module": "dom", "guessedname": "Dom", "methods": {"getElementsBy": {"return": {"type": "Array", "description": "Array of HTMLElements"}, "params": [{"type": "Function", "name": "method", "description": " - A boolean method for testing elements which receives the element as its only argument."}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point"}, {"type": "Function", "name": "apply", "description": " (optional) A function to apply to each element when found"}], "description": "Returns a array of HTMLElements that pass the test applied by supplied boolean method.\nFor optimized performance, include a tag and\/or root node when possible.", "guessedname": "getElementsBy", "guessedtype": "function"}, "generateId": {"return": {"type": "String | Array", "description": "The generated ID, or array of generated IDs (or original ID if already present on an element)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " (optional) An optional element array of elements to add an ID to (no ID is added if one is already present)."}, {"type": "String", "name": "prefix", "description": " (optional) an optional prefix to use (defaults to \"yui-gen\")."}], "description": "Returns an ID and applies it to the element \"el\", if provided.", "guessedname": "generateId", "guessedtype": "function"}, "getDocumentWidth": {"return": {"type": "Int", "description": "The width of the actual document (which includes the body and its margin)."}, "description": "Returns the width of the document.", "guessedname": "getDocumentWidth", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "String", "name": "property", "description": " The style property to be set."}, {"type": "String", "name": "val", "description": " The value to apply to the given property."}], "description": "Wrapper for setting style properties of HTMLElements.  Normalizes \"opacity\" across modern browsers.", "guessedname": "setStyle", "guessedtype": "function"}, "getX": {"return": {"type": "Number | Array", "description": "The X position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getX", "guessedtype": "function"}, "getY": {"return": {"type": "Number | Array", "description": "The Y position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getY", "guessedtype": "function"}, "getChildren": {"return": {"type": "Array", "description": "A static array of HTMLElements"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns an array of HTMLElement childNodes.", "guessedname": "getChildren", "guessedtype": "function"}, "getFirstChild": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the first HTMLElement child.", "guessedname": "getFirstChild", "guessedtype": "function"}, "getLastChildBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"}], "description": "Returns the last HTMLElement child that passes the test method.", "guessedname": "getLastChildBy", "guessedtype": "function"}, "getAncestorBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " - A boolean method for testing elements which receives the element as its only argument."}], "description": "Returns the nearest ancestor that passes the test applied by supplied boolean method.\nFor performance reasons, IDs are not accepted and argument validation omitted.", "guessedname": "getAncestorBy", "guessedtype": "function"}, "insertBefore": {"return": {"type": "HTMLElement", "description": "The node that was inserted (or null if insert fails)"}, "params": [{"type": "String | HTMLElement", "name": "newNode", "description": " The node to be inserted"}, {"type": "String | HTMLElement", "name": "referenceNode", "description": " The node to insert the new node before"}], "description": "Inserts the new node as the previous sibling of the reference node", "guessedname": "insertBefore", "guessedtype": "function"}, "getPreviousSiblingBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"}], "description": "Returns the previous sibling that is an HTMLElement. \nFor performance reasons, IDs are not accepted and argument validation omitted.\nReturns the nearest HTMLElement sibling if no method provided.", "guessedname": "getPreviousSiblingBy", "guessedtype": "function"}, "getElementsByClassName": {"return": {"type": "Array", "description": "An array of elements that have the given class name"}, "params": [{"type": "String", "name": "className", "description": " The class name to match against"}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point"}, {"type": "Function", "name": "apply", "description": " (optional) A function to apply to each element when found"}], "description": "Returns a array of HTMLElements with the given class.\nFor optimized performance, include a tag and\/or root node when possible.", "guessedname": "getElementsByClassName", "guessedtype": "function"}, "replaceClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to remove the class from"}, {"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element or collection of elements.\nIf no oldClassName is present, the newClassName is simply added.", "guessedname": "replaceClass", "guessedtype": "function"}, "getNextSibling": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the next sibling that is an HTMLElement", "guessedname": "getNextSibling", "guessedtype": "function"}, "getDocumentHeight": {"return": {"type": "Int", "description": "The height of the actual document (which includes the body and its margin)."}, "description": "Returns the height of the document.", "guessedname": "getDocumentHeight", "guessedtype": "function"}, "getLastChild": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the last HTMLElement child.", "guessedname": "getLastChild", "guessedtype": "function"}, "getClientHeight": {"deprecated": "Now using getViewportHeight.  This interface left intact for back compat.", "return": {"type": "Int", "description": "The height of the viewable area of the page."}, "description": "Returns the height of the client (viewport).", "guessedname": "getClientHeight", "guessedtype": "function"}, "inDocument": {"return": {"type": "Boolean", "description": "Whether or not the element is present in the current document"}, "params": [{"type": "String | HTMLElement", "name": "el", "description": " The element to search for"}], "description": "Determines whether an HTMLElement is present in the current document.", "guessedname": "inDocument", "guessedtype": "function"}, "insertAfter": {"return": {"type": "HTMLElement", "description": "The node that was inserted (or null if insert fails)"}, "params": [{"type": "String | HTMLElement", "name": "newNode", "description": " The node to be inserted"}, {"type": "String | HTMLElement", "name": "referenceNode", "description": " The node to insert the new node after"}], "description": "Inserts the new node as the next sibling of the reference node", "guessedname": "insertAfter", "guessedtype": "function"}, "getViewportHeight": {"return": {"type": "Int", "description": "The height of the viewable area of the page (excludes scrollbars)."}, "description": "Returns the current height of the viewport.", "guessedname": "getViewportHeight", "guessedtype": "function"}, "addClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to add the class to"}, {"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given element or collection of elements.", "guessedname": "addClass", "guessedtype": "function"}, "getAncestorByClassName": {"return": {"type": "Object", "description": "HTMLElement"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}, {"type": "String", "name": "className", "description": ""}], "description": "Returns the nearest ancestor with the given className.", "guessedname": "getAncestorByClassName", "guessedtype": "function"}, "getViewportWidth": {"return": {"type": "Int", "description": "The width of the viewable area of the page (excludes scrollbars)."}, "description": "Returns the current width of the viewport.", "guessedname": "getViewportWidth", "guessedtype": "function"}, "get": {"return": {"type": "HTMLElement | Array", "description": "A DOM reference to an HTML element or an array of HTMLElements."}, "params": [{"type": "String | HTMLElement |Array", "name": "el", "description": " Accepts a string to use as an ID for getting a DOM reference, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}], "description": "Returns an HTMLElement reference.", "guessedname": "get", "guessedtype": "function"}, "removeClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to remove the class from"}, {"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element or collection of elements.", "guessedname": "removeClass", "guessedtype": "function"}, "getStyle": {"return": {"type": "String | Array", "description": "The current value of the style property for the element(s)."}, "params": [{"type": "String | HTMLElement |Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "String", "name": "property", "description": " The style property whose value is returned."}], "description": "Normalizes currentStyle and ComputedStyle.", "guessedname": "getStyle", "guessedtype": "function"}, "setXY": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}, {"type": "Array", "name": "pos", "description": " Contains X & Y values for new position (coordinates are page-based)"}, {"type": "Boolean", "name": "noRetry", "description": " By default we try and set the position a second time if the first fails"}], "description": "Set the position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setXY", "guessedtype": "function"}, "getPreviousSibling": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the previous sibling that is an HTMLElement", "guessedname": "getPreviousSibling", "guessedtype": "function"}, "getDocumentScrollTop": {"return": {"type": "Int", "description": "The amount that the document is scrolled to the top"}, "params": [{"type": "HTMLDocument", "name": "document", "description": " (optional) The document to get the scroll value of"}], "description": "Returns the top scroll value of the document", "guessedname": "getDocumentScrollTop", "guessedtype": "function"}, "setX": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "Int", "name": "x", "description": " The value to use as the X coordinate for the element(s)."}], "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setX", "guessedtype": "function"}, "setY": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "Int", "name": "x", "description": " To use as the Y coordinate for the element(s)."}], "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setY", "guessedtype": "function"}, "getXY": {"return": {"type": "Array", "description": "The XY position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getXY", "guessedtype": "function"}, "getFirstChildBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"}], "description": "Returns the first HTMLElement child that passes the test method.", "guessedname": "getFirstChildBy", "guessedtype": "function"}, "getClientWidth": {"deprecated": "Now using getViewportWidth.  This interface left intact for back compat.", "return": {"type": "Int", "description": "The width of the viewable area of the page."}, "description": "Returns the width of the client (viewport).", "guessedname": "getClientWidth", "guessedtype": "function"}, "getNextSiblingBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"}], "description": "Returns the next HTMLElement sibling that passes the boolean method. \nFor performance reasons, IDs are not accepted and argument validation omitted.\nReturns the nearest HTMLElement sibling if no method provided.", "guessedname": "getNextSiblingBy", "guessedtype": "function"}, "getRegion": {"return": {"type": "Region | Array", "description": "A Region or array of Region instances containing \"top, left, bottom, right\" member data."}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}], "description": "Returns the region position of the given element.\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false).", "guessedname": "getRegion", "guessedtype": "function"}, "batch": {"return": {"type": "Any | Array", "description": "The return value(s) from the supplied method"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " (optional) An element or array of elements to apply the method to"}, {"type": "Function", "name": "method", "description": " The method to apply to the element(s)"}, {"type": "Any", "name": "o", "description": " (optional) An optional arg that is passed to the supplied method"}, {"type": "Boolean", "name": "override", "description": " (optional) Whether or not to override the scope of \"method\" with \"o\""}], "description": "Runs the supplied method against each item in the Collection\/Array.\nThe method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) ).", "guessedname": "batch", "guessedtype": "function"}, "getChildrenBy": {"return": {"type": "Array", "description": "A static array of HTMLElements"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to start from"}, {"type": "Function", "name": "method", "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"}], "description": "Returns an array of HTMLElement childNodes that pass the test method.", "guessedname": "getChildrenBy", "guessedtype": "function"}, "isAncestor": {"return": {"type": "Boolean", "description": "Whether or not the haystack is an ancestor of needle"}, "params": [{"type": "String | HTMLElement", "name": "haystack", "description": " The possible ancestor"}, {"type": "String | HTMLElement", "name": "needle", "description": " The possible descendent"}], "description": "Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.", "guessedname": "isAncestor", "guessedtype": "function"}, "getDocumentScrollLeft": {"return": {"type": "Int", "description": "The amount that the document is scrolled to the left"}, "params": [{"type": "HTMLDocument", "name": "document", "description": " (optional) The document to get the scroll value of"}], "description": "Returns the left scroll value of the document", "guessedname": "getDocumentScrollLeft", "guessedtype": "function"}, "getAncestorByTagName": {"return": {"type": "Object", "description": "HTMLElement"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}, {"type": "String", "name": "tagName", "description": ""}], "description": "Returns the nearest ancestor with the given tagName.", "guessedname": "getAncestorByTagName", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean | Array", "description": "A boolean value or array of boolean values"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to test"}, {"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether an HTMLElement has the given className.", "guessedname": "hasClass", "guessedtype": "function"}}, "file": "Dom.js", "guessedtype": "property", "shortname": "Dom", "description": "Provides helper methods for DOM elements."}, "YAHOO.widget.TVFadeOut": {"name": "YAHOO.widget.TVFadeOut", "constructors": [{"params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "Function", "name": "callback", "description": "  function to invoke when the animation is finished"}], "description": "A 1\/2 second fade out animation."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TVFadeOut", "methods": {"onComplete": {"description": "Clean up and invoke callback", "guessedname": "onComplete", "guessedtype": "function"}, "animate": {"description": "Performs the animation", "guessedname": "animate", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "the string representation of the instance"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}}, "file": "TVFadeOut.js", "guessedtype": "function", "shortname": "TVFadeOut", "properties": {"el": {"type": "HTMLElement", "description": "The element to animate", "guessedname": "el", "guessedtype": "property"}, "callback": {"type": "function", "description": "the callback to invoke when the animation is complete", "guessedname": "callback", "guessedtype": "property"}}, "description": "A 1\/2 second fade out animation."}, "YAHOO.widget.HTMLNode": {"name": "YAHOO.widget.HTMLNode", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "YAHOO.widget.Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded\/collapsed state"}, {"type": "boolean", "name": "hasIcon", "description": "  specifies whether or not leaf nodes should\nhave an icon"}], "description": "This implementation takes either a string or object for the\noData argument.  If is it a string, we will use it for the display\nof this node (and it can contain any html code).  If the parameter\nis an object, we look for a parameter called \"html\" that will be\nused for this node's display."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "HTMLNode", "methods": {"getContentEl": {"return": {"type": "HTMLElement", "description": "the element"}, "description": "Returns the outer html element for this node's content", "guessedname": "getContentEl", "guessedtype": "function"}}, "extends": "YAHOO.widget.Node", "superclass": "YAHOO.widget.Node", "file": "HTMLNode.js", "guessedtype": "function", "shortname": "HTMLNode", "properties": {"contentElId": {"type": "string", "description": "The generated id that will contain the data passed in by the implementer.", "guessedname": "contentElId", "guessedtype": "property"}, "content": {"type": "string", "description": "The HTML content to use for this node's display", "guessedname": "content", "guessedtype": "property"}, "initContent": {"param": "oData {object} An html string or object containing an html property", "description": "Sets up the node label", "guessedname": "initContent", "guessedtype": "function"}, "setHtml": {"param": "o {object} An html string or object containing an html property", "description": "Synchronizes the node.data, node.html, and the node's content", "guessedname": "setHtml", "guessedtype": "function"}, "contentStyle": {"type": "string", "description": "The CSS class for the html content container.  Defaults to ygtvhtml, but \ncan be overridden to provide a custom presentation for a specific node.", "guessedname": "contentStyle", "guessedtype": "property"}}, "description": "This implementation takes either a string or object for the\noData argument.  If is it a string, we will use it for the display\nof this node (and it can contain any html code).  If the parameter\nis an object, we look for a parameter called \"html\" that will be\nused for this node's display."}, "YAHOO.widget.Chart": {"name": "YAHOO.widget.Chart", "configs": {"categoryNames": {"type": "Array", "description": "Defines the names of the categories to be displayed in the Chart.."}, "series": {"type": "Array", "description": "Defines the series to be displayed by the Chart."}, "request": {"type": "String", "description": "Request to be sent to the Chart's DataSource."}, "dataTipFunction": {"type": "String", "description": "The string representation of a globally-accessible function\nthat may be called by the SWF to generate the datatip text for a Chart's item."}, "dataSource": {"type": "DataSource", "description": "The DataSource instance to display in the Chart."}, "polling": {"type": "Number", "description": "A numeric value indicating the number of milliseconds between\npolling requests to the DataSource."}}, "constructors": [{"params": [{"type": "String", "name": "type", "description": "  The char type. May be \"line\", \"column\", \"bar\", or \"pie\""}, {"type": "HTMLElement", "name": "containerId", "description": "  Container element for the Flash Player instance."}, {"type": "YAHOO.util.DataSource", "name": "dataSource", "description": "  DataSource instance."}, {"type": "object", "name": "attributes", "description": "  (optional) Object literal of configuration values."}], "description": "Chart class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "properties": {"_type": {"guessedname": "_type", "type": "String", "description": "The type of this chart instance.", "private": "", "guessedtype": "property"}, "_pollingInterval": {"guessedname": "_pollingInterval", "type": "Number", "description": "The time, in ms, between requests for data.", "private": "", "guessedtype": "property"}, "_request": {"private": "", "description": "Storage for the request attribute.", "guessedname": "_request", "guessedtype": "property"}, "_dataSource": {"private": "", "description": "Storage for the dataSource attribute.", "guessedname": "_dataSource", "guessedtype": "property"}, "_dataTipFunction": {"private": "", "description": "Storage for the dataTipFunction attribute.", "guessedname": "_dataTipFunction", "guessedtype": "property"}, "_seriesDefs": {"private": "", "description": "Storage for the series attribute.", "guessedname": "_seriesDefs", "guessedtype": "property"}, "Chart.SWFURL": {"description": "Storage for the dataTipFunction attribute.", "default": "\"assets\/charts.swf\"", "private": "", "static": "", "guessedname": "SWFURL", "guessedtype": "property", "final": ""}, "_pollingID": {"guessedname": "_pollingID", "type": "Number", "description": "The id returned from the DataSource's setInterval function.", "private": "", "guessedtype": "property"}}, "guessedname": "Chart", "methods": {"_getSeriesDefs": {"private": "", "description": "Getter for the series attribute.", "guessedname": "_getSeriesDefs", "guessedtype": "function"}, "_loadHandler": {"private": "", "description": "Called when the SWF is ready for communication. Sets the type, initializes\nthe styles, and sets the DataSource.", "guessedname": "_loadHandler", "guessedtype": "function"}, "_loadDataHandler": {"private": "", "description": "Called when the DataSource receives new data. The series definitions are used\nto build a data provider for the SWF chart.", "guessedname": "_loadDataHandler", "guessedtype": "function"}, "_getRequest": {"private": "", "description": "Getter for the request attribute.", "guessedname": "_getRequest", "guessedtype": "function"}, "_setSeriesDefs": {"private": "", "description": "Setter for the series attribute.", "guessedname": "_setSeriesDefs", "guessedtype": "function"}, "_setRequest": {"private": "", "description": "Setter for the request attribute.", "guessedname": "_setRequest", "guessedtype": "function"}, "_getDataSource": {"private": "", "description": "Getter for the dataSource attribute.", "guessedname": "_getDataSource", "guessedtype": "function"}, "_setDataSource": {"private": "", "description": "Setter for the dataSource attribute.", "guessedname": "_setDataSource", "guessedtype": "function"}, "_initAttributes": {"private": "", "description": "Initializes the attributes.", "guessedname": "_initAttributes", "guessedtype": "function"}, "_setCategoryNames": {"private": "", "description": "Setter for the categoryNames attribute.", "guessedname": "_setCategoryNames", "guessedtype": "function"}, "setStyles": {"params": [{"type": "Object", "name": "styles", "description": "  Initializer for all Chart styles."}], "description": "Resets all styles on the Chart instance.", "guessedname": "setStyles", "guessedtype": "function"}, "_refreshData": {"private": "", "description": "Sends the request to the DataSource.", "guessedname": "_refreshData", "guessedtype": "function"}, "setSeriesStyles": {"params": [{"type": "Array", "name": "styles", "description": "  Initializer for all Chart series styles."}], "description": "Sets the styles on all series in the Chart.", "guessedname": "setSeriesStyles", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the Chart instance."}, "description": "Public accessor to the unique name of the Chart instance.", "guessedname": "toString", "guessedtype": "function"}, "_getPolling": {"private": "", "description": "Getter for the polling attribute.", "guessedname": "_getPolling", "guessedtype": "function"}, "_setPolling": {"private": "", "description": "Setter for the polling attribute.", "guessedname": "_setPolling", "guessedtype": "function"}, "_getDataTipFunction": {"private": "", "description": "Getter for the dataTipFunction attribute.", "guessedname": "_getDataTipFunction", "guessedtype": "function"}, "_getCategoryNames": {"private": "", "description": "Getter for the categoryNames attribute.", "guessedname": "_getCategoryNames", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String", "name": "name", "description": "  Name of the Chart style value to change."}, {"type": "Object", "name": "value", "description": "  New value to pass to the Chart style."}], "description": "Sets a single style value on the Chart instance.", "guessedname": "setStyle", "guessedtype": "function"}, "_setDataTipFunction": {"private": "", "description": "Setter for the dataTipFunction attribute.", "guessedname": "_setDataTipFunction", "guessedtype": "function"}}, "uses": ["YAHOO.util.FlashAdapter"], "file": "Chart.js", "guessedtype": "function", "shortname": "Chart", "events": {"itemDragEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user moves the mouse during a drag action."}, "beforeSeriesChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeSeriesChangeEvent", "description": "Fires before the value for the configuration attribute 'series' changes. Return false to cancel the attribute change."}, "beforePollingChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforePollingChangeEvent", "description": "Fires before the value for the configuration attribute 'polling' changes. Return false to cancel the attribute change."}, "beforeCategorynamesChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeCategorynamesChangeEvent", "description": "Fires before the value for the configuration attribute 'categoryNames' changes. Return false to cancel the attribute change."}, "seriesChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "seriesChangeEvent", "description": "Fires when the value for the configuration attribute 'series' changes."}, "itemDragStartEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user presses the mouse down on an item to initiate a drag action."}, "dataTipFunctionChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "dataTipFunctionChangeEvent", "description": "Fires when the value for the configuration attribute 'dataTipFunction' changes."}, "beforeRequestChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeRequestChangeEvent", "description": "Fires before the value for the configuration attribute 'request' changes. Return false to cancel the attribute change."}, "dataSourceChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "dataSourceChangeEvent", "description": "Fires when the value for the configuration attribute 'dataSource' changes."}, "beforeDatasourceChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDatasourceChangeEvent", "description": "Fires before the value for the configuration attribute 'dataSource' changes. Return false to cancel the attribute change."}, "itemMouseOverEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user moves the mouse over the bounds of an item renderer in the chart."}, "beforeDatatipfunctionChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDatatipfunctionChangeEvent", "description": "Fires before the value for the configuration attribute 'dataTipFunction' changes. Return false to cancel the attribute change."}, "pollingChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "pollingChangeEvent", "description": "Fires when the value for the configuration attribute 'polling' changes."}, "itemClickEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user clicks an item renderer in the chart with the mouse."}, "itemDragEndEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user releases the mouse during a drag action."}, "requestChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "requestChangeEvent", "description": "Fires when the value for the configuration attribute 'request' changes."}, "categoryNamesChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "categoryNamesChangeEvent", "description": "Fires when the value for the configuration attribute 'categoryNames' changes."}, "itemDoubleClickEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user double-clicks an item renderer in the chart with the mouse."}, "itemMouseOutEvent": {"params": [{"type": "String", "name": "event.type", "description": "  The event type"}, {"type": "Object", "name": "event.item", "description": "  The data displayed by the renderer"}, {"type": "Number", "name": "event.index", "description": "  The position within the series that the item appears."}, {"type": "Number", "name": "event.seriesIndex", "description": "  The position within the series definition that the series appears."}, {"type": "Number", "name": "event.x", "description": "  The horizontal position of the mouse, relative to the SWF."}, {"type": "Number", "name": "event.y", "description": "  The vertical position of the mouse, relative to the SWF."}], "description": "Fires when the user moves the mouse out of the bounds of an item renderer in the chart."}}, "description": "Chart class for the YUI Charts widget."}, "YAHOO.widget.TreeView": {"methods": {"animateExpand": {"return": {"type": "boolean", "description": "true if animation could be invoked, false otherwise"}, "params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "YAHOO.util.Node", "name": "node", "description": "  the node that was expanded"}], "description": "Perform the expand animation if configured, or just show the\nelement if not configured or too many animations are in progress", "guessedname": "animateExpand", "guessedtype": "function"}, "setDynamicLoad": {"params": [{"type": "function", "name": "fnDataLoader", "description": " the function that will be called to get the data"}, {"type": "int", "name": "iconMode", "description": "  configures the icon that is displayed when a dynamic\nload node is expanded the first time without children.  By default, the \n\"collapse\" icon will be used.  If set to 1, the leaf node icon will be\ndisplayed."}], "description": "Configures this tree to dynamically load all child data", "guessedname": "setDynamicLoad", "guessedtype": "function"}, "getNodeByIndex": {"return": {"type": "Node", "description": "the node with index=nodeIndex, null if no match"}, "params": [{"type": "int", "name": "nodeIndex", "description": " the index of the node wanted"}], "description": "Returns a node in the tree that has the specified index (this index\nis created internally, so this function probably will only be used\nin html generated for a given node.)", "guessedname": "getNodeByIndex", "guessedtype": "function"}, "YAHOO.widget.TreeView.addHandler": {"static": "", "params": [{"type": "", "name": "el", "description": " the elment to bind the handler to"}, {"type": "string", "name": "sType", "description": " the type of event handler"}, {"type": "function", "name": "fn", "description": " the callback to invoke"}], "description": "Add a DOM event", "guessedname": "addHandler", "guessedtype": "function"}, "collapseComplete": {"description": "Function executed when the collapse animation completes", "guessedname": "collapseComplete", "guessedtype": "function"}, "regNode": {"guessedname": "regNode", "params": [{"type": "Node", "name": "node", "description": "  the node to register"}], "description": "Nodes register themselves with the tree instance when they are created.", "private": "", "guessedtype": "function"}, "onExpand": {"deprecated": "use treeobj.subscribe(\"expand\") instead", "params": [{"type": "Node", "name": "node", "description": "  the node that was expanded"}], "description": "Abstract method that is executed when a node is expanded", "guessedname": "onExpand", "guessedtype": "function"}, "YAHOO.widget.TreeView.removeHandler": {"static": "", "params": [{"type": "", "name": "el", "description": " the elment to bind the handler to"}, {"type": "string", "name": "sType", "description": " the type of event handler"}, {"type": "function", "name": "fn", "description": " the callback to invoke"}], "description": "Remove a DOM event", "guessedname": "removeHandler", "guessedtype": "function"}, "YAHOO.widget.TreeView.preload": {"static": "", "params": [{"type": "string", "name": "prefix", "description": " the prefix to use to generate the names of the\nimages to preload, default is ygtv"}], "description": "Attempts to preload the images defined in the styles used to draw the tree by\nrendering off-screen elements that use the styles.", "guessedname": "preload", "guessedtype": "function"}, "setExpandAnim": {"params": [{"type": "string", "name": "type", "description": " the type of animation (acceptable values defined \nin YAHOO.widget.TVAnim)"}], "description": "Sets up the animation for expanding children", "guessedname": "setExpandAnim", "guessedtype": "function"}, "YAHOO.widget.TreeView.getTree": {"return": {"type": "TreeView", "description": "the tree instance requested, null if not found."}, "description": "Global method for getting a tree by its id.  Used in the generated\ntree html.", "static": "", "guessedname": "getTree", "guessedtype": "function", "params": [{"type": "String", "name": "treeId", "description": "  the id of the tree instance"}]}, "removeNode": {"return": {"type": "boolean", "description": "False is there was a problem, true otherwise."}, "params": [{"type": "Node", "name": "The", "description": " node to remove"}, {"type": "boolean", "name": "autoRefresh", "description": " automatically refreshes branch if true"}], "description": "Removes the node and its children, and optionally refreshes the \nbranch of the tree that was affected.", "guessedname": "removeNode", "guessedtype": "function"}, "popNode": {"params": [{"type": "Node", "name": "the", "description": " node to remove"}], "description": "Removes the node from the tree, preserving the child collection \nto make it possible to insert the branch into another part of the \ntree, or another tree.", "guessedname": "popNode", "guessedtype": "function"}, "onCollapse": {"deprecated": "use treeobj.subscribe(\"collapse\") instead", "params": [{"type": "Node", "name": "node", "description": "  the node that was collapsed."}], "description": "Abstract method that is executed when a node is collapsed.", "guessedname": "onCollapse", "guessedtype": "function"}, "init": {"guessedname": "init", "parm": "{string|HTMLElement} id the id of the element that will hold the tree", "description": "Initializes the tree", "private": "", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "the host element"}, "description": "Returns the tree's host element", "guessedname": "getEl", "guessedtype": "function"}, "removeChildren": {"params": [{"type": "Node", "name": "node", "description": " the node to purge"}], "description": "Deletes this nodes child collection, recursively.  Also collapses\nthe node, and resets the dynamic load flag.  The primary use for\nthis method is to purge a node and allow it to fetch its data\ndynamically again.", "guessedname": "removeChildren", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the tree"}, "description": "TreeView instance toString", "guessedname": "toString", "guessedtype": "function"}, "animateCollapse": {"return": {"type": "boolean", "description": "true if animation could be invoked, false otherwise"}, "params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "YAHOO.util.Node", "name": "node", "description": "  the node that was expanded"}], "description": "Perform the collapse animation if configured, or just show the\nelement if not configured or too many animations are in progress", "guessedname": "animateCollapse", "guessedtype": "function"}, "expandAll": {"description": "Expands all child nodes.  Note: this conflicts with the \"multiExpand\"\nnode property.  If expand all is called in a tree with nodes that\ndo not allow multiple siblings to be displayed, only the last sibling\nwill be expanded.", "guessedname": "expandAll", "guessedtype": "function"}, "draw": {"description": "Renders the tree boilerplate and visible nodes", "guessedname": "draw", "guessedtype": "function"}, "YAHOO.widget.TreeView.getNode": {"return": {"type": "Node", "description": "the node instance requested, null if not found"}, "description": "Global method for getting a node by its id.  Used in the generated\ntree html.", "static": "", "guessedname": "getNode", "guessedtype": "function", "params": [{"type": "String", "name": "treeId", "description": "  the id of the tree instance"}, {"type": "String", "name": "nodeIndex", "description": "  the index of the node to return"}]}, "getNodeByProperty": {"return": {"type": "Node", "description": "the matching node, null if no match"}, "params": [{"type": "object", "name": "property", "description": " the property to search (usually a string)"}, {"type": "object", "name": "value", "description": " the value we want to find (usuall an int or string)"}], "description": "Returns a node that has a matching property and value in the data\nobject that was passed into its constructor.", "guessedname": "getNodeByProperty", "guessedtype": "function"}, "_removeChildren_animComplete": {"guessedname": "_removeChildren_animComplete", "params": [{"type": "", "name": "o", "description": " the custom event payload"}], "description": "wait until the animation is complete before deleting \nto avoid javascript errors", "private": "", "guessedtype": "function"}, "getNodesByProperty": {"return": {"type": "Array", "description": "the matching collection of nodes, null if no match"}, "params": [{"type": "object", "name": "property", "description": " the property to search (usually a string)"}, {"type": "object", "name": "value", "description": " the value we want to find (usuall an int or string)"}], "description": "Returns a collection of nodes that have a matching property \nand value in the data object that was passed into its constructor.", "guessedname": "getNodesByProperty", "guessedtype": "function"}, "_deleteNode": {"private": "", "description": "Deletes the node and recurses children", "guessedname": "_deleteNode", "guessedtype": "function"}, "getRoot": {"return": {"type": "Node", "description": "the root node"}, "description": "Returns the root node of this tree", "guessedname": "getRoot", "guessedtype": "function"}, "getNodeByElement": {"return": {"type": "YAHOO.widget.Node", "description": "a node reference or null"}, "params": [{"type": "HTMLElement", "name": "the", "description": " element to test"}], "description": "Returns the treeview node reference for an anscestor element\nof the node, or null if it is not contained within any node\nin this tree.", "guessedname": "getNodeByElement", "guessedtype": "function"}, "setUpLabel": {"params": [{"type": "", "name": "oData", "description": " string containing the label, or an object with a label property"}], "description": "Sets up the node label", "guessedname": "setUpLabel", "guessedtype": "function"}, "setCollapseAnim": {"params": [{"type": "string", "name": "the", "description": " type of animation (acceptable values defined in \nYAHOO.widget.TVAnim)"}], "description": "Sets up the animation for collapsing children", "guessedname": "setCollapseAnim", "guessedtype": "function"}, "generateId": {"private": "", "description": "Generates an unique id for an element if it doesn't yet have one", "guessedname": "generateId", "guessedtype": "function"}, "expandComplete": {"description": "Function executed when the expand animation completes", "guessedname": "expandComplete", "guessedtype": "function"}, "collapseAll": {"description": "Collapses all expanded child nodes in the entire tree.", "guessedname": "collapseAll", "guessedtype": "function"}}, "description": "Contains the tree view state data and the root node.", "constructors": [{"params": [{"type": "string|HTMLElement", "name": "id", "description": " The id of the element, or the element\nitself that the tree will be inserted into."}], "description": "Contains the tree view state data and the root node."}], "namespace": "YAHOO.widget", "module": "treeview", "properties": {"YAHOO.widget.TreeView.nodeCount": {"type": "int", "static": "", "description": "Running count of all nodes created in all trees.  This is \nused to provide unique identifies for all nodes.  Deleting\nnodes does not change the nodeCount.", "guessedname": "nodeCount", "guessedtype": "property"}, "locked": {"type": "boolean", "description": "We lock the tree control while waiting for the dynamic loader to return", "guessedname": "locked", "guessedtype": "property"}, "_expandAnim": {"guessedname": "_expandAnim", "type": "string", "description": "The animation to use for expanding children, if any", "private": "", "guessedtype": "property"}, "_collapseAnim": {"guessedname": "_collapseAnim", "type": "string", "description": "The animation to use for collapsing children, if any", "private": "", "guessedtype": "property"}, "_el": {"private": "", "description": "The host element for this tree", "guessedname": "_el", "guessedtype": "property"}, "YAHOO.widget.TreeView.counter": {"guessedname": "counter", "static": "", "description": "Counter for generating a new unique element id", "private": "", "guessedtype": "property"}, "YAHOO.widget.TreeView.trees": {"description": "Global cache of tree instances", "private": "", "static": "", "guessedname": "trees", "guessedtype": "property", "type": "Array"}, "_nodes": {"guessedname": "_nodes", "type": "Node[]", "description": "Flat collection of all nodes in this tree.  This is a sparse\narray, so the length property can't be relied upon for a\nnode count for the tree.", "private": "", "guessedtype": "property"}, "_animCount": {"guessedname": "_animCount", "type": "int", "description": "The current number of animations that are executing", "private": "", "guessedtype": "property"}, "maxAnim": {"type": "int", "description": "The maximum number of animations to run at one time.", "guessedname": "maxAnim", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of tree container element", "guessedname": "id", "guessedtype": "property"}}, "guessedname": "TreeView", "uses": ["YAHOO.util.EventProvider"], "file": "TreeView.js", "guessedtype": "function", "shortname": "TreeView", "events": {"labelClick": {"params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node clicked"}], "description": "Custom event that is fired when the text node label is clicked.  The\ncustom event is defined on the tree instance, so there is a single\nevent that handles all nodes in the tree.  The node clicked is \nprovided as an argument"}, "collapse": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that is collapsing"}], "description": "Fires when a node is going to be collapsed.  Return false to stop\nthe collapse."}, "collapseComplete": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that was collapsed"}], "description": "Fires after a node is successfully collapsed.  This event will not fire\nif the \"collapse\" event was cancelled."}, "animComplete": {"type": "CustomEvent", "parm": "{String} type the type of animation (\"expand\" or \"collapse\")", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that is expanding\/collapsing"}], "description": "When animation is enabled, this event fires when the animation\ncompletes"}, "expandComplete": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that was expanded"}], "description": "Fires after a node is successfully expanded.  This event will not fire\nif the \"expand\" event was cancelled."}, "animStart": {"type": "CustomEvent", "parm": "{String} type the type of animation (\"expand\" or \"collapse\")", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that is expanding\/collapsing"}], "description": "When animation is enabled, this event fires when the animation\nstarts"}, "expand": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that is expanding"}], "description": "Fires when a node is going to be expanded.  Return false to stop\nthe collapse."}}, "name": "YAHOO.widget.TreeView"}, "YAHOO.widget.RootNode": {"name": "YAHOO.widget.RootNode", "constructors": [{"params": [{"type": "YAHOO.widget.TreeView", "name": "oTree", "description": "  The tree instance this node belongs to"}], "description": "A custom YAHOO.widget.Node that handles the unique nature of \nthe virtual, presentationless root node."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "RootNode", "extends": "YAHOO.widget.Node", "superclass": "YAHOO.widget.Node", "file": "RootNode.js", "guessedtype": "function", "shortname": "RootNode", "description": "A custom YAHOO.widget.Node that handles the unique nature of \nthe virtual, presentationless root node."}, "YAHOO.tool.TestNode": {"name": "YAHOO.tool.TestNode", "constructors": [{"params": [{"type": "Variant", "name": "testObject", "description": " A TestSuite, TestCase, or the name of a test function."}], "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function."}], "namespace": "YAHOO.tool", "module": "yuitest", "events": {"testcasebegin": {"description": "Fires when a test case is opened but before the first \ntest is executed."}, "testcasecomplete": {"description": "Fires when all tests in a test case have been executed."}, "begin": {"description": "Fires when the run() method is called."}, "ignore": {"description": "Fires when a test has been ignored."}, "testsuitebegin": {"description": "Fires when a test suite is opened but before the first \ntest is executed."}, "testsuitecomplete": {"description": "Fires when all test cases in a test suite have been\ncompleted."}, "pass": {"description": "Fires when a test has passed."}, "fail": {"description": "Fires when a test has failed."}, "complete": {"description": "Fires when all test suites and test cases have been completed."}}, "methods": {"appendChild": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Variant", "name": "testObject", "description": " A TestSuite, TestCase, or the name of a test function."}], "description": "Appends a new test object (TestSuite, TestCase, or test function name) as a child\nof this node.", "guessedname": "appendChild", "guessedtype": "function"}, "_run": {"return": {"type": "Object", "description": "Results of the execution with properties passed, failed, and total."}, "description": "Runs a test case or test suite, returning the results.", "private": "", "static": "", "guessedname": "_run", "guessedtype": "function", "params": [{"type": "YAHOO.tool.TestCase|YAHOO.tool.TestSuite", "name": "testObject", "description": " The test case or test suite to run."}]}, "run": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Runs the test suite.", "guessedname": "run", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "description": "Resumes the TestRunner after wait() was called.", "static": "", "guessedname": "resume", "guessedtype": "function", "params": [{"type": "Function", "name": "segment", "description": " The function to run as the rest\nof the haulted test."}]}, "_addTestCaseToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test case to the test tree as a child of the specified node.", "private": "", "static": "", "guessedname": "_addTestCaseToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test case to as a child."}, {"type": "YAHOO.tool.TestCase", "name": "testCase", "description": " The test case to add."}]}, "clear": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Removes all test objects from the runner.", "guessedname": "clear", "guessedtype": "function"}, "_buildTestTree": {"return": {"type": "Void", "description": ""}, "description": "Builds the test tree based on items in the master suite. The tree is a hierarchical\nrepresentation of the test suites, test cases, and test functions. The resulting tree\nis stored in _root and the pointer _cur is set to the root initially.", "private": "", "static": "", "guessedname": "_buildTestTree", "guessedtype": "function"}, "_addTestSuiteToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite to the test tree as a child of the specified node.", "private": "", "static": "", "guessedname": "_addTestSuiteToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test suite to as a child."}, {"type": "YAHOO.tool.TestSuite", "name": "testSuite", "description": " The test suite to add."}]}, "add": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite or test case to the list of test objects to run.", "static": "", "guessedname": "add", "guessedtype": "function", "params": [{"type": "", "name": "testObject", "description": " Either a TestCase or a TestSuite that should be run."}]}, "_next": {"return": {"type": "TestNode", "description": "The next node in the test tree or null if the end is reached."}, "description": "Retrieves the next node in the test tree.", "private": "", "static": "", "guessedname": "_next", "guessedtype": "function"}, "_runTest": {"return": {"type": "Void", "description": ""}, "description": "Runs a single test based on the data provided in the node.", "private": "", "static": "", "guessedname": "_runTest", "guessedtype": "function", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test to run."}], "name": "_runTest"}}, "private": "", "file": "TestRunner.js", "shortname": "TestNode", "properties": {"masterSuite": {"type": "YAHOO.tool.TestSuite", "description": "Suite on which to attach all TestSuites and TestCases to be run.", "private": ""}, "testObject": {"type": "Variant", "description": "The TestSuite, TestCase, or test function represented by this node.", "guessedname": "testObject", "guessedtype": "property"}, "parent": {"type": "TestNode", "description": "Pointer to this node's parent.", "guessedname": "parent", "guessedtype": "property"}, "_root": {"guessedname": "_root", "type": "TestNode", "description": "Pointer to the root node in the test tree.", "private": "", "guessedtype": "property"}, "results": {"type": "object", "description": "Test results for this test object."}, "firstChild": {"type": "TestNode", "description": "Pointer to this node's first child."}, "next": {"type": "TestNode", "description": "Pointer to this node's next sibling.", "guessedname": "next", "guessedtype": "property"}, "_cur": {"guessedname": "_cur", "type": "TestNode", "description": "Pointer to the current node in the test tree.", "private": "", "guessedtype": "property"}, "lastChild": {"type": "TestNode", "description": "Pointer to this node's last child.", "guessedname": "lastChild", "guessedtype": "property"}}, "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function."}, "YAHOO.util.DD": {"name": "YAHOO.util.DD", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the linked element"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop items"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DD: \nscroll"}], "description": "A DragDrop implementation where the linked element follows the \nmouse cursor during a drag."}], "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DD", "methods": {"setDragElPos": {"params": [{"type": "int", "name": "iPageX", "description": " the X coordinate of the mousedown or drag event"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the mousedown or drag event"}], "description": "Sets the drag element to the location of the mousedown or click event, \nmaintaining the cursor location relative to the location on the element \nthat was clicked.  Override this if you want to place the element in a \nlocation other than where the cursor is.", "guessedname": "setDragElPos", "guessedtype": "function"}, "alignElWithMouse": {"params": [{"type": "HTMLElement", "name": "el", "description": " the element to move"}, {"type": "int", "name": "iPageX", "description": " the X coordinate of the mousedown or drag event"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the mousedown or drag event"}], "description": "Sets the element to the location of the mousedown or click event, \nmaintaining the cursor location relative to the location on the element \nthat was clicked.  Override this if you want to place the element in a \nlocation other than where the cursor is.", "guessedname": "alignElWithMouse", "guessedtype": "function"}, "autoOffset": {"params": [{"type": "int", "name": "iPageX", "description": " the X coordinate of the click"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the click"}], "description": "Sets the pointer offset to the distance between the linked element's top \nleft corner and the location the element was clicked", "guessedname": "autoOffset", "guessedtype": "function"}, "autoScroll": {"guessedname": "autoScroll", "params": [{"type": "int", "name": "x", "description": " the drag element's x position"}, {"type": "int", "name": "y", "description": " the drag element's y position"}, {"type": "int", "name": "h", "description": " the height of the drag element"}, {"type": "int", "name": "w", "description": " the width of the drag element"}], "description": "Auto-scroll the window if the dragged object has been moved beyond the \nvisible window boundary.", "private": "", "guessedtype": "function"}, "setDelta": {"params": [{"type": "int", "name": "iDeltaX", "description": " the distance from the left"}, {"type": "int", "name": "iDeltaY", "description": " the distance from the top"}], "description": "Sets the pointer offset.  You can call this directly to force the \noffset to be in a particular location (e.g., pass in 0,0 to set it \nto the center of the object, as done in YAHOO.widget.Slider)", "guessedname": "setDelta", "guessedtype": "function"}, "cachePosition": {"params": [{"type": "", "name": "iPageX", "description": " the current x position (optional, this just makes it so we\ndon't have to look it up again)"}, {"type": "", "name": "iPageY", "description": " the current y position (optional, this just makes it so we\ndon't have to look it up again)"}], "description": "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.", "guessedname": "cachePosition", "guessedtype": "function"}}, "extends": "YAHOO.util.DragDrop", "superclass": "YAHOO.util.DragDrop", "file": "DD.js", "guessedtype": "function", "shortname": "DD", "properties": {"scroll": {"type": "boolean", "description": "When set to true, the utility automatically tries to scroll the browser\nwindow wehn a drag and drop element is dragged near the viewport boundary.\nDefaults to true.", "guessedname": "scroll", "guessedtype": "property"}}, "description": "A DragDrop implementation where the linked element follows the \nmouse cursor during a drag."}, "YAHOO.widget.DS_ScriptNode": {"name": "YAHOO.widget.DS_ScriptNode", "constructors": [{"params": [{"type": "String", "name": "sUri", "description": "  URI to the script location that will return data."}, {"type": "String[]", "name": "aSchema", "description": "  Data schema definition of results."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of config params."}], "description": "Implementation of YAHOO.widget.DataSource using the Get Utility to generate\r\ndynamic SCRIPT nodes for data retrieval."}], "namespace": "YAHOO.widget", "module": "autocomplete", "guessedname": "DS_ScriptNode", "methods": {"_bumpPendingDown": {"private": "", "description": "Any success\/failure response should decrement counter.", "guessedname": "_bumpPendingDown", "guessedtype": "function"}, "doQuery": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Queries the live data source. Results are passed back to a callback function.", "guessedname": "doQuery", "guessedtype": "function"}, "handleResponse": {"params": [{"type": "Object", "name": "oResponse", "description": "  The raw response data to parse."}, {"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Parses JSON response data into an array of result objects and passes it to\r\nthe callback function.", "guessedname": "handleResponse", "guessedtype": "function"}}, "extends": "YAHOO.widget.DataSource", "superclass": "YAHOO.widget.DataSource", "file": "DataSource.js", "guessedtype": "function", "shortname": "DS_ScriptNode", "properties": {"_nId": {"description": "Unique ID to track requests.", "private": "", "static": "", "guessedname": "_nId", "guessedtype": "property", "type": "Number"}, "_nPending": {"description": "Counter for pending requests. When this is 0, it is safe to purge callbacks\r\narray.", "private": "", "static": "", "guessedname": "_nPending", "guessedtype": "property", "type": "Number"}, "scriptQueryParam": {"default": "\"query\"", "type": "String", "description": "Query string parameter name sent to scriptURI. For instance, requests will be\r\nsent to &#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=queryString", "guessedname": "scriptQueryParam", "guessedtype": "property"}, "scriptCallbackParam": {"default": "\"callback\"", "type": "String", "description": "Callback string parameter name sent to scriptURI. For instance, requests will be\r\nsent to &#60;scriptURI&#62;?&#60;scriptCallbackParam&#62;=callbackFunction", "guessedname": "scriptCallbackParam", "guessedtype": "property"}, "getUtility": {"default": "YAHOO.util.Get", "type": "Object", "description": "Alias to YUI Get Utility. Allows implementers to specify their own\r\nsubclasses of the YUI Get Utility.", "guessedname": "getUtility", "guessedtype": "property"}, "scriptURI": {"type": "String", "description": "URI to the script that returns data.", "guessedname": "scriptURI", "guessedtype": "property"}, "callbacks": {"type": "Function[]", "static": "", "description": "Global array of callback functions, one for each request sent.", "guessedname": "callbacks", "guessedtype": "property"}, "asyncMode": {"default": "\"allowAll\"", "type": "String", "description": "Defines request\/response management in the following manner:\r\n<dl>\r\n<!--<dt>queueRequests<\/dt>\r\n<dd>If a request is already in progress, wait until response is returned before sending the next request.<\/dd>\r\n<dt>cancelStaleRequests<\/dt>\r\n<dd>If a request is already in progress, cancel it before sending the next request.<\/dd>-->\r\n<dt>ignoreStaleResponses<\/dt>\r\n<dd>Send all requests, but handle only the response for the most recently sent request.<\/dd>\r\n<dt>allowAll<\/dt>\r\n<dd>Send all requests and handle all responses.<\/dd>\r\n<\/dl>", "guessedname": "asyncMode", "guessedtype": "property"}}, "description": "Implementation of YAHOO.widget.DataSource using the Get Utility to generate\r\ndynamic SCRIPT nodes for data retrieval."}, "YAHOO.widget.Calendar_Core": {"name": "YAHOO.widget.Calendar_Core", "deprecated": "The old Calendar_Core class is no longer necessary.", "namespace": "YAHOO.widget", "module": "calendar", "guessedname": "Calendar_Core", "extends": "YAHOO.widget.Calendar", "superclass": "YAHOO.widget.Calendar", "file": "Calendar.js", "guessedtype": "property", "shortname": "Calendar_Core"}, "YAHOO.widget.Button": {"name": "YAHOO.widget.Button", "configs": {"srcelement": {"default": "null", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>|String", "description": "Object reference to the HTML element (either \n<code>&#60;input&#62;<\/code> or <code>&#60;span&#62;<\/code>) \nused to create the button."}, "checked": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the button is checked. \nApplies only to buttons of type \"radio\" and \"checkbox.\""}, "name": {"default": "null", "type": "String", "description": "String specifying the name for the button."}, "title": {"default": "null", "type": "String", "description": "String specifying the title for the button."}, "menu": {"default": "null", "type": "<a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu<\/a>|<a \nhref=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay<\/a>|<a \nhref=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-58190037\">HTMLElement<\/a>|String|Array", "description": "Object specifying the menu for the button.  \nThe value can be one of the following:\n<ul>\n<li>Object specifying a <a href=\"YAHOO.widget.Menu.html\">\nYAHOO.widget.Menu<\/a> instance.<\/li>\n<li>Object specifying a <a href=\"YAHOO.widget.Overlay.html\">\nYAHOO.widget.Overlay<\/a> instance.<\/li>\n<li>String specifying the id attribute of the <code>&#60;div&#62;\n<\/code> element used to create the menu.  By default the menu \nwill be created as an instance of \n<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay<\/a>.  \nIf the <a href=\"YAHOO.widget.Menu.html#CSS_CLASS_NAME\">\ndefault CSS class name for YAHOO.widget.Menu<\/a> is applied to \nthe <code>&#60;div&#62;<\/code> element, it will be created as an\ninstance of <a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu\n<\/a>.<\/li><li>String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element used to create the menu.\n<\/li><li>Object specifying the <code>&#60;div&#62;<\/code> element\nused to create the menu.<\/li>\n<li>Object specifying the <code>&#60;select&#62;<\/code> element\nused to create the menu.<\/li>\n<li>Array of object literals, each representing a set of \n<a href=\"YAHOO.widget.MenuItem.html\">YAHOO.widget.MenuItem<\/a> \nconfiguration attributes.<\/li>\n<li>Array of strings representing the text labels for each menu \nitem in the menu.<\/li>\n<\/ul>"}, "focusmenu": {"default": "true", "type": "Boolean", "description": "Boolean indicating whether or not the button's menu \nshould be focused when it is made visible."}, "value": {"default": "null", "type": "Object", "description": "Object specifying the value for the button."}, "label": {"default": "null", "type": "String", "description": "String specifying the button's text label \nor innerHTML."}, "disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the button should be disabled.  \n(Disabled buttons are dimmed and will not respond to user input \nor fire events.  Does not apply to button's of type \"link.\")"}, "href": {"type": "String", "description": "String specifying the href for the button.  Applies\nonly to buttons of type \"link.\""}, "selectedMenuItem": {"default": "null", "type": "Number", "description": "Object representing the item in the button's menu \nthat is currently selected."}, "onclick": {"default": "null", "type": "Object", "description": "Object literal representing the code to be executed  \nwhen the button is clicked.  Format:<br> <code> {<br> \n<strong>fn:<\/strong> Function,   &#47;&#47; The handler to call \nwhen the event fires.<br> <strong>obj:<\/strong> Object, \n&#47;&#47; An object to pass back to the handler.<br> \n<strong>scope:<\/strong> Object &#47;&#47;  The object to use \nfor the scope of the handler.<br> } <\/code>"}, "target": {"type": "String", "description": "String specifying the target for the button.  \nApplies only to buttons of type \"link.\""}, "container": {"default": "null", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>|String", "description": "HTML element reference or string specifying the id \nattribute of the HTML element that the button's markup should be \nrendered into."}, "lazyloadmenu": {"default": "true", "type": "Boolean", "description": "Boolean indicating the value to set for the \n<a href=\"YAHOO.widget.Menu.html#lazyLoad\">\"lazyload\"<\/a>\nconfiguration property of the button's menu.  Setting \n\"lazyloadmenu\" to <code>true <\/code> will defer rendering of \nthe button's menu until the first time it is made visible.  \nIf \"lazyloadmenu\" is set to <code>false<\/code>, the button's \nmenu will be rendered immediately if the button is in the \ndocument, or in response to the button's \"appendTo\" event if \nthe button is not yet in the document.  In either case, the \nmenu is rendered into the button's parent HTML element.  \n<em>This attribute does not apply if a \n<a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu<\/a> or \n<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay<\/a> \ninstance is passed as the value of the button's \"menu\" \nconfiguration attribute. <a href=\"YAHOO.widget.Menu.html\">\nYAHOO.widget.Menu<\/a> or <a href=\"YAHOO.widget.Overlay.html\">\nYAHOO.widget.Overlay<\/a> instances should be rendered before \nbeing set as the value for the \"menu\" configuration \nattribute.<\/em>"}, "menuclassname": {"default": "\"yui-button-menu\"", "type": "String", "description": "String representing the CSS class name to be \napplied to the root element of the button's menu."}, "type": {"default": "\"push\"", "type": "String", "description": "String specifying the button's type.  Possible \nvalues are: \"push,\" \"link,\" \"submit,\" \"reset,\" \"checkbox,\" \n\"radio,\" \"menu,\" and \"split.\""}, "tabindex": {"default": "null", "type": "Number", "description": "Number specifying the tabindex for the button."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;input&#62;<\/code>, <code>&#60;button&#62;<\/code>,\n<code>&#60;a&#62;<\/code>, or <code>&#60;span&#62;<\/code> element to \nbe used to create the button."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-6043025\">HTMLInputElement<\/a>|<a href=\"http:\/\/www.w3.org\n\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html#ID-34812697\">\nHTMLButtonElement<\/a>|<a href=\"\nhttp:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html#\nID-33759296\">HTMLElement<\/a>", "name": "p_oElement", "description": " Object reference for the \n<code>&#60;input&#62;<\/code>, <code>&#60;button&#62;<\/code>, \n<code>&#60;a&#62;<\/code>, or <code>&#60;span&#62;<\/code> element to be \nused to create the button."}, {"type": "Object", "name": "p_oElement", "description": " Object literal specifying a set of   \nconfiguration attributes used to create the button."}, {"type": "Object", "name": "p_oAttributes", "description": " Optional. Object literal specifying a set  \nof configuration attributes used to create the button."}], "description": "The Button class creates a rich, graphical button."}], "namespace": "YAHOO.widget", "module": "button", "events": {"beforeDisabledChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDisabledChangeEvent", "description": "Fires before the value for the configuration attribute 'disabled' changes. Return false to cancel the attribute change."}, "beforeMenuChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeMenuChangeEvent", "description": "Fires before the value for the configuration attribute 'menu' changes. Return false to cancel the attribute change."}, "focusmenuChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "focusmenuChangeEvent", "description": "Fires when the value for the configuration attribute 'focusmenu' changes."}, "beforeFocusmenuChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeFocusmenuChangeEvent", "description": "Fires before the value for the configuration attribute 'focusmenu' changes. Return false to cancel the attribute change."}, "beforeMenuclassnameChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeMenuclassnameChangeEvent", "description": "Fires before the value for the configuration attribute 'menuclassname' changes. Return false to cancel the attribute change."}, "selectedMenuItemChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "selectedMenuItemChangeEvent", "description": "Fires when the value for the configuration attribute 'selectedMenuItem' changes."}, "containerChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "containerChangeEvent", "description": "Fires when the value for the configuration attribute 'container' changes."}, "beforeTabindexChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTabindexChangeEvent", "description": "Fires before the value for the configuration attribute 'tabindex' changes. Return false to cancel the attribute change."}, "menuChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "menuChangeEvent", "description": "Fires when the value for the configuration attribute 'menu' changes."}, "beforeTargetChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTargetChangeEvent", "description": "Fires before the value for the configuration attribute 'target' changes. Return false to cancel the attribute change."}, "beforeTitleChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTitleChangeEvent", "description": "Fires before the value for the configuration attribute 'title' changes. Return false to cancel the attribute change."}, "titleChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "titleChangeEvent", "description": "Fires when the value for the configuration attribute 'title' changes."}, "beforeSrcelementChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeSrcelementChangeEvent", "description": "Fires before the value for the configuration attribute 'srcelement' changes. Return false to cancel the attribute change."}, "beforeValueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeValueChangeEvent", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}, "beforeContainerChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeContainerChangeEvent", "description": "Fires before the value for the configuration attribute 'container' changes. Return false to cancel the attribute change."}, "beforeCheckedChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeCheckedChangeEvent", "description": "Fires before the value for the configuration attribute 'checked' changes. Return false to cancel the attribute change."}, "beforeOnclickChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeOnclickChangeEvent", "description": "Fires before the value for the configuration attribute 'onclick' changes. Return false to cancel the attribute change."}, "tabindexChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "tabindexChangeEvent", "description": "Fires when the value for the configuration attribute 'tabindex' changes."}, "beforeLabelChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeLabelChangeEvent", "description": "Fires before the value for the configuration attribute 'label' changes. Return false to cancel the attribute change."}, "beforeTypeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTypeChangeEvent", "description": "Fires before the value for the configuration attribute 'type' changes. Return false to cancel the attribute change."}, "onclickChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "onclickChangeEvent", "description": "Fires when the value for the configuration attribute 'onclick' changes."}, "blur": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item loses the input focus.  Passes back  \na single object representing the original DOM event object passed back by \nthe event utility (YAHOO.util.Event) when the event was fired.  See \n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> for  \nmore information on listening for this event."}, "disabledChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "disabledChangeEvent", "description": "Fires when the value for the configuration attribute 'disabled' changes."}, "option": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user invokes the button's option.  Passes \nback a single object representing the original DOM event (either \n\"mousedown\" or \"keydown\") that caused the \"option\" event to fire.  See \n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> \nfor more information on listening for this event."}, "typeChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "typeChangeEvent", "description": "Fires when the value for the configuration attribute 'type' changes."}, "focus": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item receives focus.  Passes back a  \nsingle object representing the original DOM event object passed back by \nthe event utility (YAHOO.util.Event) when the event was fired.  See \n<a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a> \nfor more information on listening for this event."}, "targetChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "targetChangeEvent", "description": "Fires when the value for the configuration attribute 'target' changes."}, "hrefChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "hrefChangeEvent", "description": "Fires when the value for the configuration attribute 'href' changes."}, "beforeSelectedmenuitemChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeSelectedmenuitemChangeEvent", "description": "Fires before the value for the configuration attribute 'selectedMenuItem' changes. Return false to cancel the attribute change."}, "beforeNameChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeNameChangeEvent", "description": "Fires before the value for the configuration attribute 'name' changes. Return false to cancel the attribute change."}, "beforeHrefChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeHrefChangeEvent", "description": "Fires before the value for the configuration attribute 'href' changes. Return false to cancel the attribute change."}, "menuclassnameChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "menuclassnameChangeEvent", "description": "Fires when the value for the configuration attribute 'menuclassname' changes."}, "labelChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "labelChangeEvent", "description": "Fires when the value for the configuration attribute 'label' changes."}, "lazyloadmenuChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "lazyloadmenuChangeEvent", "description": "Fires when the value for the configuration attribute 'lazyloadmenu' changes."}, "checkedChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "checkedChangeEvent", "description": "Fires when the value for the configuration attribute 'checked' changes."}, "srcelementChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "srcelementChangeEvent", "description": "Fires when the value for the configuration attribute 'srcelement' changes."}, "nameChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "nameChangeEvent", "description": "Fires when the value for the configuration attribute 'name' changes."}, "valueChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChangeEvent", "description": "Fires when the value for the configuration attribute 'value' changes."}, "beforeLazyloadmenuChangeEvent": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeLazyloadmenuChangeEvent", "description": "Fires before the value for the configuration attribute 'lazyloadmenu' changes. Return false to cancel the attribute change."}}, "methods": {"_showMenu": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object \npassed back by the event utility (YAHOO.util.Event) that triggered \nthe display of the menu."}], "description": "Shows the button's menu.", "guessedname": "_showMenu", "guessedtype": "function"}, "submitForm": {"protected": "", "return": {"type": "Boolean", "description": ""}, "description": "Submits the form to which the button belongs.  Returns  \ntrue if the form was submitted successfully, false if the submission \nwas cancelled.", "guessedname": "submitForm", "guessedtype": "function"}, "createInputElement": {"return": {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-6043025\">HTMLInputElement<\/a>", "description": ""}, "params": [{"type": "String", "name": "p_sType", "description": " String specifying the type of \n<code>&#60;input&#62;<\/code> element to create."}, {"type": "String", "name": "p_sName", "description": " String specifying the name of \n<code>&#60;input&#62;<\/code> element to create."}, {"type": "String", "name": "p_sValue", "description": " String specifying the value of \n<code>&#60;input&#62;<\/code> element to create."}, {"type": "String", "name": "p_bChecked", "description": " Boolean specifying if the  \n<code>&#60;input&#62;<\/code> element is to be checked."}], "description": "Creates an <code>&#60;input&#62;<\/code> element of the \nspecified type.", "private": ""}, "createButtonElement": {"return": {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>", "description": ""}, "params": [{"type": "String", "name": "p_sType", "description": " String indicating the type of element \nto create."}], "description": "Creates the button's HTML elements.", "guessedname": "createButtonElement", "guessedtype": "function"}, "_isActivationKey": {"return": {"type": "Boolean", "description": ""}, "description": "Determines if the specified keycode is one that toggles  \nthe button's \"active\" state.", "protected": "", "params": [{"type": "Number", "name": "p_nKeyCode", "description": " Number representing the keycode to \nbe evaluated."}], "guessedname": "_isActivationKey", "guessedtype": "function"}, "hasFocus": {"return": {"type": "Boolean", "description": ""}, "description": "Returns a boolean indicating whether or not the button \nhas focus.", "guessedname": "hasFocus", "guessedtype": "function"}, "getForm": {"return": {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-\n20000929\/level-one-html.html#ID-40002357\">HTMLFormElement<\/a>", "description": ""}, "description": "Returns a reference to the button's parent form.", "guessedname": "getForm", "guessedtype": "function"}, "_onFormReset": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event \nobject passed back by the event utility (YAHOO.util.Event)."}], "description": "\"reset\" event handler for the button's form.", "guessedname": "_onFormReset", "guessedtype": "function"}, "_addListenersToForm": {"protected": "", "description": "Adds event handlers to the button's form.", "guessedname": "_addListenersToForm", "guessedtype": "function"}, "_onMouseUp": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mouseup\" event handler for the button.", "guessedname": "_onMouseUp", "guessedtype": "function"}, "_onOption": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"option\" event handler for the button.", "guessedname": "_onOption", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "p_oAttributes", "description": " Object literal specifying a set of \nconfiguration attributes used to create the button."}], "description": "Initializes all of the configuration attributes used to  \ncreate the button.", "guessedname": "initAttributes", "guessedtype": "function"}, "_setTabIndex": {"protected": "", "params": [{"type": "Number", "name": "p_nTabIndex", "description": " Number indicating the value for the \nbutton's \"tabindex\" attribute."}], "description": "Sets the value of the button's \"tabindex\" attribute.", "guessedname": "_setTabIndex", "guessedtype": "function"}, "_onDocumentKeyUp": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"keyup\" event handler for the document.", "guessedname": "_onDocumentKeyUp", "guessedtype": "function"}, "_onClick": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"click\" event handler for the button.", "guessedname": "_onClick", "guessedtype": "function"}, "removeStateCSSClasses": {"description": "Removes state-specific CSS classes to the button's root \nDOM element.", "guessedname": "removeStateCSSClasses", "guessedtype": "function"}, "YAHOO.widget.Button.onFormKeyPress": {"params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."}], "description": "\"keypress\" event handler for the button's form.", "guessedname": "onFormKeyPress", "guessedtype": "function"}, "YAHOO.widget.Button.addHiddenFieldsToForm": {"params": [{"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-40002357\">HTMLFormElement<\/a>", "name": "p_oForm", "description": " Object reference \nfor the form to search."}], "description": "Searches the specified form and adds hidden fields for  \ninstances of YAHOO.widget.Button that are of type \"radio,\" \"checkbox,\" \n\"menu,\" and \"split.\"", "guessedname": "addHiddenFieldsToForm", "guessedtype": "function"}, "getHiddenFields": {"return": {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-6043025\">HTMLInputElement<\/a>|Array", "description": ""}, "description": "Returns an <code>&#60;input&#62;<\/code> element or \narray of form elements used to represent the button when its parent \nform is submitted.", "guessedname": "getHiddenFields", "guessedtype": "function"}, "YAHOO.widget.Button.getButton": {"return": {"type": "YAHOO.widget.Button", "description": ""}, "params": [{"type": "String", "name": "p_sId", "description": " String specifying the id of the root node of the \nHTML element representing the button to be retrieved."}], "description": "Returns a button with the specified id.", "guessedname": "getButton", "guessedtype": "function"}, "_setDisabled": {"protected": "", "params": [{"type": "Boolean", "name": "p_bDisabled", "description": " Boolean indicating the value for \nthe button's \"disabled\" attribute."}], "description": "Sets the value of the button's \"disabled\" attribute.", "guessedname": "_setDisabled", "guessedtype": "function"}, "getMenu": {"return": {"type": "<a href=\"YAHOO.widget.Overlay.html\">\nYAHOO.widget.Overlay<\/a>|<a \nhref=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu<\/a>", "description": ""}, "description": "Returns a reference to the button's menu.", "guessedname": "getMenu", "guessedtype": "function"}, "_setChecked": {"protected": "", "params": [{"type": "Boolean", "name": "p_bChecked", "description": " Boolean indicating the value for  \nthe button's \"checked\" attribute."}], "description": "Sets the value of the button's \"target\" attribute.", "guessedname": "_setChecked", "guessedtype": "function"}, "_onMenuClick": {"guessedname": "_onMenuClick", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"click\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;input&#62;<\/code>, <code>&#60;button&#62;<\/code>,\n<code>&#60;a&#62;<\/code>, or <code>&#60;span&#62;<\/code> element to \nbe used to create the button."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-6043025\">HTMLInputElement<\/a>|<a href=\"http:\/\/\nwww.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html\n#ID-34812697\">HTMLButtonElement<\/a>|<a href=\"http:\/\/www.w3.org\/TR\n\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html#ID-33759296\">\nHTMLElement<\/a>", "name": "p_oElement", "description": " Object reference for the \n<code>&#60;input&#62;<\/code>, <code>&#60;button&#62;<\/code>, \n<code>&#60;a&#62;<\/code>, or <code>&#60;span&#62;<\/code> element to be \nused to create the button."}, {"type": "Object", "name": "p_oElement", "description": " Object literal specifying a set of \nconfiguration attributes used to create the button."}, {"type": "Object", "name": "p_oAttributes", "description": " Optional. Object literal specifying a \nset of configuration attributes used to create the button."}], "description": "The Button class's initialization method.", "guessedname": "init", "guessedtype": "function"}, "_onMenuItemAdded": {"guessedname": "_onMenuItemAdded", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event\nwas fired."}, {"type": "<a href=\"YAHOO.widget.MenuItem.html\">\nYAHOO.widget.MenuItem<\/a>", "name": "p_oItem", "description": " Object representing the menu \nitem that subscribed to the event."}], "description": "\"itemadded\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "_setTitle": {"protected": "", "params": [{"type": "String", "name": "p_nTabIndex", "description": " Number indicating the value for \nthe button's \"title\" attribute."}], "description": "Sets the value of the button's \"title\" attribute.", "guessedname": "_setTitle", "guessedtype": "function"}, "_setHref": {"protected": "", "params": [{"type": "String", "name": "p_sHref", "description": " String indicating the value for the button's \n\"href\" attribute."}], "description": "Sets the value of the button's \"href\" attribute.", "guessedname": "_setHref", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the button.", "guessedname": "toString", "guessedtype": "function"}, "isActive": {"return": {"type": "Boolean", "description": ""}, "description": "Returns a boolean indicating whether or not the button \nis active.", "guessedname": "isActive", "guessedtype": "function"}, "_onMouseDown": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mousedown\" event handler for the button.", "guessedname": "_onMouseDown", "guessedtype": "function"}, "destroy": {"description": "Removes the button's element from its parent element and \nremoves all event handlers.", "guessedname": "destroy", "guessedtype": "function"}, "_onMenuHide": {"guessedname": "_onMenuHide", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}], "description": "\"hide\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "_setMenu": {"protected": "", "params": [{"type": "Object", "name": "p_oMenu", "description": " Object indicating the value for the button's \n\"menu\" attribute."}], "description": "Sets the value of the button's \"menu\" attribute.", "guessedname": "_setMenu", "guessedtype": "function"}, "_onKeyUp": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"keyup\" event handler for the button.", "guessedname": "_onKeyUp", "guessedtype": "function"}, "_isSplitButtonOptionKey": {"return": {"type": "Boolean", "description": ""}, "description": "Determines if the specified keycode is one that toggles  \nthe display of the split button's menu.", "protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "guessedname": "_isSplitButtonOptionKey", "guessedtype": "function"}, "_onAppendTo": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"appendTo\" event handler for the button.", "guessedname": "_onAppendTo", "guessedtype": "function"}, "_onFocus": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"focus\" event handler for the button.", "guessedname": "_onFocus", "guessedtype": "function"}, "_setOnClick": {"protected": "", "params": [{"type": "Object", "name": "p_oObject", "description": " Object indicating the value for the button's \n\"onclick\" attribute."}], "description": "Sets the value of the button's \"onclick\" attribute.", "guessedname": "_setOnClick", "guessedtype": "function"}, "blur": {"description": "Causes the button to lose focus and fires the button's\n\"blur\" event.", "guessedname": "blur", "guessedtype": "function"}, "_onMenuShow": {"guessedname": "_onMenuShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}], "description": "\"show\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "setAttributesFromSrcElement": {"params": [{"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-6043025\">HTMLInputElement<\/a>|<a href=\"http:\/\/www.w3.org\/\nTR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html#ID-\n48250443\">HTMLAnchorElement<\/a>", "name": "p_oElement", "description": " Object reference to the HTML \nelement (either <code>&#60;input&#62;<\/code> or <code>&#60;span&#62;\n<\/code>) used to create the button."}, {"type": "Object", "name": "p_oAttributes", "description": " Object reference for the collection of \nconfiguration attributes used to create the button."}], "description": "Gets the values for all the attributes of the source element \n(either <code>&#60;input&#62;<\/code> or <code>&#60;a&#62;<\/code>) that \nmap to Button configuration attributes and sets them into a collection \nthat is passed to the Button constructor.", "private": ""}, "focus": {"description": "Causes the button to receive the focus and fires the \nbutton's \"focus\" event.", "guessedname": "focus", "guessedtype": "function"}, "setFormElementProperties": {"description": "Gets the value of the attributes from the form element  \nand sets them into the collection of configuration attributes used to \nconfigure the button.", "private": ""}, "_onOverlayBeforeShow": {"guessedname": "_onOverlayBeforeShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}], "description": "\"beforeshow\" event handler for the \n<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay<\/a> instance \nserving as the button's menu.", "private": "", "guessedtype": "function"}, "_hideMenu": {"protected": "", "description": "Hides the button's menu.", "guessedname": "_hideMenu", "guessedtype": "function"}, "_setLabel": {"protected": "", "params": [{"type": "String", "name": "p_sLabel", "description": " String indicating the value for the button's \n\"label\" attribute."}], "description": "Sets the value of the button's \"label\" attribute.", "guessedname": "_setLabel", "guessedtype": "function"}, "_setType": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String indicating the value for the button's \n\"type\" attribute."}], "description": "Sets the value of the button's \"type\" attribute.", "guessedname": "_setType", "guessedtype": "function"}, "_onMenuRender": {"guessedname": "_onMenuRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the  \nevent thatwas fired."}], "description": "\"render\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "_onDocumentMouseDown": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mousedown\" event handler for the document.", "guessedname": "_onDocumentMouseDown", "guessedtype": "function"}, "_setSelectedMenuItem": {"protected": "", "params": [{"type": "Number", "name": "p_nIndex", "description": " Number representing the index of the item \nin the button's menu that is currently selected."}], "description": "Sets the value of the button's \n\"selectedMenuItem\" attribute.", "guessedname": "_setSelectedMenuItem", "guessedtype": "function"}, "_onMenuKeyDown": {"guessedname": "_onMenuKeyDown", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"keydown\" event handler for the button's menu.", "private": "", "guessedtype": "function"}, "createHiddenFields": {"return": {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-6043025\">HTMLInputElement<\/a>|Array", "description": ""}, "description": "Creates the button's hidden form field and appends it \nto its parent form.", "guessedname": "createHiddenFields", "guessedtype": "function"}, "addStateCSSClasses": {"description": "Appends state-specific CSS classes to the button's root \nDOM element.", "guessedname": "addStateCSSClasses", "guessedtype": "function"}, "_onMenuItemSelected": {"guessedname": "_onMenuItemSelected", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}, {"type": "MenuItem", "name": "p_oItem", "description": " Object representing the menu item that\nsubscribed to the event."}], "description": "\"selectedchange\" event handler for each item in the \nbutton's menu.", "private": "", "guessedtype": "function"}, "_onMouseOver": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mouseover\" event handler for the button.", "guessedname": "_onMouseOver", "guessedtype": "function"}, "_onMouseOut": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mouseout\" event handler for the button.", "guessedname": "_onMouseOut", "guessedtype": "function"}, "initConfig": {"params": [{"type": "Object", "name": "Object", "description": " representing the button's set of \nconfiguration attributes."}], "description": "Initializes the set of configuration attributes that are \nused to instantiate the button.", "private": ""}, "_setTarget": {"protected": "", "params": [{"type": "String", "name": "p_sTarget", "description": " String indicating the value for the button's \n\"target\" attribute."}], "description": "Sets the value of the button's \"target\" attribute.", "guessedname": "_setTarget", "guessedtype": "function"}, "removeHiddenFields": {"description": "Removes the button's hidden form field(s) from its \nparent form.", "guessedname": "removeHiddenFields", "guessedtype": "function"}, "_onDocumentMouseUp": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"mouseup\" event handler for the button.", "guessedname": "_onDocumentMouseUp", "guessedtype": "function"}, "setAttributeFromDOMAttribute": {"params": [{"type": "String", "name": "p_sAttribute", "description": " String representing the name of the \nattribute to retrieve from the DOM element."}], "description": "Gets the value of the specified DOM attribute and sets it \ninto the collection of configuration attributes used to configure \nthe button.", "private": ""}, "_onKeyDown": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"keydown\" event handler for the button.", "guessedname": "_onKeyDown", "guessedtype": "function"}, "_onBlur": {"protected": "", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object  \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"blur\" event handler for the button.", "guessedname": "_onBlur", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "button.js", "shortname": "Button", "properties": {"RADIO_DEFAULT_TITLE": {"description": "String representing the default title applied to buttons \nof type \"radio.\"", "default": "\"Unchecked.  Click to check.\"", "guessedname": "RADIO_DEFAULT_TITLE", "guessedtype": "property", "type": "String", "final": ""}, "RADIO_CHECKED_TITLE": {"description": "String representing the title applied to buttons of \ntype \"radio\" when checked.", "default": "\"Checked.  Click another button to uncheck\"", "guessedname": "RADIO_CHECKED_TITLE", "guessedtype": "property", "type": "String", "final": ""}, "CHECKBOX_CHECKED_TITLE": {"description": "String representing the title applied to buttons of type \n\"checkbox\" when checked.", "default": "\"Checked.  Click to uncheck.\"", "guessedname": "CHECKBOX_CHECKED_TITLE", "guessedtype": "property", "type": "String", "final": ""}, "SPLITBUTTON_OPTION_VISIBLE_TITLE": {"description": "String representing the title applied to buttons of type \n\"split\" when the button's menu is visible.", "default": "\"Menu expanded.  Press Esc or Ctrl + Shift + M to hide \nthe menu.\"", "guessedname": "SPLITBUTTON_OPTION_VISIBLE_TITLE", "guessedtype": "property", "type": "String", "final": ""}, "SUBMIT_TITLE": {"description": "String representing the title applied to buttons of \ntype \"submit.\"", "default": "\"Click to submit form.\"", "guessedname": "SUBMIT_TITLE", "guessedtype": "property", "type": "String", "final": ""}, "ACTIVATION_KEYS": {"description": "Array of numbers representing keys that (when presed) \ntoggle the button's \"active\" state.", "default": "[13, 32]", "guessedname": "ACTIVATION_KEYS", "guessedtype": "property", "type": "Array", "final": ""}, "SPLITBUTTON_DEFAULT_TITLE": {"description": "String representing the default title applied to \nbuttons of type \"split.\"", "default": "\"Menu collapsed.  Click inside option region or press \nCtrl + Shift + M to show the menu.\"", "guessedname": "SPLITBUTTON_DEFAULT_TITLE", "guessedtype": "property", "type": "String", "final": ""}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to  \nthe button's root element.", "default": "\"yui-button\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "_hiddenFields": {"description": "Object reference to the <code>&#60;input&#62;<\/code>  \nelement, or array of HTML form elements used to represent the button\nwhen its parent form is submitted.", "default": "null", "protected": "", "guessedname": "_hiddenFields", "guessedtype": "property", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-6043025\">HTMLInputElement<\/a>|Array"}, "CHECKBOX_DEFAULT_TITLE": {"description": "String representing the default title applied to \nbuttons of type \"checkbox.\"", "default": "\"Unchecked.  Click to check.\"", "guessedname": "CHECKBOX_DEFAULT_TITLE", "guessedtype": "property", "type": "String", "final": ""}, "_activationButtonPressed": {"description": "Boolean indicating if the mouse button that toggles \nthe button's \"active\" state has been pressed.", "default": "false", "protected": "", "guessedname": "_activationButtonPressed", "guessedtype": "property", "type": "Boolean"}, "_button": {"description": "Object reference to the button's internal \n<code>&#60;a&#62;<\/code> or <code>&#60;button&#62;<\/code> element.", "default": "null", "protected": "", "guessedname": "_button", "guessedtype": "property", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-48250443\">HTMLAnchorElement<\/a>|<a href=\"\nhttp:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html\n#ID-34812697\">HTMLButtonElement<\/a>"}, "MENUBUTTON_MENU_VISIBLE_TITLE": {"description": "String representing the title applied to buttons of type \n\"menu\" when the button's menu is visible.", "default": "\"Menu expanded.  Click or press Esc to collapse.\"", "guessedname": "MENUBUTTON_MENU_VISIBLE_TITLE", "guessedtype": "property", "type": "String", "final": ""}, "_hasKeyEventHandlers": {"description": "Boolean indicating if the button's \"blur\", \"keydown\" and \n\"keyup\" event handlers are assigned", "default": "false", "protected": "", "guessedname": "_hasKeyEventHandlers", "guessedtype": "property", "type": "Boolean"}, "MENUBUTTON_DEFAULT_TITLE": {"description": "String representing the default title applied to \nbuttons of type \"menu.\"", "default": "\"Menu collapsed.  Click to expand.\"", "guessedname": "MENUBUTTON_DEFAULT_TITLE", "guessedtype": "property", "type": "String", "final": ""}, "_menu": {"description": "Object reference to the button's menu.", "default": "null", "protected": "", "guessedname": "_menu", "guessedtype": "property", "type": "{<a href=\"YAHOO.widget.Overlay.html\">YAHOO.widget.Overlay<\/a>|\n<a href=\"YAHOO.widget.Menu.html\">YAHOO.widget.Menu<\/a>}"}, "_onclickAttributeValue": {"description": "Object reference to the button's current value for the \n\"onclick\" configuration attribute.", "default": "null", "protected": "", "guessedname": "_onclickAttributeValue", "guessedtype": "property", "type": "Object"}, "NODE_NAME": {"description": "The name of the node to be used for the button's \nroot element.", "default": "\"SPAN\"", "guessedname": "NODE_NAME", "guessedtype": "property", "type": "String", "final": ""}, "_activationKeyPressed": {"description": "Boolean indicating if the key(s) that toggle the button's \n\"active\" state have been pressed.", "default": "false", "protected": "", "guessedname": "_activationKeyPressed", "guessedtype": "property", "type": "Boolean"}, "_hasMouseEventHandlers": {"description": "Boolean indicating if the button's \"mouseout,\" \n\"mousedown,\" and \"mouseup\" event handlers are assigned", "default": "false", "protected": "", "guessedname": "_hasMouseEventHandlers", "guessedtype": "property", "type": "Boolean"}, "CHECK_ACTIVATION_KEYS": {"description": "Array of numbers representing keys that (when pressed) \ntoggle the button's \"checked\" attribute.", "default": "[32]", "guessedname": "CHECK_ACTIVATION_KEYS", "guessedtype": "property", "type": "Array", "final": ""}, "OPTION_AREA_WIDTH": {"description": "Width (in pixels) of the area of a split button that  \nwhen pressed will display a menu.", "default": "20", "guessedname": "OPTION_AREA_WIDTH", "guessedtype": "property", "type": "Number", "final": ""}}, "description": "The Button class creates a rich, graphical button."}, "YAHOO.widget.AutoComplete": {"name": "YAHOO.widget.AutoComplete", "constructors": [{"params": [{"type": "HTMLElement", "name": "elInput", "description": "  DOM element reference of an input field."}, {"type": "String", "name": "elInput", "description": "  String ID of an input field."}, {"type": "HTMLElement", "name": "elContainer", "description": "  DOM element reference of an existing DIV."}, {"type": "String", "name": "elContainer", "description": "  String ID of an existing DIV."}, {"type": "YAHOO.widget.DataSource", "name": "oDataSource", "description": "  DataSource instance."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of configuration params."}], "description": "The AutoComplete class provides the customizable functionality of a plug-and-play DHTML\nauto completion widget.  Some key features:\n<ul>\n<li>Navigate with up\/down arrow keys and\/or mouse to pick a selection<\/li>\n<li>The drop down container can \"roll down\" or \"fly out\" via configurable\nanimation<\/li>\n<li>UI look-and-feel customizable through CSS, including container\nattributes, borders, position, fonts, etc<\/li>\n<\/ul>"}], "namespace": "YAHOO.widget", "module": "autocomplete", "events": {"dataErrorEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}], "description": "Fired when the AutoComplete instance does not receive query results from the\nDataSource due to an error.", "guessedname": "dataErrorEvent", "guessedtype": "property"}, "dataReturnEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "  Results array."}], "description": "Fired when the AutoComplete instance receives query results from the data\nsource.", "guessedname": "dataReturnEvent", "guessedtype": "property"}, "containerExpandEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the results container is expanded.", "guessedname": "containerExpandEvent", "guessedtype": "property"}, "itemArrowToEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item arrowed to."}], "description": "Fired when result item has been arrowed to.", "guessedname": "itemArrowToEvent", "guessedtype": "property"}, "itemArrowFromEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item arrowed from."}], "description": "Fired when result item has been arrowed away from.", "guessedname": "itemArrowFromEvent", "guessedtype": "property"}, "typeAheadEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "String", "name": "sPrefill", "description": "  The prefill string."}], "description": "Fired when the input field has been prefilled by the type-ahead\nfeature.", "guessedname": "typeAheadEvent", "guessedtype": "property"}, "textboxFocusEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the input field receives focus.", "guessedname": "textboxFocusEvent", "guessedtype": "property"}, "itemSelectEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The selected &lt;li&gt; element item."}, {"type": "Object", "name": "oData", "description": "  The data returned for the item, either as an object,\nor mapped from the schema into an array."}], "description": "Fired when an item is selected via mouse click, ENTER key, or TAB key.", "guessedname": "itemSelectEvent", "guessedtype": "property"}, "dataRequestEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}], "description": "Fired when the AutoComplete instance makes a query to the DataSource.", "guessedname": "dataRequestEvent", "guessedtype": "property"}, "itemMouseOverEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt element item moused to."}], "description": "Fired when result item has been moused over.", "guessedname": "itemMouseOverEvent", "guessedtype": "property"}, "_sLastTextboxValue": {"guessedname": "_sLastTextboxValue", "type": "String", "description": "Internal tracker to last known textbox value, used to determine whether or not\nto trigger a query via interval for certain IME users.", "private": "", "guessedtype": "property"}, "unmatchedItemSelectEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when a user selection does not match any of the displayed result items.", "guessedname": "unmatchedItemSelectEvent", "guessedtype": "property"}, "selectionEnforceEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired if forceSelection is enabled and the user's input has been cleared\nbecause it did not match one of the returned query results.", "guessedname": "selectionEnforceEvent", "guessedtype": "property"}, "textboxKeyEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "Number", "name": "nKeycode", "description": "  The keycode number."}], "description": "Fired when the input field receives key input.", "guessedname": "textboxKeyEvent", "guessedtype": "property"}, "textboxBlurEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the input field loses focus.", "guessedname": "textboxBlurEvent", "guessedtype": "property"}, "containerCollapseEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the results container is collapsed.", "guessedname": "containerCollapseEvent", "guessedtype": "property"}, "itemMouseOutEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item moused from."}], "description": "Fired when result item has been moused out.", "guessedname": "itemMouseOutEvent", "guessedtype": "property"}}, "guessedname": "AutoComplete", "methods": {"_onTextboxKeyPress": {"guessedname": "_onTextboxKeyPress", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keypress event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keypress events.", "private": "", "guessedtype": "function"}, "_selectText": {"guessedname": "_selectText", "params": [{"type": "HTMLElement", "name": "oTextbox", "description": "  Text input box element in which to select text."}, {"type": "Number", "name": "nStart", "description": "  Starting index of text string to select."}, {"type": "Number", "name": "nEnd", "description": "  Ending index of text selection."}], "description": "Selects text in the input field.", "private": "", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the AutoComplete instance."}, "description": "Public accessor to the unique name of the AutoComplete instance.", "guessedname": "toString", "guessedtype": "function"}, "_toggleContainerHelpers": {"guessedname": "_toggleContainerHelpers", "params": [{"type": "Boolean", "name": "bShow", "description": "  True if container is expanded, false if collapsed"}], "description": "Syncs results container with its helpers.", "private": "", "guessedtype": "function"}, "_initContainer": {"private": "", "description": "Initializes the results container once at object creation", "guessedname": "_initContainer", "guessedtype": "function"}, "_typeAhead": {"guessedname": "_typeAhead", "params": [{"type": "HTMLElement", "name": "oItem", "description": "  The &lt;li&gt; element item whose data populates the input field."}, {"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Updates in the text input box with the first query result as the user types,\nselecting the substring that the user has not typed.", "private": "", "guessedtype": "function"}, "getListItems": {"return": {"type": "HTMLElement[]", "description": "Array of &lt;li&gt; elements within the results container."}, "description": "Public accessor to the internal array of DOM &lt;li&gt; elements that\ndisplay query results within the results container.", "guessedname": "getListItems", "guessedtype": "function"}, "_toggleHighlight": {"guessedname": "_toggleHighlight", "params": [{"type": "HTMLElement", "name": "oNewItem", "description": "  The &lt;li&gt; element item to receive highlight behavior."}, {"type": "String", "name": "sType", "description": "  Type \"mouseover\" will toggle highlight on, and \"mouseout\" will toggle highlight off."}], "description": "Toggles the highlight on or off for an item in the container, and also cleans\nup highlighting of any previous item.", "private": "", "guessedtype": "function"}, "_onTextboxFocus": {"guessedname": "_onTextboxFocus", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The focus event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles text input box receiving focus.", "private": "", "guessedtype": "function"}, "_initList": {"private": "", "description": "Clears out contents of container body and creates up to\nYAHOO.widget.AutoComplete#maxResultsDisplayed &lt;li&gt; elements in an\n&lt;ul&gt; element.", "guessedname": "_initList", "guessedtype": "function"}, "_isIgnoreKey": {"return": {"type": "Boolean", "description": "True if key should be ignored, false otherwise."}, "description": "Whether or not key is functional or should be ignored. Note that the right\narrow key is NOT an ignored key since it triggers queries for certain intl\ncharsets.", "private": "", "params": [{"type": "Number", "name": "nKeycode", "description": "  Code of key pressed."}], "guessedname": "_isIgnoreKey", "guessedtype": "function"}, "_onContainerMouseover": {"guessedname": "_onContainerMouseover", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseover event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container mouseover events.", "private": "", "guessedtype": "function"}, "_togglePrehighlight": {"guessedname": "_togglePrehighlight", "params": [{"type": "HTMLElement", "name": "oNewItem", "description": "  The &lt;li&gt; element item to receive highlight behavior."}, {"type": "String", "name": "sType", "description": "  Type \"mouseover\" will toggle highlight on, and \"mouseout\" will toggle highlight off."}], "description": "Toggles the pre-highlight on or off for an item in the container.", "private": "", "guessedtype": "function"}, "setBody": {"params": [{"type": "String", "name": "sBody", "description": "  HTML markup for results container body."}], "description": "Sets HTML markup for the results container body. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-bd\".", "guessedname": "setBody", "guessedtype": "function"}, "_updateValue": {"guessedname": "_updateValue", "params": [{"type": "HTMLElement", "name": "oItem", "description": "  The &lt;li&gt; element item with which to update the value."}], "description": "Updates the text input box value with selected query result. If a delimiter\nhas been defined, then the value gets appended with the delimiter.", "private": "", "guessedtype": "function"}, "_populateList": {"guessedname": "_populateList", "params": [{"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "  An array of query result objects from the DataSource."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Populates the array of &lt;li&gt; elements in the container with query\nresults. This method is passed to YAHOO.widget.DataSource#getResults as a\ncallback function so results from the DataSource instance are returned to the\nAutoComplete instance.", "private": "", "guessedtype": "function"}, "doBeforeExpandContainer": {"return": {"type": "Boolean", "description": "Return true to continue expanding container, false to cancel the expand."}, "params": [{"type": "HTMLElement", "name": "oTextbox", "description": "  The text input box."}, {"type": "HTMLElement", "name": "oContainer", "description": "  The container element."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "   An array of query results."}], "description": "Overridable method called before container expands allows implementers to access data\nand DOM elements.", "guessedname": "doBeforeExpandContainer", "guessedtype": "function"}, "_moveSelection": {"guessedname": "_moveSelection", "params": [{"type": "Number", "name": "nKeyCode", "description": "  Code of key pressed."}], "description": "Triggered by up and down arrow keys, changes the current highlighted\n&lt;li&gt; element item. Scrolls container if necessary.", "private": "", "guessedtype": "function"}, "_initContainerHelpers": {"private": "", "description": "Initializes the results container helpers if they are enabled and do\nnot exist", "guessedname": "_initContainerHelpers", "guessedtype": "function"}, "destroy": {"description": "Nulls out the entire AutoComplete instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container. After\ncalling this method, the instance reference should be expliclitly nulled by\nimplementer, as in myDataTable = null. Use with caution!", "guessedname": "destroy", "guessedtype": "function"}, "doBeforeSendQuery": {"return": {"type": "String", "description": "Query string."}, "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Overridable method gives implementers access to the query before it gets sent.", "guessedname": "doBeforeSendQuery", "guessedtype": "function"}, "getListItemData": {"return": {"type": "Object | Object[]", "description": "Object or array of result data or null"}, "description": "Public accessor to the data held in an &lt;li&gt; element of the\nresults container.", "guessedname": "getListItemData", "guessedtype": "function"}, "_sendQuery": {"guessedname": "_sendQuery", "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Makes query request to the DataSource.", "private": "", "guessedtype": "function"}, "setFooter": {"params": [{"type": "String", "name": "sFooter", "description": "  HTML markup for results container footer."}], "description": "Sets HTML markup for the results container footer. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-ft\".", "guessedname": "setFooter", "guessedtype": "function"}, "_selectItem": {"guessedname": "_selectItem", "params": [{"type": "HTMLElement", "name": "oItem", "description": "  The selected &lt;li&gt; element item."}], "description": "Selects a result item from the container", "private": "", "guessedtype": "function"}, "_onWindowUnload": {"guessedname": "_onWindowUnload", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The unload event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles window unload event.", "private": "", "guessedtype": "function"}, "_enableIntervalDetection": {"private": "", "description": "Enables query triggers based on text input detection by intervals (rather\nthan by key events).", "guessedname": "_enableIntervalDetection", "guessedtype": "function"}, "sendQuery": {"params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Makes query request to the DataSource.", "guessedname": "sendQuery", "guessedtype": "function"}, "_toggleContainer": {"guessedname": "_toggleContainer", "params": [{"type": "Boolean", "name": "bShow", "description": "  True if container should be expanded, false if container should be collapsed"}], "description": "Animates expansion or collapse of the container.", "private": "", "guessedtype": "function"}, "_onContainerScroll": {"guessedname": "_onContainerScroll", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The scroll event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container scroll events.", "private": "", "guessedtype": "function"}, "_clearSelection": {"private": "", "description": "When forceSelection is true and the user attempts\nleave the text input box without selecting an item from the query results,\nthe user selection is cleared.", "guessedname": "_clearSelection", "guessedtype": "function"}, "__initProps": {"private": "", "description": "Updates and validates latest public config properties.", "guessedname": "_initProps", "guessedtype": "function"}, "isContainerOpen": {"return": {"type": "Boolean", "description": "Returns true if container is in an expanded state, false otherwise."}, "description": "Returns true if container is in an expanded state, false otherwise.", "guessedname": "isContainerOpen", "guessedtype": "function"}, "_cancelIntervalDetection": {"guessedname": "_cancelIntervalDetection", "params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Cancels text input detection by intervals.", "private": "", "guessedtype": "function"}, "_initListItem": {"guessedname": "_initListItem", "params": [{"type": "HTMLElement", "name": "oItem", "description": "  The &lt;li&gt; DOM element."}, {"type": "Number", "name": "nItemIndex", "description": "  The index of the element."}], "description": "Initializes each &lt;li&gt; element in the container list.", "private": "", "guessedtype": "function"}, "formatResult": {"return": {"type": "String", "description": "HTML markup of formatted result data."}, "params": [{"type": "Object", "name": "oResultItem", "description": "  Result item representing one query result. Data is held in an array."}, {"type": "String", "name": "sQuery", "description": "  The current query string."}], "description": "Overridable method that converts a result item object into HTML markup\nfor display. Return data values are accessible via the oResultItem object,\nand the key return value will always be oResultItem[0]. Markup will be\ndisplayed within &lt;li&gt; element tags in the container.", "guessedname": "formatResult", "guessedtype": "function"}, "_textMatchesOption": {"guessedname": "_textMatchesOption", "return": {"type": "HTMLElement", "description": "Matching list item element if user-input text matches\na result, null otherwise."}, "description": "Whether or not user-typed value in the text input box matches any of the\nquery results.", "private": "", "guessedtype": "function"}, "_onItemMouseover": {"guessedname": "_onItemMouseover", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseover event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles &lt;li&gt; element mouseover events in the container.", "private": "", "guessedtype": "function"}, "_onTextboxKeyDown": {"guessedname": "_onTextboxKeyDown", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keydown event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keydown events of functional keys, mainly for UI behavior.", "private": "", "guessedtype": "function"}, "_onItemMouseclick": {"guessedname": "_onItemMouseclick", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles &lt;li&gt; element click events in the container.", "private": "", "guessedtype": "function"}, "_onTextboxBlur": {"guessedname": "_onTextboxBlur", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The focus event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles text input box losing focus.", "private": "", "guessedtype": "function"}, "_onItemMouseout": {"guessedname": "_onItemMouseout", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseout event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles &lt;li&gt; element mouseout events in the container.", "private": "", "guessedtype": "function"}, "_onTextboxKeyUp": {"guessedname": "_onTextboxKeyUp", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keyup event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keyup events that trigger queries.", "private": "", "guessedtype": "function"}, "_onContainerMouseout": {"guessedname": "_onContainerMouseout", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseout event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container mouseout events.", "private": "", "guessedtype": "function"}, "_onIMEDetected": {"guessedname": "_onIMEDetected", "params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Enables interval detection for  Korean IME support.", "private": "", "guessedtype": "function"}, "_jumpSelection": {"private": "", "description": "If an item is highlighted in the container, the right arrow key jumps to the\nend of the textbox and selects the highlighted item, otherwise the container\nis closed.", "guessedname": "_jumpSelection", "guessedtype": "function"}, "setHeader": {"params": [{"type": "String", "name": "sHeader", "description": "  HTML markup for results container header."}], "description": "Sets HTML markup for the results container header. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-hd\".", "guessedname": "setHeader", "guessedtype": "function"}, "_onContainerResize": {"guessedname": "_onContainerResize", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The resize event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container resize events.", "private": "", "guessedtype": "function"}}, "file": "AutoComplete.js", "guessedtype": "function", "shortname": "AutoComplete", "properties": {"forceSelection": {"default": "false", "type": "Boolean", "description": "Whether or not to force the user's selection to match one of the query\nresults. Enabling this feature essentially transforms the input field into a\n&lt;select&gt; field. This feature is not recommended with delimiter character(s)\ndefined.", "guessedname": "forceSelection", "guessedtype": "property"}, "animHoriz": {"default": "false", "type": "Boolean", "description": "Whether or not to animate the expansion\/collapse of the results container in the\nhorizontal direction.", "guessedname": "animHoriz", "guessedtype": "property"}, "useShadow": {"default": "false", "type": "Boolean", "description": "Whether or not the results container should have a shadow.", "guessedname": "useShadow", "guessedtype": "property"}, "useIFrame": {"default": "false", "type": "Boolean", "description": "Whether or not to use an iFrame to layer over Windows form elements in\nIE. Set to true only when the results container will be on top of a\n&lt;select&gt; field in IE and thus exposed to the IE z-index bug (i.e.,\n5.5 < IE < 7).", "guessedname": "useIFrame", "guessedtype": "property"}, "_iFrameSrc": {"guessedname": "_iFrameSrc", "type": "String", "description": "Src to iFrame used when useIFrame = true. Supports implementations over SSL\nas well.", "private": "", "guessedtype": "property"}, "_nDelayID": {"guessedname": "_nDelayID", "type": "Number", "description": "Delay timeout ID.", "private": "", "guessedtype": "property"}, "_oAnim": {"guessedname": "_oAnim", "type": "Boolean", "description": "Animation instance for container expand\/collapse.", "private": "", "guessedtype": "property"}, "_queryInterval": {"guessedname": "_queryInterval", "type": "Object", "description": "For users typing via certain IMEs, queries must be triggered by intervals,\nsince key events yet supported across all browsers for all IMEs.", "private": "", "guessedtype": "property"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of AutoComplete instance.", "private": "", "guessedtype": "property"}, "_aListItems": {"guessedname": "_aListItems", "type": "HTMLElement[]", "description": "Array of &lt;li&gt; elements references that contain query results within the\nresults container.", "private": "", "guessedtype": "property"}, "_nKeyCode": {"guessedname": "_nKeyCode", "type": "Number", "description": "Key code of the last key pressed in textbox.", "private": "", "guessedtype": "property"}, "_oTextbox": {"guessedname": "_oTextbox", "type": "HTMLElement", "description": "Text input field DOM element.", "private": "", "guessedtype": "property"}, "typeAhead": {"default": "false", "type": "Boolean", "description": "Whether or not the input field should be automatically updated\nwith the first query result as the user types, auto-selecting the substring\nthat the user has not typed.", "guessedname": "typeAhead", "guessedtype": "property"}, "_nDisplayedItems": {"guessedname": "_nDisplayedItems", "type": "Number", "description": "Number of &lt;li&gt; elements currently displayed in results container.", "private": "", "guessedtype": "property"}, "_sCurQuery": {"guessedname": "_sCurQuery", "type": "String", "description": "Current query string", "private": "", "guessedtype": "property"}, "_bOverContainer": {"guessedname": "_bOverContainer", "type": "Boolean", "description": "Whether or not the mouse is currently over the results\ncontainer. This is necessary in order to prevent clicks on container items\nfrom being text input field blur events.", "private": "", "guessedtype": "property"}, "delimChar": {"type": "String | String[]", "description": "Query delimiter. A single character separator for multiple delimited\nselections. Multiple delimiter characteres may be defined as an array of\nstrings. A null value or empty string indicates that query results cannot\nbe delimited. This feature is not recommended if you need forceSelection to\nbe true.", "guessedname": "delimChar", "guessedtype": "property"}, "alwaysShowContainer": {"default": "false", "type": "Boolean", "description": "Whether or not the results container should always be displayed.\nEnabling this feature displays the container when the widget is instantiated\nand prevents the toggling of the container to a collapsed state.", "guessedname": "alwaysShowContainer", "guessedtype": "property"}, "highlightClassName": {"default": "\"yui-ac-highlight\"", "type": "String", "description": "Class name of a highlighted item within results container.", "guessedname": "highlightClassName", "guessedtype": "property"}, "minQueryLength": {"default": "1", "type": "Number", "description": "Number of characters that must be entered before querying for results. A negative value\neffectively turns off the widget. A value of 0 allows queries of null or empty string\nvalues.", "guessedname": "minQueryLength", "guessedtype": "property"}, "_oContainer": {"guessedname": "_oContainer", "type": "HTMLElement", "description": "Container DOM element.", "private": "", "guessedtype": "property"}, "prehighlightClassName": {"type": "String", "description": "Class name of a pre-highlighted item within results container.", "guessedname": "prehighlightClassName", "guessedtype": "property"}, "_maxResultsDisplayed": {"guessedname": "_maxResultsDisplayed", "type": "Number", "description": "Internal count of &lt;li&gt; elements displayed and hidden in results container.", "private": "", "guessedtype": "property"}, "_sSavedQuery": {"guessedname": "_sSavedQuery", "type": "String", "description": "Past queries this session (for saving delimited queries).", "private": "", "guessedtype": "property"}, "_bItemSelected": {"guessedname": "_bItemSelected", "type": "Boolean", "description": "Whether or not an item has been selected since the container was populated\nwith results. Reset to false by _populateList, and set to true when item is\nselected.", "private": "", "guessedtype": "property"}, "dataSource": {"type": "YAHOO.widget.DataSource", "description": "The DataSource object that encapsulates the data used for auto completion.\nThis object should be an inherited object from YAHOO.widget.DataSource.", "guessedname": "dataSource", "guessedtype": "property"}, "autoHighlight": {"default": "true", "type": "Boolean", "description": "Whether or not the first item in results container should be automatically highlighted\non expand.", "guessedname": "autoHighlight", "guessedtype": "property"}, "allowBrowserAutocomplete": {"default": "true", "type": "Boolean", "description": "Whether or not to allow browsers to cache user-typed input in the input\nfield. Disabling this feature will prevent the widget from setting the\nautocomplete=\"off\" on the input field. When autocomplete=\"off\"\nand users click the back button after form submission, user-typed input can\nbe prefilled by the browser from its cache. This caching of user input may\nnot be desired for sensitive data, such as credit card numbers, in which\ncase, implementers should consider setting allowBrowserAutocomplete to false.", "guessedname": "allowBrowserAutocomplete", "guessedtype": "property"}, "animVert": {"default": "true", "type": "Boolean", "description": "Whether or not to animate the expansion\/collapse of the results container in the\nvertical direction.", "guessedname": "animVert", "guessedtype": "property"}, "_nIndex": {"description": "Internal class variable to index multiple AutoComplete instances.", "default": "0", "private": "", "guessedname": "_nIndex", "guessedtype": "property", "type": "Number"}, "_bContainerOpen": {"guessedname": "_bContainerOpen", "type": "Boolean", "description": "Whether or not the results container is currently open.", "private": "", "guessedtype": "property"}, "animSpeed": {"default": "0.3", "type": "Number", "description": "Speed of container expand\/collapse animation, in seconds..", "guessedname": "animSpeed", "guessedtype": "property"}, "_oCurItem": {"guessedname": "_oCurItem", "type": "HTMLElement", "description": "Pointer to the currently highlighted &lt;li&gt; element in the container.", "private": "", "guessedtype": "property"}, "maxResultsDisplayed": {"default": "10", "type": "Number", "description": "Maximum number of results to display in results container.", "guessedname": "maxResultsDisplayed", "guessedtype": "property"}, "_bFocused": {"guessedname": "_bFocused", "type": "Boolean", "description": "Whether or not the input field is currently in focus. If query results come back\nbut the user has already moved on, do not proceed with auto complete behavior.", "private": "", "guessedtype": "property"}, "queryDelay": {"default": "0.2", "type": "Number", "description": "Number of seconds to delay before submitting a query request.  If a query\nrequest is received before a previous one has completed its delay, the\nprevious request is cancelled and the new request is set to the delay.\nImplementers should take care when setting this value very low (i.e., less\nthan 0.2) with low latency DataSources and the typeAhead feature enabled, as\nfast typers may see unexpected behavior.", "guessedname": "queryDelay", "guessedtype": "property"}}, "description": "The AutoComplete class provides the customizable functionality of a plug-and-play DHTML\nauto completion widget.  Some key features:\n<ul>\n<li>Navigate with up\/down arrow keys and\/or mouse to pick a selection<\/li>\n<li>The drop down container can \"roll down\" or \"fly out\" via configurable\nanimation<\/li>\n<li>UI look-and-feel customizable through CSS, including container\nattributes, borders, position, fonts, etc<\/li>\n<\/ul>"}, "YAHOO.util.ObjectAssert": {"name": "YAHOO.util.ObjectAssert", "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "ObjectAssert", "methods": {"hasProperty": {"description": "Asserts that an object has a property with the given name.", "param": "{String} propertyName The name of the property to test.", "static": "", "guessedname": "hasProperty", "guessedtype": "function", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "propertiesAreEqual": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " An object with the expected properties."}, {"type": "Object", "name": "actual", "description": " An object with the actual properties."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that all properties in the object exist in another object.", "guessedname": "propertiesAreEqual", "guessedtype": "function"}}, "static": "", "file": "ObjectAssert.js", "guessedtype": "property", "shortname": "ObjectAssert", "description": "The ObjectAssert object provides functions to test JavaScript objects\nfor a variety of cases."}, "YAHOO.util.UnexpectedValue": {"name": "YAHOO.util.UnexpectedValue", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "unexpected", "description": " The unexpected value."}], "description": "UnexpectedValue is subclass of AssertionError that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "UnexpectedValue", "methods": {"getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. The message\ncontains information about the unexpected value that was encountered.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "YAHOO.util.AssertionError", "superclass": "YAHOO.util.AssertionError", "file": "Assert.js", "guessedtype": "function", "shortname": "UnexpectedValue", "properties": {"unexpected": {"type": "Object", "description": "The unexpected value."}, "name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "UnexpectedValue is subclass of AssertionError that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}, "YAHOO.widget.ToolbarButtonAdvanced": {"name": "YAHOO.widget.ToolbarButtonAdvanced", "constructors": [{"params": [{"type": "String\/HTMLElement", "name": "el", "description": " The element to turn into a button."}, {"type": "Object", "name": "attrs", "description": " Object liternal containing configuration parameters."}], "description": "<p>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar<\/p>"}], "namespace": "YAHOO.widget", "module": "editor", "methods": {"checkValue": {"params": [{"type": "String", "name": "value", "description": " The value of the option that we want to mark as selected"}], "description": "Select an option by value", "guessedname": "checkValue", "guessedtype": "function"}}, "beta": "", "file": "toolbar-button.js", "shortname": "ToolbarButtonAdvanced", "requires": "yahoo, dom, element, event, container_core, menu, button", "properties": {"buttonType": {"private": "", "description": "Tells if the Button is a Rich Button or a Simple Button", "guessedname": "buttonType", "guessedtype": "property"}}, "description": "<p>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar<\/p>"}, "YAHOO.util.AssertionError": {"name": "YAHOO.util.AssertionError", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "AssertionError is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}], "namespace": "YAHOO.util", "module": "yuitest", "guessedname": "AssertionError", "methods": {"valueOf": {"return": {"type": "String", "description": "A primitive value version of the error."}, "description": "Returns a primitive value version of the error. Same as toString().", "guessedname": "valueOf", "guessedtype": "function"}, "getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This should\nbe overridden by all subclasses to provide specific information.", "guessedname": "getMessage", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the error."}, "description": "Returns a string representation of the error.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "Error", "superclass": "Error", "file": "Assert.js", "guessedtype": "function", "shortname": "AssertionError", "properties": {"name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "AssertionError is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}, "YAHOO.widget.MenuNode": {"name": "YAHOO.widget.MenuNode", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "YAHOO.widget.Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded\/collapsed state"}], "description": "A menu-specific implementation that differs from TextNode in that only \none sibling can be expanded at a time."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "MenuNode", "extends": "YAHOO.widget.TextNode", "superclass": "YAHOO.widget.TextNode", "file": "MenuNode.js", "guessedtype": "function", "shortname": "MenuNode", "description": "A menu-specific implementation that differs from TextNode in that only \none sibling can be expanded at a time."}, "YAHOO.widget.Record": {"name": "YAHOO.widget.Record", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of key\/value pairs."}], "description": "The Record class defines a DataTable record."}], "namespace": "YAHOO.widget", "module": "datatable", "guessedname": "Record", "methods": {"getData": {"return": {"type": "", "description": "Object"}, "params": [{"type": "String", "name": "sKey", "description": "  (Optional) The key to retrieve a single data value."}], "description": "Returns data for the Record for a key if given, or the entire object\r\nliteral otherwise.", "guessedname": "getData", "guessedtype": "function"}, "getId": {"return": {"type": "", "description": "String"}, "description": "Returns unique ID assigned at instantiation.", "guessedname": "getId", "guessedtype": "function"}}, "file": "RecordSet.js", "guessedtype": "function", "shortname": "Record", "properties": {"_sId": {"guessedname": "_sId", "type": "String", "description": "Immutable unique ID assigned at instantiation. Remains constant while a\r\nRecord's position index can change from sorting.", "private": "", "guessedtype": "property"}, "_oData": {"guessedname": "_oData", "type": "Object", "description": "Holds data for the Record in an object literal.", "private": "", "guessedtype": "property"}, "Record._nCount": {"guessedname": "_nCount", "type": "Number", "description": "Internal class variable to give unique IDs to Record instances.", "private": "", "guessedtype": "property"}}, "description": "The Record class defines a DataTable record."}, "YAHOO.widget.TabView": {"name": "YAHOO.widget.TabView", "configs": {"tabs": {"type": "Array", "description": "The Tabs belonging to the TabView instance."}, "activeIndex": {"type": "Int", "description": "The index of the tab currently active."}, "activeTab": {"type": "YAHOO.widget.Tab", "description": "The tab currently active."}, "orientation": {"default": "\"top\"", "type": "String", "description": "How the Tabs should be oriented relative to the TabView."}}, "constructors": [{"params": [{"type": "HTMLElement | String | Object", "name": "el(optional)", "description": " The html \nelement that represents the TabView, or the attribute object to use. \nAn element will be created if none provided."}, {"type": "Object", "name": "attr", "description": " (optional) A key map of the tabView's \ninitial attributes.  Ignored if first arg is attributes object."}], "description": "A widget to control tabbed views."}], "namespace": "YAHOO.widget", "module": "tabview", "events": {"beforeActiveTabChange": {"description": "Fires before the activeTab is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeActiveTabChange<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nprevValue<\/code> the currently active tab<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nnewValue<\/code> the tab to be made active<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeActiveTabChange', handler);<\/code><\/p>"}, "orientationChange": {"description": "Fires after the orientation is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> orientationChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the former orientation<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new orientation<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('orientationChange', handler);<\/code><\/p>"}, "activeTabChange": {"description": "Fires after the activeTab is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> activeTabChange<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nprevValue<\/code> the formerly active tab<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nnewValue<\/code> the new active tab<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('activeTabChange', handler);<\/code><\/p>"}, "beforeOrientationChange": {"description": "Fires before the orientation is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeOrientationChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the current orientation<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new orientation to be applied<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeOrientationChange', handler);<\/code><\/p>"}}, "guessedname": "TabView", "methods": {"getTabIndex": {"return": {"type": "", "description": "int"}, "params": [{"type": "YAHOO.widget.Tab", "name": "tab", "description": " The tab whose index will be returned."}], "description": "Returns the index of given tab.", "guessedname": "getTabIndex", "guessedtype": "function"}, "removeTab": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.Tab", "name": "item", "description": " The Tab instance to be removed."}], "description": "Removes the specified Tab from the TabView.", "guessedname": "removeTab", "guessedtype": "function"}, "contentTransition": {"description": "The transiton to use when switching between tabs.", "guessedname": "contentTransition", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Hash of initial attributes"}], "description": "setAttributeConfigs TabView specific properties.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String"}, "description": "Provides a readable name for the TabView instance.", "guessedname": "toString", "guessedtype": "function"}, "DOMEventHandler": {"return": {"type": "", "description": "void"}, "params": [{"type": "event", "name": "e", "description": " The Dom event that is being handled."}], "description": "Routes childNode events.", "guessedname": "DOMEventHandler", "guessedtype": "function"}, "addTab": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.Tab", "name": "tab", "description": " A Tab instance to add."}, {"type": "Integer", "name": "index", "description": " The position to add the tab."}], "description": "Adds a Tab to the TabView instance.  \nIf no index is specified, the tab is added to the end of the tab list.", "guessedname": "addTab", "guessedtype": "function"}, "initTabs": {"guessedname": "_initTabs", "return": {"type": "", "description": "void"}, "description": "Creates Tab instances from a collection of HTMLElements.", "private": "", "guessedtype": "function"}, "getTab": {"return": {"type": "", "description": "YAHOO.widget.Tab"}, "params": [{"type": "Integer", "name": "index", "description": " The position of the Tab."}], "description": "Returns the Tab instance at the specified index.", "guessedname": "getTab", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "TabView.js", "guessedtype": "function", "shortname": "TabView", "properties": {"CLASSNAME": {"default": "\"navset\"", "description": "The className to add when building from scratch.", "guessedname": "CLASSNAME", "guessedtype": "property"}, "TAB_PARENT_CLASSNAME": {"default": "\"nav\"", "description": "The className of the HTMLElement containing the TabView's tab elements\nto look for when building from existing markup, or to add when building\nfrom scratch. \nAll childNodes of the tab container are treated as Tabs when building\nfrom existing markup.", "guessedname": "TAB_PARENT_CLASSNAME", "guessedtype": "property"}, "CONTENT_PARENT_CLASSNAME": {"default": "\"nav-content\"", "description": "The className of the HTMLElement containing the TabView's label elements\nto look for when building from existing markup, or to add when building\nfrom scratch. \nAll childNodes of the content container are treated as content elements when\nbuilding from existing markup.", "guessedname": "CONTENT_PARENT_CLASSNAME", "guessedtype": "property"}, "_tabParent": {"guessedname": "_tabParent", "type": "HTMLElement", "description": "The container of the tabView's label elements.", "private": "", "guessedtype": "property"}, "_contentParent": {"guessedname": "_contentParent", "type": "HTMLElement", "description": "The container of the tabView's content elements.", "private": "", "guessedtype": "property"}}, "description": "A widget to control tabbed views."}, "YAHOO.widget.CalendarNavigator": {"name": "YAHOO.widget.CalendarNavigator", "constructors": [{"params": [{"type": "Calendar|CalendarGroup", "name": "cal", "description": " The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached."}], "description": "The CalendarNavigator is used along with a Calendar\/CalendarGroup to \nprovide a Month\/Year popup navigation control, allowing the user to navigate \nto a specific month\/year in the Calendar\/CalendarGroup without having to \nscroll through months sequentially"}], "namespace": "YAHOO.widget", "module": "calendar", "guessedname": "CalendarNavigator", "methods": {"_getMonthFromUI": {"protected": "", "return": {"type": "Number", "description": "The month index, or 0 if a UI element for the month\nis not found"}, "description": "Returns the month value (index), from the month UI element", "guessedname": "_getMonthFromUI", "guessedtype": "function"}, "createNav": {"description": "Creates the navigator's containing HTMLElement, it's contents, and appends \nthe containg element to the Calendar\/CalendarGroup's container.", "guessedname": "createNav", "guessedtype": "function"}, "_handleDirectionKeys": {"protected": "", "params": [{"type": "Event", "name": "e", "description": " The DOM event being handled"}], "description": "Default Keyboard event handler to capture up\/down\/pgup\/pgdown\non the Navigator's year control (yearEl).", "guessedname": "_handleDirectionKeys", "guessedtype": "function"}, "render": {"description": "Renders the HTML for the navigator, adding it to the \ndocument and attaches event listeners if it has not \nalready been rendered.", "guessedname": "render", "guessedtype": "function"}, "show": {"description": "Displays the navigator and mask, updating the input controls to reflect the \ncurrently set month and year. The show method will invoke the render method\nif the navigator has not been renderered already, allowing for lazy rendering\nof the control.\nThe show method will fire the Calendar\/CalendarGroup's beforeShowNav and showNav events", "guessedname": "show", "guessedtype": "function"}, "erase": {"description": "Removes all renderered HTML elements for the Navigator from\nthe DOM, purges event listeners and clears (nulls) any property\nreferences to HTML references", "guessedname": "erase", "guessedtype": "function"}, "_handleShiftTabKey": {"protected": "", "params": [{"type": "Event", "name": "e", "description": " The DOM event being handled"}], "description": "Default Keyboard event handler to capture Shift-Tab \non the first control (firstCtrl) in the Navigator.", "guessedname": "_handleShiftTabKey", "guessedtype": "function"}, "cancel": {"description": "Hides the navigator and mask, without updating the Calendar\/CalendarGroup's state", "guessedname": "cancel", "guessedtype": "function"}, "applyKeyListeners": {"description": "Attaches DOM listeners for keyboard support. \nTab\/Shift-Tab looping, Enter Key Submit on Year element,\nUp\/Down\/PgUp\/PgDown year increment on Year element\n<p>\nNOTE: MacOSX Safari 2.x doesn't let you tab to buttons and \nMacOSX Gecko does not let you tab to buttons or select controls,\nso for these browsers, Tab\/Shift-Tab looping is limited to the \nelements which can be reached using the tab key.\n<\/p>", "guessedname": "applyKeyListeners", "guessedtype": "function"}, "setError": {"params": [{"type": "String", "name": "msg", "description": " The error message to display"}], "description": "Displays an error message in the Navigator's error panel", "guessedname": "setError", "guessedtype": "function"}, "hideMask": {"description": "Hides the navigator's mask element", "guessedname": "hideMask", "guessedtype": "function"}, "_updateMonthUI": {"protected": "", "description": "Updates the Navigator's month UI, based on the month value set on the Navigator object", "guessedname": "_updateMonthUI", "guessedtype": "function"}, "hide": {"description": "Hides the navigator and mask\nThe show method will fire the Calendar\/CalendarGroup's beforeHideNav event and hideNav events", "guessedname": "hide", "guessedtype": "function"}, "submit": {"description": "Updates the Calendar\/CalendarGroup's pagedate with the currently set month and year if valid.\n<p>\nIf the currently set month\/year is invalid, a validation error will be displayed and the \nCalendar\/CalendarGroup's pagedate will not be updated.\n<\/p>", "guessedname": "submit", "guessedtype": "function"}, "renderNavContents": {"return": {"type": "Array", "description": "A reference to the buffer passed in."}, "description": "Renders the contents of the navigator", "param": "{Array} html The HTML buffer to append the HTML to.", "params": [{"type": "Array", "name": "html", "description": " The HTML buffer to append the HTML to."}], "guessedname": "renderNavContents", "guessedtype": "function"}, "init": {"params": [{"type": "Calendar", "name": "cal", "description": " The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached"}], "description": "Init lifecycle method called as part of construction", "guessedname": "init", "guessedtype": "function"}, "setYearError": {"description": "Displays the validation error UI for the year control", "guessedname": "setYearError", "guessedtype": "function"}, "_getYearFromUI": {"protected": "", "return": {"type": "Number", "description": "The year value set in the UI, if valid. null is returned if \nthe UI does not contain a valid year value."}, "description": "Returns the year value, from the Navitator's year UI element", "guessedname": "_getYearFromUI", "guessedtype": "function"}, "_syncMask": {"protected": "", "description": "Used to set the width\/height of the mask in pixels to match the Calendar Container.\nCurrently only used for IE6 and IE7 quirks mode. The other A-Grade browser are handled using CSS (width\/height 100%).\n<p>\nThe method is also registered as an HTMLElement resize listener on the Calendars container element.\n<\/p>", "guessedname": "_syncMask", "guessedtype": "function"}, "getYear": {"return": {"type": "Number", "description": "The Navigator's current year value"}, "description": "Returns the current year set on the navigator\nNote: This may not be the year set in the UI, if \nthe UI contains an invalid value.", "guessedname": "getYear", "guessedtype": "function"}, "destroy": {"description": "Destroys the Navigator object and any HTML references", "guessedname": "destroy", "guessedtype": "function"}, "getMonth": {"return": {"type": "Number", "description": "The Navigator's current month index"}, "description": "Returns the current month set on the navigator\nNote: This may not be the month set in the UI, if \nthe UI contains an invalid value.", "guessedname": "getMonth", "guessedtype": "function"}, "showMask": {"description": "Displays the navigator's mask element", "guessedname": "showMask", "guessedtype": "function"}, "renderButton": {"return": {"type": "String", "description": "The HTML created for the Button UI"}, "description": "Renders the submit\/cancel buttons for the navigator", "guessedname": "renderButtons", "guessedtype": "function"}, "clearErrors": {"description": "Clears all validation and error messages in the UI", "guessedname": "clearErrors", "guessedtype": "function"}, "applyListeners": {"description": "Attaches DOM event listeners to the rendered elements\n<p>\nThe method will call applyKeyListeners, to setup keyboard specific \nlisteners\n<\/p>", "guessedname": "applyListeners", "guessedtype": "function"}, "purgeListeners": {"description": "Removes\/purges DOM event listeners from the rendered elements", "guessedname": "purgeListeners", "guessedtype": "function"}, "clearYearError": {"description": "Removes the validation error UI for the year control", "guessedname": "clearYearError", "guessedtype": "function"}, "clearError": {"description": "Clears the navigator's error message and hides the error panel", "guessedname": "clearError", "guessedtype": "function"}, "validate": {"return": {"type": "Boolean", "description": "true, if the current UI state contains valid values, false if not"}, "description": "Validates the current state of the UI controls", "guessedname": "validate", "guessedtype": "function"}, "setMonth": {"params": [{"type": "Number", "name": "nMonth", "description": " The month index, from 0 (Jan) through 11 (Dec)."}], "description": "Sets the current month on the Navigator, and updates the UI", "guessedname": "setMonth", "guessedtype": "function"}, "_setFirstLastElements": {"protected": "", "description": "Sets up references to the first and last focusable element in the Navigator's UI\nin terms of tab order (Naviagator's firstEl and lastEl properties). The references\nare used to control modality by looping around from the first to the last control\nand visa versa for tab\/shift-tab navigation.\n<p>\nSee <a href=\"#applyKeyListeners\">applyKeyListeners<\/a>\n<\/p>", "guessedname": "_setFirstLastElements", "guessedtype": "function"}, "_show": {"protected": "", "description": "Protected implementation to handle how UI elements are \nhidden\/shown.", "guessedname": "_show", "guessedtype": "function"}, "setInitialFocus": {"description": "Sets the initial focus, based on the configured value", "guessedname": "setInitialFocus", "guessedtype": "function"}, "_handleEnterKey": {"protected": "", "params": [{"type": "Event", "name": "e", "description": " The DOM event being handled"}], "description": "Default Keyboard event handler to capture Enter \non the Navigator's year control (yearEl)", "guessedname": "_handleEnterKey", "guessedtype": "function"}, "__getCfg": {"return": {"type": "", "description": "The value of the configuration property"}, "description": "Retrieve Navigator configuration values from \nthe parent Calendar\/CalendarGroup's config value.\n<p>\nIf it has not been set in the user provided configuration, the method will \nreturn the default value of the configuration property, as set in _DEFAULT_CFG\n<\/p>", "private": "", "params": [{"type": "String", "name": "Case", "description": " sensitive property name."}, {"type": "Boolean", "name": "true,", "description": " if the property is a string property, false if not."}], "guessedname": "__getCfg", "guessedtype": "function"}, "setYear": {"params": [{"type": "Number", "name": "nYear", "description": " The full year value to set the Navigator to."}], "description": "Sets the current year on the Navigator, and updates the UI. If the \nprovided year is invalid, it will not be set.", "guessedname": "setYear", "guessedtype": "function"}, "_handleTabKey": {"protected": "", "params": [{"type": "Event", "name": "e", "description": " The DOM event being handled"}], "description": "Default Keyboard event handler to capture Tab \non the last control (lastCtrl) in the Navigator.", "guessedname": "_handleTabKey", "guessedtype": "function"}, "createMask": {"description": "Creates the Mask HTMLElement and appends it to the Calendar\/CalendarGroups\ncontainer.", "guessedname": "createMask", "guessedtype": "function"}, "purgeKeyListeners": {"description": "Removes\/purges DOM listeners for keyboard support", "guessedname": "purgeKeyListeners", "guessedtype": "function"}, "renderYear": {"return": {"type": "Array", "description": "A reference to the buffer passed in."}, "params": [{"type": "Array", "name": "html", "description": " The HTML buffer to append the HTML to."}], "description": "Renders the year label and control for the navigator", "guessedname": "renderYear", "guessedtype": "function"}, "_updateYearUI": {"protected": "", "description": "Updates the Navigator's year UI, based on the year value set on the Navigator object", "guessedname": "_updateYearUI", "guessedtype": "function"}}, "file": "CalendarNavigator.js", "guessedtype": "function", "shortname": "CalendarNavigator", "properties": {"_DEFAULT_CFG": {"description": "Object literal containing the default configuration values for the CalendarNavigator\nThe configuration object is expected to follow the format below, with the properties being\ncase sensitive.\n<dl>\n<dt>strings<\/dt>\n<dd><em>Object<\/em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI\n<dl>\n<dt>month<\/dt><dd><em>String<\/em> : The string to use for the month label. Defaults to \"Month\".<\/dd>\n<dt>year<\/dt><dd><em>String<\/em> : The string to use for the year label. Defaults to \"Year\".<\/dd>\n<dt>submit<\/dt><dd><em>String<\/em> : The string to use for the submit button label. Defaults to \"Okay\".<\/dd>\n<dt>cancel<\/dt><dd><em>String<\/em> : The string to use for the cancel button label. Defaults to \"Cancel\".<\/dd>\n<dt>invalidYear<\/dt><dd><em>String<\/em> : The string to use for invalid year values. Defaults to \"Year needs to be a number\".<\/dd>\n<\/dl>\n<\/dd>\n<dt>monthFormat<\/dt><dd><em>String<\/em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG<\/dd>\n<dt>initialFocus<\/dt><dd><em>String<\/em> : Either \"year\" or \"month\" specifying which input control should get initial focus. Defaults to \"year\"<\/dd>\n<\/dl>", "protected": "", "static": "", "guessedname": "_DEFAULT_CFG", "guessedtype": "property", "type": "Object"}, "YAHOO.widget.CalendarNavigator.YR_PATTERN": {"type": "RegExp", "static": "", "description": "Regular expression used to validate the year input", "guessedname": "YR_PATTERN", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.UPDATE_DELAY": {"type": "Number", "static": "", "description": "Artificial delay (in ms) between the time the Navigator is hidden\nand the Calendar\/CalendarGroup state is updated. Allows the user\nthe see the Calendar\/CalendarGroup page changing. If set to 0\nthe Calendar\/CalendarGroup page will be updated instantly", "guessedname": "UPDATE_DELAY", "guessedtype": "property"}, "lastCtrl": {"type": "HTMLElement", "description": "Reference to the last focusable control in the navigator (by default cancelEl)", "guessedname": "lastCtrl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.MONTH_SUFFIX": {"description": "The suffix added to the Navigator's ID, to generate\na unique ID for the month control.", "static": "", "guessedname": "MONTH_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}, "errorEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to display validation errors", "guessedname": "errorEl", "guessedtype": "property"}, "submitEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to update the Calendar\/Calendar group\nwith the month\/year values", "guessedname": "submitEl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.DEFAULT": {"type": "String", "static": "", "description": "Class applied to default controls", "guessedname": "DEFAULT", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.ID_SUFFIX": {"description": "The suffix added to the Calendar\/CalendarGroup's ID, to generate\na unique ID for the Navigator and it's bounding box.", "static": "", "guessedname": "ID_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.CalendarNavigator.CLASSES.NAV_VISIBLE": {"type": "String", "static": "", "description": "Class applied to the Calendar\/CalendarGroup's bounding box to indicate\nthe Navigator is currently visible", "guessedname": "NAV_VISIBLE", "guessedtype": "property"}, "id": {"type": "String", "description": "The unique ID for this CalendarNavigator instance", "guessedname": "id", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.YEAR_SUFFIX": {"description": "The suffix added to the Navigator's ID, to generate\na unique ID for the year control.", "static": "", "guessedname": "YEAR_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}, "firstCtrl": {"type": "HTMLElement", "description": "Reference to the first focusable control in the navigator (by default monthEl)", "guessedname": "firstCtrl", "guessedtype": "property"}, "__isIEQuirks": {"private": "", "description": "Private flag, to identify IE6\/IE7 Quirks", "guessedname": "ie", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.TRIM": {"type": "RegExp", "static": "", "description": "Regular expression used to trim strings", "guessedname": "TRIM", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.MONTH": {"type": "String", "static": "", "description": "Class applied to the month label\/control bounding box", "guessedname": "MONTH", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.YR_MINOR_INC": {"type": "Number", "static": "", "description": "The amount by which to increment the current year value,\nwhen the arrow up\/down key is pressed on the year control", "guessedname": "YR_MINOR_INC", "guessedtype": "property"}, "navEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to render the navigator's bounding box", "guessedname": "navEl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.MASK": {"type": "String", "static": "", "description": "Class applied to the Navigator mask's bounding box", "guessedname": "MASK", "guessedtype": "property"}, "monthEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to input the month", "guessedname": "monthEl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.YR_MAJOR_INC": {"type": "Number", "static": "", "description": "The amount by which to increment the current year value,\nwhen the page up\/down key is pressed on the year control", "guessedname": "YR_MAJOR_INC", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES": {"type": "Object", "static": "", "description": "YAHOO.widget.CalendarNavigator.CLASSES contains constants\nfor the class values applied to the CalendarNaviatgator's \nDOM elements", "guessedname": "CLASSES", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.ERROR": {"type": "String", "static": "", "description": "Class applied to the validation error area's bounding box", "guessedname": "ERROR", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.NAV": {"type": "String", "static": "", "description": "Class applied to the Calendar Navigator's bounding box", "guessedname": "NAV", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.BUTTONS": {"type": "String", "static": "", "description": "Class applied to the submit\/cancel button's bounding box", "guessedname": "BUTTONS", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.INVALID": {"type": "String", "static": "", "description": "Class applied to controls with invalid data (e.g. a year input field with invalid an year)", "guessedname": "INVALID", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.ERROR_SUFFIX": {"description": "The suffix added to the Navigator's ID, to generate\na unique ID for the error bounding box.", "static": "", "guessedname": "ERROR_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.CalendarNavigator.CLASSES.BUTTON": {"type": "String", "static": "", "description": "Class applied to buttons wrapping element", "guessedname": "BUTTON", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.YEAR_CTRL": {"type": "String", "static": "", "description": "Class applied to the year input control", "guessedname": "YEAR_CTRL", "guessedtype": "property"}, "_year": {"protected": "", "type": "Number", "description": "Internal state property for the current year displayed in the navigator", "guessedname": "_year", "guessedtype": "property"}, "maskEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to render the navigator's mask", "guessedname": "maskEl", "guessedtype": "property"}, "yearEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to input the year", "guessedname": "yearEl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.YEAR": {"type": "String", "static": "", "description": "Class applied to the year label\/control bounding box", "guessedname": "YEAR", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CANCEL_SUFFIX": {"description": "The suffix added to the Navigator's ID, to generate\na unique ID for the \"Cancel\" button.", "static": "", "guessedname": "CANCEL_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}, "__isMac": {"private": "", "description": "Private flag, to identify MacOS", "guessedname": "__isMac", "guessedtype": "property"}, "_doc": {"protected": "", "type": "HTMLDocument", "description": "The document containing the Calendar\/Calendar group instance", "guessedname": "_doc", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.CLASSES.MONTH_CTRL": {"type": "String", "static": "", "description": "Class applied to the month input control", "guessedname": "MONTH_CTRL", "guessedtype": "property"}, "_month": {"protected": "", "type": "Number", "description": "Internal state property for the current month index displayed in the navigator", "guessedname": "_month", "guessedtype": "property"}, "__rendered": {"guessedname": "__rendered", "type": "Boolean", "description": "Private internal state property which indicates whether or not the \nNavigator has been rendered.", "private": "", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.YR_MAX_DIGITS": {"type": "Number", "static": "", "description": "The number of digits to which the year input control is to be limited.", "guessedname": "YR_MAX_DIGITS", "guessedtype": "property"}, "cal": {"type": "{Calendar|CalendarGroup}", "description": "The Calendar\/CalendarGroup instance to which the navigator belongs", "guessedname": "cal", "guessedtype": "property"}, "cancelEl": {"type": "HTMLElement", "description": "Reference to the HTMLElement used to hide the navigator without updating the \nCalendar\/Calendar group", "guessedname": "cancelEl", "guessedtype": "property"}, "YAHOO.widget.CalendarNavigator.SUBMIT_SUFFIX": {"description": "The suffix added to the Navigator's ID, to generate\na unique ID for the \"Submit\" button.", "static": "", "guessedname": "SUBMIT_SUFFIX", "guessedtype": "property", "type": "String", "final": ""}}, "description": "The CalendarNavigator is used along with a Calendar\/CalendarGroup to \nprovide a Month\/Year popup navigation control, allowing the user to navigate \nto a specific month\/year in the Calendar\/CalendarGroup without having to \nscroll through months sequentially"}, "YAHOO.util.Selector": {"name": "YAHOO.util.Selector", "namespace": "YAHOO.util", "module": "selector", "guessedname": "Selector", "methods": {"test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "description": "Test if the supplied node matches the supplied selector.", "static": "", "guessedname": "test", "guessedtype": "function", "params": [{"type": "HTMLElement | String", "name": "node", "description": " An id or node reference to the HTMLElement being tested."}, {"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}]}, "filter": {"return": {"type": "array", "description": "An array of nodes from the supplied array that match the given selector."}, "description": "Filters a set of nodes based on a given CSS selector.", "static": "", "guessedname": "filter", "guessedtype": "function", "params": [{"type": "array", "name": "A", "description": " set of nodes\/ids to filter."}, {"type": "string", "name": "selector", "description": " The selector used to test each node."}]}, "query": {"return": {"type": "Array", "description": "An array of nodes that match the given selector."}, "description": "Retrieves a set of nodes based on a given CSS selector.", "static": "", "guessedname": "query", "guessedtype": "function", "params": [{"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}, {"type": "HTMLElement | String", "name": "root", "description": " optional An id or HTMLElement to start the query from. Defaults to Selector.document."}, {"type": "Boolean", "name": "firstOnly", "description": " optional Whether or not to return only the first match."}]}}, "static": "", "file": "Selector.js", "guessedtype": "function", "shortname": "Selector", "properties": {"attrAliases": {"type": "object", "description": "Mapping of attributes to aliases, normally to work around HTMLAttributes\nthat conflict with JS reserved words.", "guessedname": "attrAliases", "guessedtype": "property"}, "operators": {"type": "object", "description": "List of operators and corresponding boolean functions. \nThese functions are passed the attribute and the current node's value of the attribute.", "guessedname": "operators", "guessedtype": "property"}, "document": {"default": "window.document", "type": "object", "description": "Default document for use queries", "guessedname": "document", "guessedtype": "property"}, "shorthand": {"type": "object", "description": "Mapping of shorthand tokens to corresponding attribute selector", "guessedname": "shorthand", "guessedtype": "property"}, "pseudos": {"type": "object", "description": "List of pseudo-classes and corresponding boolean functions. \nThese functions are called with the current node, and any value that was parsed with the pseudo regex.", "guessedname": "pseudos", "guessedtype": "property"}}, "description": "Provides helper methods for collecting and filtering DOM elements."}, "YAHOO.util.History": {"name": "YAHOO.util.History", "constructors": [{"description": "The History class provides the ability to use the back\/forward navigation\nbuttons in a DHTML application. It also allows a DHTML application to\nbe bookmarked in a specific state."}], "namespace": "YAHOO.util", "module": "history", "events": {"onLoadEvent": {"see": "onReady", "description": "Fired when the Browser History Manager is ready. If you subscribe to\nthis event after the Browser History Manager has been initialized,\nit will not fire. Therefore, it is recommended to use the onReady\nmethod instead.", "guessedname": "onLoadEvent", "guessedtype": "property"}}, "guessedname": "History", "methods": {"getCurrentState": {"return": {"type": "string", "description": "The current state of the specified module."}, "description": "Returns the current state of the specified module.", "params": [{"type": "string", "name": "module", "description": " Non-empty string representing your module."}], "guessedname": "getCurrentState", "guessedtype": "function", "public": ""}, "_updateIFrame": {"return": {"type": "boolean", "description": "true if successful. false otherwise."}, "description": "Update the IFrame with our new state.", "private": ""}, "_handleFQStateChange": {"params": [{"type": "string", "name": "fqstate", "description": " Fully qualified state"}], "description": "Sets the new currentState attribute of all modules depending on the new\nfully qualified state. Also notifies the modules which current state has\nchanged.", "private": ""}, "onReady": {"see": "onLoadEvent", "params": [{"type": "function", "name": "fn", "description": " what to execute when the Browser History Manager is ready."}, {"type": "object", "name": "obj", "description": " an optional object to be passed back as a parameter to fn."}, {"type": "boolean|object", "name": "override", "description": " If true, the obj passed in becomes fn's execution scope."}], "description": "Executes the supplied callback when the Browser History Manager is\nready. This will execute immediately if called after the Browser\nHistory Manager onLoad event has fired.", "guessedname": "onReady", "guessedtype": "function"}, "navigate": {"return": {"type": "boolean", "description": "Indicates whether the new state was successfully added to the history."}, "description": "Call this method when you want to store a new entry in the browser's history.", "params": [{"type": "string", "name": "module", "description": " Non-empty string representing your module."}, {"type": "string", "name": "state", "description": " String representing the new state of the specified module."}], "guessedname": "navigate", "guessedtype": "function", "public": ""}, "_initialize": {"description": "Finish up the initialization of the Browser History Manager.", "private": ""}, "register": {"params": [{"type": "string", "name": "module", "description": " Non-empty string uniquely identifying the\nmodule you wish to register."}, {"type": "string", "name": "initialState", "description": " The initial state of the specified\nmodule corresponding to its earliest history entry."}, {"type": "function", "name": "onStateChange", "description": " Callback called when the\nstate of the specified module has changed."}, {"type": "object", "name": "obj", "description": " An arbitrary object that will be passed as a\nparameter to the handler."}, {"type": "boolean", "name": "override", "description": " If true, the obj passed in becomes the\nexecution scope of the listener."}], "description": "Registers a new module.", "guessedname": "register", "guessedtype": "function"}, "_checkIframeLoaded": {"description": "Periodically checks whether our internal IFrame is ready to be used.", "private": ""}, "getBookmarkedState": {"return": {"type": "string", "description": "The bookmarked state of the specified module."}, "description": "Returns the state of a module according to the URL fragment\nidentifier. This method is useful to initialize your modules\nif your application was bookmarked from a particular state.", "params": [{"type": "string", "name": "module", "description": " Non-empty string representing your module."}], "guessedname": "getBookmarkedState", "guessedtype": "function", "public": ""}, "initialize": {"public": "", "params": [{"type": "string|HTML Element", "name": "stateField", "description": " <input type=\"hidden\"> used\nto store application states. Must be in the static markup."}, {"type": "string|HTML Element", "name": "histFrame", "description": " IFrame used to store\nthe history (only required on Internet Explorer)"}], "description": "Initializes the Browser History Manager. Call this method\nfrom a script block located right after the opening body tag.", "guessedname": "initialize", "guessedtype": "function"}, "_storeStates": {"description": "Stores all the registered modules' initial state and current state.\nOn Safari, we also store all the fully qualified states visited by\nthe application within a single browser session. The storage takes\nplace in the form field specified during initialization.", "private": ""}, "getQueryStringParameter": {"return": {"type": "string", "description": "The value of the specified parameter, or null."}, "description": "Returns the value of the specified query string parameter.\nThis method is not used internally by the Browser History Manager.\nHowever, it is provided here as a helper since many applications\nusing the Browser History Manager will want to read the value of\nurl parameters to initialize themselves.", "params": [{"type": "string", "name": "paramName", "description": " Name of the parameter we want to look up."}, {"type": "string", "name": "queryString", "description": " Optional URL to look at. If not specified,\nthis method uses the URL in the address bar."}], "guessedname": "getQueryStringParameter", "guessedtype": "function", "public": ""}, "_getHash": {"return": {"type": "string", "description": "The hash portion of the document's location"}, "description": "location.hash is a bit buggy on Opera. I have seen instances where\nnavigating the history using the back\/forward buttons, and hence\nchanging the URL, would not change location.hash. That's ok, the\nimplementation of an equivalent is trivial.", "private": ""}, "multiNavigate": {"return": {"type": "boolean", "description": "Indicates whether the new state was successfully added to the history."}, "description": "Call this method when you want to store a new entry in the browser's history.", "params": [{"type": "object", "name": "states", "description": " Associative array of module-state pairs to set simultaneously."}], "guessedname": "multiNavigate", "guessedtype": "function", "public": ""}}, "file": "history.js", "guessedtype": "function", "shortname": "History", "properties": {"_histFrame": {"description": "Our hidden IFrame used to store the browsing history.", "default": "null", "private": "", "guessedname": "_histFrame", "guessedtype": "property", "type": "HTMLIFrameElement"}, "_initialized": {"description": "Flag used to tell whether YAHOO.util.History.initialize has been called.", "default": "false", "private": "", "guessedname": "_initialized", "guessedtype": "property", "type": "boolean"}, "_stateField": {"description": "INPUT field (with type=\"hidden\" or type=\"text\") or TEXTAREA.\nThis field keeps the value of the initial state, current state\nthe list of all states across pages within a single browser session.", "default": "null", "private": "", "guessedname": "_stateField", "guessedtype": "property", "type": "HTMLInputElement|HTMLTextAreaElement"}, "_modules": {"description": "List of registered modules.", "default": "[]", "private": "", "guessedname": "_modules", "guessedtype": "property", "type": "array"}, "_fqstates": {"description": "List of fully qualified states. This is used only by Safari.", "default": "[]", "private": "", "guessedname": "_fqstates", "guessedtype": "property", "type": "array"}}, "description": "The History class provides the ability to use the back\/forward navigation\nbuttons in a DHTML application. It also allows a DHTML application to\nbe bookmarked in a specific state."}, "YAHOO.widget.BarSeries": {"name": "YAHOO.widget.BarSeries", "constructors": [{"description": "BarSeries class for the YUI Charts widget."}], "namespace": "YAHOO.widget", "module": "charts", "guessedname": "BarSeries", "file": "Series.js", "guessedtype": "function", "shortname": "BarSeries", "description": "BarSeries class for the YUI Charts widget."}, "YAHOO.tool.TestLogger": {"name": "YAHOO.tool.TestLogger", "constructors": [{"params": [{"type": "HTMLElement", "name": "element", "description": " (Optional) The element to create the logger in."}, {"type": "Object", "name": "config", "description": " (Optional) Configuration options for the logger."}], "description": "Displays test execution progress and results, providing filters based on\ndifferent key events."}], "namespace": "YAHOO.tool", "module": "yuitest", "guessedname": "TestLogger", "methods": {"_handleTestRunnerEvent": {"return": {"type": "Void", "description": ""}, "description": "Handles all TestRunner events, outputting appropriate data into the console.", "private": "", "params": [{"type": "Object", "name": "data", "description": " The event data object."}], "guessedname": "_handleTestRunnerEvent", "guessedtype": "function"}, "formatMsg": {"return": {"type": "String", "description": "HTML-formatted message for output to console."}, "description": "Formats message string to HTML for output to console.", "private": "", "params": [{"type": "Object", "name": "oLogMsg", "description": "  Log message object."}], "guessedname": "formatMsg", "guessedtype": "function"}, "clearTestRunner": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Clears the reference to the TestRunner from previous operations. This \nunsubscribes all events and removes the object reference.", "guessedname": "clearTestRunner", "guessedtype": "function"}, "setTestRunner": {"return": {"type": "Void", "description": ""}, "description": "Sets the source test runner that the logger should monitor.", "static": "", "guessedname": "setTestRunner", "guessedtype": "function", "params": [{"type": "YAHOO.tool.TestRunner", "name": "testRunner", "description": " The TestRunner to observe."}]}}, "file": "TestLogger.js", "guessedtype": "function", "shortname": "TestLogger", "description": "Displays test execution progress and results, providing filters based on\ndifferent key events."}, "YAHOO.tool.TestManager": {"name": "YAHOO.tool.TestManager", "namespace": "YAHOO.tool", "module": "yuitest", "events": {"testmanagerbegin": {"static": "", "description": "Fires when the test manager starts running all test pages"}, "testmanagercomplete": {"static": "", "params": [{"type": " pages_passed: int, pages_failed: int, tests_passed: int\ntests_failed: int, passed: string[], failed: string[],\npage_results: {} ", "name": "obj", "description": ""}], "description": "Fires when the test manager finishes running all test pages.  External\ntest runners should subscribe to this event in order to get the\naggregated test results."}, "testpagecomplete": {"static": "", "params": [{"type": "page: string, results: object", "name": "obj", "description": "  the name of the\npage that was loaded, and the test suite results"}], "description": "Fires when a test page is complete"}, "testpagebegin": {"static": "", "params": [{"type": "string", "name": "curPage", "description": "  the page being loaded"}], "description": "Fires when loading a test page"}}, "guessedname": "TestManager", "methods": {"load": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Signals that a test page has been loaded. This should be called from\nwithin the test page itself to notify the TestManager that it is ready.", "guessedname": "load", "guessedtype": "function"}, "_run": {"return": {"type": "Void", "description": ""}, "description": "Loads the next test page into the iframe.", "private": "", "static": "", "guessedname": "_run", "guessedtype": "function"}, "stop": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Stops the execution of tests.", "guessedname": "stop", "guessedtype": "function"}, "setPages": {"return": {"type": "Void", "description": ""}, "description": "Sets the pages to be loaded.", "static": "", "guessedname": "setPages", "guessedtype": "function", "params": [{"type": "String[]", "name": "pages", "description": " An array of URLs to load."}]}, "start": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Begins the process of running the tests.", "guessedname": "start", "guessedtype": "function"}, "_processResults": {"return": {"type": "Void", "description": ""}, "description": "Processes the results of a test page run, outputting log messages\nfor failed tests.", "private": "", "static": "", "guessedname": "_processResults", "guessedtype": "function"}, "_handleTestRunnerComplete": {"return": {"type": "Void", "description": ""}, "description": "Handles TestRunner.COMPLETE_EVENT, storing the results and beginning\nthe loop again.", "private": "", "static": "", "guessedname": "_handleTestRunnerComplete", "guessedtype": "function", "params": [{"type": "Object", "name": "data", "description": " Data about the event."}]}}, "static": "", "file": "TestManager.js", "guessedtype": "property", "shortname": "TestManager", "properties": {"_pages": {"type": "String[]", "static": "", "description": "Array of pages to load.", "private": ""}, "TEST_MANAGER_COMPLETE_EVENT": {"static": "", "type": "string", "description": "Constant for the testmanagercomplete custom event", "final": ""}, "_timeoutId": {"type": "int", "static": "", "description": "The timeout ID for the next iteration through the tests.", "private": ""}, "_logger": {"description": "The logger used to output results from the various tests.", "private": "", "static": "", "guessedname": "_logger", "guessedtype": "property", "type": "YAHOO.tool.TestLogger"}, "TEST_PAGE_BEGIN_EVENT": {"static": "", "type": "string", "description": "Constant for the testpagebegin custom event", "final": ""}, "TEST_PAGE_COMPLETE_EVENT": {"static": "", "type": "string", "description": "Constant for the testpagecomplete custom event", "final": ""}, "_curPage": {"type": "String", "static": "", "description": "The URL of the page currently being executed.", "private": ""}, "_results": {"description": "Aggregated results", "private": "", "static": "", "guessedname": "_results", "guessedtype": "property", "type": "Object"}, "TEST_MANAGER_BEGIN_EVENT": {"static": "", "type": "string", "description": "Constant for the testmanagerbegin custom event", "final": ""}, "_frame": {"type": "Window", "static": "", "description": "The frame used to load and run tests.", "private": ""}}, "description": "Runs pages containing test suite definitions."}, "YAHOO.util.Point": {"name": "YAHOO.util.Point", "constructors": [{"params": [{"type": "Int", "name": "x", "description": " The X position of the point"}, {"type": "Int", "name": "y", "description": " The Y position of the point"}], "description": "A point is a region that is special in that it represents a single point on \nthe grid."}], "namespace": "YAHOO.util", "module": "dom", "guessedname": "Point", "extends": "YAHOO.util.Region", "superclass": "YAHOO.util.Region", "file": "Region.js", "guessedtype": "function", "shortname": "Point", "properties": {"y": {"type": "Int", "description": "The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Int", "description": "The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)", "guessedname": "x", "guessedtype": "property"}}, "description": "A point is a region that is special in that it represents a single point on \nthe grid."}, "YAHOO.widget.Tooltip": {"name": "YAHOO.widget.Tooltip", "configs": {"container": {"default": "document.body", "type": "HTMLElement\/String", "description": "Specifies the container element that the Tooltip's markup \nshould be rendered into."}, "width": {"default": "null", "type": "String", "description": "String representing the width of the Tooltip.  <em>Please note:\n<\/em> As of version 2.3 if either no value or a value of \"auto\" \nis specified, and the Toolip's \"container\" configuration property\nis set to something other than <code>document.body<\/code> or \nits \"context\" element resides outside the immediately visible \nportion of the document, the width of the Tooltip will be \ncalculated based on the offsetWidth of its root HTML and set just \nbefore it is made visible.  The original value will be \nrestored when the Tooltip is hidden. This ensures the Tooltip is \nrendered at a usable width.  For more information see \nSourceForge bug #1685496 and SourceForge \nbug #1735423."}, "text": {"default": "null", "type": "String", "description": "Specifies the Tooltip's text."}, "showdelay": {"default": "200", "type": "Number", "description": "The number of milliseconds to wait before showing a Tooltip \non mouseover."}, "preventoverlap": {"default": "true", "type": "Boolean", "description": "Specifies whether the Tooltip should be kept from overlapping \nits context element."}, "context": {"default": "null", "type": "HTMLElement[]\/String[]", "description": "Specifies the element or elements that the Tooltip should be \nanchored to on mouseover."}, "autodismissdelay": {"default": "5000", "type": "Number", "description": "The number of milliseconds to wait before automatically \ndismissing a Tooltip after the mouse has been resting on the \ncontext element."}, "hidedelay": {"default": "250", "type": "Number", "description": "The number of milliseconds to wait before hiding a Tooltip \non mouseover."}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": " The element ID representing the Tooltip <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Tooltip"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal containing \nthe configuration that should be set for this Overlay. See configuration \ndocumentation for more details."}], "description": "Tooltip is an implementation of Overlay that behaves like an OS tooltip, \ndisplaying when the user mouses over a particular element, and \ndisappearing on mouse out."}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "Tooltip", "methods": {"initDefaultConfig": {"description": "Initializes the class's configurable properties which can be \nchanged using the Overlay's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "onRender": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event  \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event \nwas fired."}], "description": "\"render\" event handler for the Tooltip.", "guessedname": "onRender", "guessedtype": "function"}, "doShow": {"return": {"type": "Number", "description": "The process ID of the timeout function associated \nwith doShow"}, "params": [{"type": "DOMEvent", "name": "e", "description": " The current DOM event"}], "description": "Processes the showing of the Tooltip by setting the timeout delay \nand offset of the Tooltip.", "guessedname": "doShow", "guessedtype": "function"}, "onContextMouseOver": {"params": [{"type": "DOMEvent", "name": "e", "description": " The current DOM event"}, {"type": "Object", "name": "obj", "description": " The object argument"}], "description": "The default event handler fired when the user mouses over the \ncontext element.", "guessedname": "onContextMouseOver", "guessedtype": "function"}, "_removeEventListeners": {"protected": "", "description": "Removes all of the DOM event handlers from the HTML\nelement(s) that trigger the display of the tooltip.", "guessedname": "_removeEventListeners", "guessedtype": "function"}, "doHide": {"description": "Sets the timeout for the auto-dismiss delay, which by default is 5 \nseconds, meaning that a tooltip will automatically dismiss itself \nafter 5 seconds of being displayed.", "guessedname": "doHide", "guessedtype": "function"}, "onContextMouseOut": {"params": [{"type": "DOMEvent", "name": "e", "description": " The current DOM event"}, {"type": "Object", "name": "obj", "description": " The object argument"}], "description": "The default event handler fired when the user mouses out of \nthe context element.", "guessedname": "onContextMouseOut", "guessedtype": "function"}, "configContainer": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For \nconfiguration handlers, args[0] will equal the newly applied value \nfor the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers,\nthis will usually equal the owner."}], "description": "The default event handler fired when the \"container\" property \nis changed.", "guessedname": "configContainer", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": " The element ID representing the Tooltip <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": " The element representing the Tooltip"}, {"type": "Object", "name": "userConfig", "description": " The configuration object literal \ncontaining the configuration that should be set for this Tooltip. \nSee configuration documentation for more details."}], "description": "The Tooltip initialization method. This method is automatically \ncalled by the constructor. A Tooltip is automatically rendered by \nthe init method, and it also is set to be invisible by default, \nand constrained to viewport by default as well.", "guessedname": "init", "guessedtype": "function"}, "onContextMouseMove": {"params": [{"type": "DOMEvent", "name": "e", "description": " The current DOM event"}, {"type": "Object", "name": "obj", "description": " The object argument"}], "description": "The default event handler fired when the user moves the mouse while \nover the context element.", "guessedname": "onContextMouseMove", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers, \nthis will usually equal the owner."}], "description": "The default event handler fired when the \"text\" property is changed.", "guessedname": "configText", "guessedtype": "function"}, "preventOverlay": {"params": [{"type": "Number", "name": "pageX", "description": " The x coordinate position of the mouse pointer"}, {"type": "Number", "name": "pageY", "description": " The y coordinate position of the mouse pointer"}], "description": "Fired when the Tooltip is moved, this event handler is used to \nprevent the Tooltip from overlapping with its context element.", "guessedname": "preventOverlap", "guessedtype": "function"}, "destroy": {"description": "Removes the Tooltip element from the DOM and sets all child \nelements to null.", "guessedname": "destroy", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Tooltip"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "configContext": {"params": [{"type": "String", "name": "type", "description": " The CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": " The CustomEvent arguments. For configuration \nhandlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": " The scope object. For configuration handlers,\nthis will usually equal the owner."}], "description": "The default event handler fired when the \"context\" property \nis changed.", "guessedname": "configContext", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "Tooltip.js", "guessedtype": "function", "shortname": "Tooltip", "properties": {"YAHOO.widget.Tooltip.CSS_TOOLTIP": {"description": "Constant representing the Tooltip CSS class", "static": "", "guessedname": "CSS_TOOLTIP", "guessedtype": "property", "type": "String", "final": ""}, "showProcId": {"type": "int", "description": "The unique process ID associated with the thread responsible \nfor showing the Tooltip.", "guessedname": "showProcId", "guessedtype": "property"}, "DEFAULT_CONFIG": {"description": "Constant representing the Tooltip's configuration properties", "private": "", "guessedname": "DEFAULT_CONFIG", "guessedtype": "property", "type": "Object", "final": ""}}, "description": "Tooltip is an implementation of Overlay that behaves like an OS tooltip, \ndisplaying when the user mouses over a particular element, and \ndisappearing on mouse out."}}, "version": "2.4.1", "modules": {"dragdrop": {"name": "dragdrop", "title": "Drag and Drop", "classlist": ["YAHOO.util.DragDrop", "YAHOO.util.DragDropMgr", "YAHOO.util.DragDropMgr.ElementWrapper", "YAHOO.util.DD", "YAHOO.util.DDProxy", "YAHOO.util.DDTarget"], "filelist": ["DragDrop.js", "DragDropMgr.js", "DD.js", "DDProxy.js", "DDTarget.js"], "requires": "yahoo,dom,event", "description": "The drag and drop utility provides a framework for building drag and drop\napplications.  In addition to enabling drag and drop for specific elements,\nthe drag and drop elements are tracked by the manager class, and the\ninteractions between the various elements are tracked during the drag and\nthe implementing code is notified about these important moments."}, "number": {"name": "number", "title": "Number Utility", "classlist": ["YAHOO.util.Number"], "filelist": [], "beta": "", "requires": "datasource", "description": "The Number utility provides helper functions to deal with data of type Number."}, "calendar": {"name": "calendar", "title": "Calendar", "classlist": ["YAHOO.widget.Calendar", "YAHOO.widget.Calendar_Core", "YAHOO.widget.CalendarGroup", "YAHOO.widget.Calendar2up", "YAHOO.widget.CalendarNavigator", "YAHOO.widget.DateMath"], "filelist": ["Calendar.js", "CalendarGroup.js", "CalendarNavigator.js", "DateMath.js"], "requires": "yahoo,dom,event", "description": "The Calendar component is a UI control that enables users to choose one or more dates from a graphical calendar presented in a one-month or\nmulti-month interface. Calendars are generated entirely via script and can be navigated without any page refreshes."}, "profiler": {"classlist": ["YAHOO.tool.Profiler"], "requires": "yahoo", "name": "profiler", "filelist": ["Profiler.js"], "description": "The YUI JavaScript profiler."}, "event": {"name": "event", "title": "Event Utility", "classlist": ["YAHOO.util.CustomEvent", "YAHOO.util.Subscriber", "YAHOO.util.Event", "YAHOO.util.EventProvider", "YAHOO.util.KeyListener"], "filelist": ["CustomEvent.js", "Event.js", "EventProvider.js", "KeyListener.js"], "requires": "yahoo", "description": "The Event Utility provides utilities for managing DOM Events and tools\nfor building event systems"}, "container": {"name": "container", "title": "Container", "classlist": ["YAHOO.util.Config", "YAHOO.widget.ContainerEffect", "YAHOO.widget.Dialog", "YAHOO.widget.Module", "YAHOO.widget.Overlay", "YAHOO.widget.OverlayManager", "YAHOO.widget.Panel", "YAHOO.widget.SimpleDialog", "YAHOO.widget.Tooltip"], "filelist": ["Config.js", "ContainerEffect.js", "Dialog.js", "Module.js", "Overlay.js", "OverlayManager.js", "Panel.js", "SimpleDialog.js", "Tooltip.js"], "optional": "dragdrop, animation, button", "requires": "yahoo, dom, event", "description": "The Container family of components is designed to enable developers to \ncreate different kinds of content-containing modules on the web. Module \nand Overlay are the most basic containers, and they can be used directly \nor extended to build custom containers. Also part of the Container family \nare four UI controls that extend Module and Overlay: Tooltip, Panel, \nDialog, and SimpleDialog."}, "menu": {"name": "menu", "title": "Menu", "classlist": ["YAHOO.widget.ContextMenu", "YAHOO.widget.ContextMenuItem", "YAHOO.widget.Menu", "YAHOO.widget.MenuBar", "YAHOO.widget.MenuBarItem", "YAHOO.widget.MenuItem", "YAHOO.widget.MenuManager"], "filelist": ["contextmenu.js", "contextmenuitem.js", "menu.js", "menubar.js", "menubaritem.js", "menuitem.js", "menumanager.js"], "requires": "Event, Dom, Container", "description": "<p>The Menu family of components features a collection of \ncontrols that make it easy to add menus to your website or web application.  \nWith the Menu Controls you can create website fly-out menus, customized \ncontext menus, or application-style menu bars with just a small amount of \nscripting.<\/p><p>The Menu family of controls features:<\/p>\n<ul>\n<li>Keyboard and mouse navigation.<\/li>\n<li>A rich event model that provides access to all of a menu's \ninteresting moments.<\/li>\n<li>Support for \n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Progressive_Enhancement\">Progressive\nEnhancement<\/a>; Menus can be created from simple, \nsemantic markup on the page or purely through JavaScript.<\/li>\n<\/ul>"}, "charts": {"name": "charts", "title": "Charts Widget", "classlist": ["YAHOO.widget.Axis", "YAHOO.widget.CartesianChart", "YAHOO.widget.CategoryAxis", "YAHOO.widget.Chart", "YAHOO.widget.LineChart", "YAHOO.widget.ColumnChart", "YAHOO.widget.BarChart", "YAHOO.widget.FlashAdapter", "YAHOO.widget.NumericAxis", "YAHOO.widget.PieChart", "YAHOO.widget.Series", "YAHOO.widget.CartesianSeries", "YAHOO.widget.ColumnSeries", "YAHOO.widget.LineSeries", "YAHOO.widget.BarSeries", "YAHOO.widget.PieSeries", "YAHOO.widget.TimeAxis"], "filelist": ["Axis.js", "CartesianChart.js", "CategoryAxis.js", "Chart.js", "ChartTypes.js", "FlashAdapter.js", "NumericAxis.js", "PieChart.js", "Series.js", "swfobject.js", "TimeAxis.js"], "beta": "", "requires": "yahoo, dom, event, datasource", "description": "The Charts widget provides a Flash control for displaying data\ngraphically by series across A-grade browsers with Flash Player installed."}, "json": {"classlist": ["YAHOO.lang.JSON"], "name": "json", "filelist": ["JSON.js"], "description": "Provides methods to parse JSON strings and convert objects to JSON strings."}, "animation": {"classlist": ["YAHOO.util.Anim", "YAHOO.util.AnimMgr", "YAHOO.util.Bezier", "YAHOO.util.ColorAnim", "YAHOO.util.Easing", "YAHOO.util.Motion", "YAHOO.util.Scroll"], "requires": "yahoo, event, dom", "name": "animation", "filelist": ["Anim.js", "AnimMgr.js", "Bezier.js", "ColorAnim.js", "Easing.js", "Motion.js", "Scroll.js"], "description": "The animation module provides allows effects to be added to HTMLElements."}, "editor": {"name": "editor", "classlist": ["YAHOO.widget.Editor", "YAHOO.widget.EditorWindow", "YAHOO.widget.SimpleEditor", "YAHOO.widget.EditorInfo", "YAHOO.widget.ToolbarButtonAdvanced", "YAHOO.widget.ToolbarButton", "YAHOO.widget.Toolbar"], "requires": "yahoo, dom, element, event, container_core, simpleeditor", "filelist": ["editor.js", "simple-editor.js", "toolbar-button.js", "toolbar.js"], "beta": "", "optional": "dragdrop, animation, menu, button", "description": "<p>The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.<\/p>"}, "logger": {"name": "logger", "title": "Logger Widget", "classlist": ["YAHOO.widget.Logger", "YAHOO.widget.LogMsg", "YAHOO.widget.LogReader", "YAHOO.widget.LogWriter"], "filelist": ["Logger.js", "LogMsg.js", "LogReader.js", "LogWriter.js"], "optional": "dragdrop", "requires": "yahoo, event, dom", "description": "The Logger widget provides a simple way to read or write log messages in\r\nJavaScript code. Integration with the YUI Library's debug builds allow\r\nimplementers to access under-the-hood events, errors, and debugging messages.\r\nOutput may be read through a LogReader console and\/or output to a browser\r\nconsole."}, "datasource": {"name": "datasource", "title": "DataSource Utility", "classlist": ["YAHOO.util.DataSource"], "requires": "yahoo, event", "filelist": ["DataSource.js"], "beta": "", "optional": "connection", "description": "The DataSource utility provides a common configurable interface for widgets\nto access a variety of data, from JavaScript arrays to online servers over\nXHR."}, "colorpicker": {"classlist": ["YAHOO.util.Color", "YAHOO.widget.ColorPicker"], "requires": "yahoo, dom, event, element, slider", "name": "colorpicker", "filelist": ["Color.js", "ColorPicker.js"], "description": "The colorpicker module provides a widget for selecting colors"}, "get": {"classlist": ["YAHOO.util.Get"], "requires": "yahoo", "name": "get", "filelist": ["Get.js"], "description": "Provides a mechanism to fetch remote resources and\ninsert them into a document"}, "yuitest": {"classlist": ["YAHOO.util.ArrayAssert", "YAHOO.util.Assert", "YAHOO.util.AssertionError", "YAHOO.util.ComparisonFailure", "YAHOO.util.UnexpectedValue", "YAHOO.util.ShouldFail", "YAHOO.util.ShouldError", "YAHOO.util.UnexpectedError", "YAHOO.util.DateAssert", "YAHOO.util.ObjectAssert", "YAHOO.tool.TestCase", "YAHOO.tool.TestCase.Wait", "YAHOO.tool.TestLogger", "YAHOO.tool.TestManager", "YAHOO.tool.TestRunner", "YAHOO.tool.TestNode", "YAHOO.tool.TestSuite", "YAHOO.util.UserAction"], "requires": "yahoo,dom,event,logger", "name": "yuitest", "filelist": ["ArrayAssert.js", "Assert.js", "DateAssert.js", "ObjectAssert.js", "TestCase.js", "TestLogger.js", "TestManager.js", "TestRunner.js", "TestSuite.js", "UserAction.js"], "description": "The YUI test tool"}, "yahoo": {"classlist": ["YAHOO.env", "YAHOO.env.ua", "YAHOO.lang", "YAHOO_config", "YAHOO"], "title": "YAHOO Global", "name": "yahoo", "filelist": ["Env.js", "Lang.js", "YAHOO.js"], "description": "The YAHOO object is the single global object used by YUI Library.  It\ncontains utility function for setting up namespaces, inheritance, and\nlogging.  YAHOO.util, YAHOO.widget, and YAHOO.example are namespaces\ncreated automatically for and used by the library."}, "selector": {"name": "selector", "title": "Selector Utility", "classlist": ["YAHOO.util.Selector"], "filelist": ["Selector.js"], "requires": "yahoo, dom", "description": "The selector module provides helper methods allowing CSS3 Selectors to be used with DOM elements."}, "slider": {"name": "slider", "title": "Slider Widget", "classlist": ["YAHOO.widget.Slider", "YAHOO.widget.SliderThumb"], "requires": "yahoo,dom,dragdrop,event", "filelist": ["Slider.js", "SliderThumb.js"], "optional": "animation", "description": "The Slider component is a UI control that enables the user to adjust \nvalues in a finite range along one or two axes. Typically, the Slider \ncontrol is used in a web application as a rich, visual replacement \nfor an input box that takes a number as input. The Slider control can \nalso easily accommodate a second dimension, providing x,y output for \na selection point chosen from a rectangular region."}, "date": {"name": "date", "title": "Date Utility", "classlist": ["YAHOO.util.Date"], "filelist": [], "beta": "", "requires": "datasource", "description": "The Date utility provides helper functions to deal with data of type Date."}, "datatable": {"name": "datatable", "title": "DataTable Widget", "classlist": ["YAHOO.widget.ColumnSet", "YAHOO.widget.Column", "YAHOO.util.Sort", "YAHOO.util.ColumnResizer", "YAHOO.widget.DataTable", "YAHOO.widget.RecordSet", "YAHOO.widget.Record"], "filelist": ["ColumnSet.js", "DataTable.js", "RecordSet.js"], "beta": "", "optional": "dragdrop", "requires": "yahoo, dom, event, datasource", "description": "The DataTable widget provides a progressively enhanced DHTML control for\ndisplaying tabular data across A-grade browsers."}, "yuiloader": {"classlist": ["YAHOO.util.YUILoader"], "name": "yuiloader", "filelist": ["yuiloader.js"], "description": "Provides dynamic loading for the YUI library.  It includes the dependency\ninfo for the library, and will automatically pull in dependencies for\nthe modules requested.  It supports rollup files (such as utilities.js\nand yahoo-dom-event.js), and will automatically use these when\nappropriate in order to minimize the number of http connections\nrequired to load all of the dependencies."}, "dom": {"classlist": ["YAHOO.util.Dom", "YAHOO.util.Region", "YAHOO.util.Point"], "name": "dom", "filelist": ["Dom.js", "Region.js"], "description": "The dom module provides helper methods for manipulating Dom elements."}, "tabview": {"classlist": ["YAHOO.widget.Tab", "YAHOO.widget.TabView"], "requires": "yahoo, dom, event, element", "name": "tabview", "filelist": ["Tab.js", "TabView.js"], "description": "The tabview module provides a widget for managing content bound to tabs."}, "button": {"name": "button", "title": "Button", "classlist": ["YAHOO.widget.Button", "YAHOO.widget.ButtonGroup"], "requires": "yahoo, dom, element, event", "filelist": ["button.js", "buttongroup.js"], "optional": "container, menu", "description": "<p>The Button Control enables the creation of rich, graphical \nbuttons that function like traditional HTML form buttons.  <em>Unlike<\/em> \ntradition HTML form buttons, buttons created with the Button Control can have \na label that is different from its value.  With the inclusion of the optional \n<a href=\"module_menu.html\">Menu Control<\/a>, the Button Control can also be\nused to create menu buttons and split buttons, controls that are not \navailable natively in HTML.  The Button Control can also be thought of as a \nway to create more visually engaging implementations of the browser's \ndefault radio-button and check-box controls.<\/p>\n<p>The Button Control supports the following types:<\/p>\n<dl>\n<dt>push<\/dt>\n<dd>Basic push button that can execute a user-specified command when \npressed.<\/dd>\n<dt>link<\/dt>\n<dd>Navigates to a specified url when pressed.<\/dd>\n<dt>submit<\/dt>\n<dd>Submits the parent form when pressed.<\/dd>\n<dt>reset<\/dt>\n<dd>Resets the parent form when pressed.<\/dd>\n<dt>checkbox<\/dt>\n<dd>Maintains a \"checked\" state that can be toggled on and off.<\/dd>\n<dt>radio<\/dt>\n<dd>Maintains a \"checked\" state that can be toggled on and off.  Use with \nthe ButtonGroup class to create a set of controls that are mutually \nexclusive; checking one button in the set will uncheck all others in \nthe group.<\/dd>\n<dt>menu<\/dt>\n<dd>When pressed will show\/hide a menu.<\/dd>\n<dt>split<\/dt>\n<dd>Can execute a user-specified command or display a menu when pressed.<\/dd>\n<\/dl>"}, "element": {"name": "element", "classlist": ["YAHOO.util.Attribute", "YAHOO.util.AttributeProvider", "YAHOO.util.Element"], "filelist": ["Attribute.js", "AttributeProvider.js", "Element.js"], "beta": "", "requires": "yahoo, dom, event", "description": "Element provides an wrapper object to simplify adding\nevent listeners, using dom methods, and managing attributes."}, "autocomplete": {"name": "autocomplete", "title": "AutoComplete Widget", "classlist": ["YAHOO.widget.AutoComplete", "YAHOO.widget.DataSource", "YAHOO.widget.DS_XHR", "YAHOO.widget.DS_ScriptNode", "YAHOO.widget.DS_JSFunction", "YAHOO.widget.DS_JSArray"], "filelist": ["AutoComplete.js", "DataSource.js"], "optional": "animation, connection", "requires": "yahoo, dom, event, datasource", "description": "The AutoComplete control provides the front-end logic for text-entry suggestion and\ncompletion functionality."}, "connection": {"classlist": ["YAHOO.util.Connect"], "requires": "yahoo", "name": "connection", "filelist": ["connection.js"], "description": "The Connection Manager provides a simplified interface to the XMLHttpRequest\nobject.  It handles cross-browser instantiantion of XMLHttpRequest, negotiates the\ninteractive states and server response, returning the results to a pre-defined\ncallback you create."}, "imageloader": {"classlist": ["YAHOO.util.ImageLoader.group", "YAHOO.util.ImageLoader.imgObj", "YAHOO.util.ImageLoader.bgImgObj", "YAHOO.util.ImageLoader.srcImgObj", "YAHOO.util.ImageLoader.pngBgImgObj"], "beta": "", "name": "imageloader", "filelist": ["ImageLoader.js"], "description": "The image loader is a framework to dynamically load images\naccording to certain triggers, enabling faster load times\nand a more responsive UI."}, "treeview": {"name": "treeview", "title": "TreeView Widget", "classlist": ["YAHOO.widget.HTMLNode", "YAHOO.widget.MenuNode", "YAHOO.widget.Node", "YAHOO.widget.RootNode", "YAHOO.widget.TextNode", "YAHOO.widget.TreeView", "YAHOO.widget.TVAnim", "YAHOO.widget.TVFadeIn", "YAHOO.widget.TVFadeOut"], "filelist": ["HTMLNode.js", "MenuNode.js", "Node.js", "RootNode.js", "TextNode.js", "TreeView.js", "TVAnim.js", "TVFadeIn.js", "TVFadeOut.js"], "optional": "animation", "requires": "yahoo, event", "description": "The treeview widget is a generic tree building tool."}, "history": {"name": "history", "title": "Browser History Manager", "classlist": ["YAHOO.util.History"], "filelist": ["history.js"], "requires": "yahoo,event", "description": "The Browser History Manager provides the ability to use the back\/forward\nnavigation buttons in a DHTML application. It also allows a DHTML\napplication to be bookmarked in a specific state.\nThis library requires the following static markup:\n&lt;iframe id=\"yui-history-iframe\" src=\"path-to-real-asset-in-same-domain\"&gt;&lt;\/iframe&gt;\n&lt;input id=\"yui-history-field\" type=\"hidden\"&gt;"}}, "namespaces": ["YAHOO.util", "YAHOO.widget", "YAHOO.tool", "YAHOO.tool.TestCase"], "filemap": {"Module.js": {"classlist": ["YAHOO.widget.Module"], "name": "Module.js", "module": "container"}, "TextNode.js": {"classlist": ["YAHOO.widget.TextNode"], "name": "TextNode.js", "module": "treeview"}, "button.js": {"classlist": ["YAHOO.widget.Button"], "name": "button.js", "module": "button"}, "OverlayManager.js": {"classlist": ["YAHOO.widget.OverlayManager"], "name": "OverlayManager.js", "module": "container"}, "Dom.js": {"classlist": ["YAHOO.util.Dom"], "name": "Dom.js", "module": "dom"}, "JSON.js": {"classlist": ["YAHOO.lang.JSON"], "name": "JSON.js", "module": "json"}, "Motion.js": {"classlist": ["YAHOO.util.Motion"], "name": "Motion.js", "module": "animation"}, "Dialog.js": {"classlist": ["YAHOO.widget.Dialog"], "name": "Dialog.js", "module": "container"}, "DDTarget.js": {"classlist": ["YAHOO.util.DDTarget"], "name": "DDTarget.js", "module": "dragdrop"}, "Scroll.js": {"classlist": ["YAHOO.util.Scroll"], "name": "Scroll.js", "module": "animation"}, "TestCase.js": {"classlist": ["YAHOO.tool.TestCase", "YAHOO.tool.TestCase.Wait"], "name": "TestCase.js", "module": "yuitest"}, "DragDrop.js": {"classlist": ["YAHOO.util.DragDrop"], "name": "DragDrop.js", "module": "dragdrop"}, "SimpleDialog.js": {"classlist": ["YAHOO.widget.SimpleDialog"], "name": "SimpleDialog.js", "module": "container"}, "Region.js": {"classlist": ["YAHOO.util.Region", "YAHOO.util.Point"], "name": "Region.js", "module": "dom"}, "Profiler.js": {"classlist": ["YAHOO.tool.Profiler"], "name": "Profiler.js", "module": "profiler"}, "Series.js": {"classlist": ["YAHOO.widget.Series", "YAHOO.widget.CartesianSeries", "YAHOO.widget.ColumnSeries", "YAHOO.widget.LineSeries", "YAHOO.widget.BarSeries", "YAHOO.widget.PieSeries"], "name": "Series.js", "module": "charts"}, "ContainerEffect.js": {"classlist": ["YAHOO.widget.ContainerEffect"], "name": "ContainerEffect.js", "module": "container"}, "TestRunner.js": {"classlist": ["YAHOO.tool.TestRunner", "YAHOO.tool.TestNode"], "name": "TestRunner.js", "module": "yuitest"}, "contextmenu.js": {"classlist": ["YAHOO.widget.ContextMenu"], "name": "contextmenu.js", "module": "menu"}, "DataSource.js": {"classlist": ["YAHOO.util.DataSource", "YAHOO.util.Number", "YAHOO.util.Date"], "name": "DataSource.js", "module": "datasource"}, "TimeAxis.js": {"classlist": ["YAHOO.widget.TimeAxis"], "name": "TimeAxis.js", "module": "charts"}, "ObjectAssert.js": {"classlist": ["YAHOO.util.ObjectAssert"], "name": "ObjectAssert.js", "module": "yuitest"}, "ColorPicker.js": {"classlist": ["YAHOO.widget.ColorPicker"], "name": "ColorPicker.js", "module": "colorpicker"}, "Tab.js": {"classlist": ["YAHOO.widget.Tab"], "name": "Tab.js", "module": "tabview"}, "DataTable.js": {"classlist": ["YAHOO.widget.DataTable"], "name": "DataTable.js", "module": "datatable"}, "contextmenuitem.js": {"classlist": ["YAHOO.widget.ContextMenuItem"], "name": "contextmenuitem.js", "module": "menu"}, "RecordSet.js": {"classlist": ["YAHOO.widget.RecordSet", "YAHOO.widget.Record"], "name": "RecordSet.js", "module": "datatable"}, "Env.js": {"classlist": ["YAHOO.env", "YAHOO.env.ua"], "name": "Env.js", "module": "yahoo"}, "CategoryAxis.js": {"classlist": ["YAHOO.widget.CategoryAxis"], "name": "CategoryAxis.js", "module": "charts"}, "DragDropMgr.js": {"classlist": ["YAHOO.util.DragDropMgr", "YAHOO.util.DragDropMgr.ElementWrapper"], "name": "DragDropMgr.js", "module": "dragdrop"}, "TVFadeIn.js": {"classlist": ["YAHOO.widget.TVFadeIn"], "name": "TVFadeIn.js", "module": "treeview"}, "menuitem.js": {"classlist": ["YAHOO.widget.MenuItem"], "name": "menuitem.js", "module": "menu"}, "Selector.js": {"classlist": ["YAHOO.util.Selector"], "name": "Selector.js", "module": "selector"}, "ArrayAssert.js": {"classlist": ["YAHOO.util.ArrayAssert"], "name": "ArrayAssert.js", "module": "yuitest"}, "Axis.js": {"classlist": ["YAHOO.widget.Axis"], "name": "Axis.js", "module": "charts"}, "TreeView.js": {"classlist": ["YAHOO.widget.TreeView"], "name": "TreeView.js", "module": "treeview"}, "KeyListener.js": {"classlist": ["YAHOO.util.KeyListener"], "name": "KeyListener.js", "module": "event"}, "Slider.js": {"classlist": ["YAHOO.widget.Slider"], "name": "Slider.js", "module": "slider"}, "CalendarNavigator.js": {"classlist": ["YAHOO.widget.CalendarNavigator"], "name": "CalendarNavigator.js", "module": "calendar"}, "Element.js": {"classlist": ["YAHOO.util.Element"], "name": "Element.js", "module": "element"}, "Tooltip.js": {"classlist": ["YAHOO.widget.Tooltip"], "name": "Tooltip.js", "module": "container"}, "history.js": {"classlist": ["YAHOO.util.History"], "name": "history.js", "module": "history"}, "Bezier.js": {"classlist": ["YAHOO.util.Bezier"], "name": "Bezier.js", "module": "animation"}, "TabView.js": {"classlist": ["YAHOO.widget.TabView"], "name": "TabView.js", "module": "tabview"}, "Node.js": {"classlist": ["YAHOO.widget.Node"], "name": "Node.js", "module": "treeview"}, "menubar.js": {"classlist": ["YAHOO.widget.MenuBar"], "name": "menubar.js", "module": "menu"}, "menumanager.js": {"classlist": ["YAHOO.widget.MenuManager"], "name": "menumanager.js", "module": "menu"}, "swfobject.js": {"classlist": [], "name": "swfobject.js", "module": "charts"}, "yuiloader.js": {"classlist": ["YAHOO.util.YUILoader"], "name": "yuiloader.js", "module": "yuiloader"}, "buttongroup.js": {"classlist": ["YAHOO.widget.ButtonGroup"], "name": "buttongroup.js", "module": "button"}, "EventProvider.js": {"classlist": ["YAHOO.util.EventProvider"], "name": "EventProvider.js", "module": "event"}, "YAHOO.js": {"classlist": ["YAHOO_config", "YAHOO"], "name": "YAHOO.js", "module": "yahoo"}, "PieChart.js": {"classlist": ["YAHOO.widget.PieChart"], "name": "PieChart.js", "module": "charts"}, "MenuNode.js": {"classlist": ["YAHOO.widget.MenuNode"], "name": "MenuNode.js", "module": "treeview"}, "AutoComplete.js": {"classlist": ["YAHOO.widget.AutoComplete"], "name": "AutoComplete.js", "module": "autocomplete"}, "TestManager.js": {"classlist": ["YAHOO.tool.TestManager"], "name": "TestManager.js", "module": "yuitest"}, "AnimMgr.js": {"classlist": ["YAHOO.util.AnimMgr"], "name": "AnimMgr.js", "module": "animation"}, "menu.js": {"classlist": ["YAHOO.widget.Menu"], "name": "menu.js", "module": "menu"}, "DD.js": {"classlist": ["YAHOO.util.DD"], "name": "DD.js", "module": "dragdrop"}, "HTMLNode.js": {"classlist": ["YAHOO.widget.HTMLNode"], "name": "HTMLNode.js", "module": "treeview"}, "Attribute.js": {"classlist": ["YAHOO.util.Attribute"], "name": "Attribute.js", "module": "element"}, "ColorAnim.js": {"classlist": ["YAHOO.util.ColorAnim"], "name": "ColorAnim.js", "module": "animation"}, "Chart.js": {"classlist": ["YAHOO.widget.Chart"], "name": "Chart.js", "module": "charts"}, "Panel.js": {"classlist": ["YAHOO.widget.Panel"], "name": "Panel.js", "module": "container"}, "LogWriter.js": {"classlist": ["YAHOO.widget.LogWriter"], "name": "LogWriter.js", "module": "logger"}, "TestSuite.js": {"classlist": ["YAHOO.tool.TestSuite"], "name": "TestSuite.js", "module": "yuitest"}, "LogMsg.js": {"classlist": ["YAHOO.widget.LogMsg"], "name": "LogMsg.js", "module": "logger"}, "connection.js": {"classlist": ["YAHOO.util.Connect"], "name": "connection.js", "module": "connection"}, "UserAction.js": {"classlist": ["YAHOO.util.UserAction"], "name": "UserAction.js", "module": "yuitest"}, "CalendarGroup.js": {"classlist": ["YAHOO.widget.CalendarGroup", "YAHOO.widget.Calendar2up"], "name": "CalendarGroup.js", "module": "calendar"}, "Lang.js": {"classlist": ["YAHOO.lang"], "name": "Lang.js", "module": "yahoo"}, "LogReader.js": {"classlist": ["YAHOO.widget.LogReader"], "name": "LogReader.js", "module": "logger"}, "DateMath.js": {"classlist": ["YAHOO.widget.DateMath"], "name": "DateMath.js", "module": "calendar"}, "RootNode.js": {"classlist": ["YAHOO.widget.RootNode"], "name": "RootNode.js", "module": "treeview"}, "Logger.js": {"classlist": ["YAHOO.widget.Logger"], "name": "Logger.js", "module": "logger"}, "TVAnim.js": {"classlist": ["YAHOO.widget.TVAnim"], "name": "TVAnim.js", "module": "treeview"}, "SliderThumb.js": {"classlist": ["YAHOO.widget.SliderThumb"], "name": "SliderThumb.js", "module": "slider"}, "ChartTypes.js": {"classlist": ["YAHOO.widget.LineChart", "YAHOO.widget.ColumnChart", "YAHOO.widget.BarChart"], "name": "ChartTypes.js", "module": "charts"}, "TestLogger.js": {"classlist": ["YAHOO.tool.TestLogger"], "name": "TestLogger.js", "module": "yuitest"}, "Assert.js": {"classlist": ["YAHOO.util.Assert", "YAHOO.util.AssertionError", "YAHOO.util.ComparisonFailure", "YAHOO.util.UnexpectedValue", "YAHOO.util.ShouldFail", "YAHOO.util.ShouldError", "YAHOO.util.UnexpectedError"], "name": "Assert.js", "module": "yuitest"}, "ColumnSet.js": {"classlist": ["YAHOO.widget.ColumnSet", "YAHOO.widget.Column", "YAHOO.util.Sort", "YAHOO.util.ColumnResizer"], "name": "ColumnSet.js", "module": "datatable"}, "Config.js": {"classlist": ["YAHOO.util.Config"], "name": "Config.js", "module": "container"}, "Get.js": {"classlist": ["YAHOO.util.Get"], "name": "Get.js", "module": "get"}, "TVFadeOut.js": {"classlist": ["YAHOO.widget.TVFadeOut"], "name": "TVFadeOut.js", "module": "treeview"}, "CustomEvent.js": {"classlist": ["YAHOO.util.CustomEvent", "YAHOO.util.Subscriber"], "name": "CustomEvent.js", "module": "event"}, "FlashAdapter.js": {"classlist": ["YAHOO.widget.FlashAdapter"], "name": "FlashAdapter.js", "module": "charts"}, "toolbar.js": {"classlist": ["YAHOO.widget.Toolbar"], "name": "toolbar.js", "module": "editor"}, "Anim.js": {"classlist": ["YAHOO.util.Anim"], "name": "Anim.js", "module": "animation"}, "Color.js": {"classlist": ["YAHOO.util.Color"], "name": "Color.js", "module": "colorpicker"}, "simple-editor.js": {"classlist": ["YAHOO.widget.SimpleEditor", "YAHOO.widget.EditorInfo"], "name": "simple-editor.js", "module": "editor"}, "toolbar-button.js": {"classlist": ["YAHOO.widget.ToolbarButtonAdvanced", "YAHOO.widget.ToolbarButton"], "name": "toolbar-button.js", "module": "editor"}, "CartesianChart.js": {"classlist": ["YAHOO.widget.CartesianChart"], "name": "CartesianChart.js", "module": "charts"}, "Event.js": {"classlist": ["YAHOO.util.Event"], "name": "Event.js", "module": "event"}, "editor.js": {"classlist": ["YAHOO.widget.Editor", "YAHOO.widget.EditorWindow"], "name": "editor.js", "module": "editor"}, "Overlay.js": {"classlist": ["YAHOO.widget.Overlay"], "name": "Overlay.js", "module": "container"}, "AttributeProvider.js": {"classlist": ["YAHOO.util.AttributeProvider"], "name": "AttributeProvider.js", "module": "element"}, "Easing.js": {"classlist": ["YAHOO.util.Easing"], "name": "Easing.js", "module": "animation"}, "DateAssert.js": {"classlist": ["YAHOO.util.DateAssert"], "name": "DateAssert.js", "module": "yuitest"}, "menubaritem.js": {"classlist": ["YAHOO.widget.MenuBarItem"], "name": "menubaritem.js", "module": "menu"}, "DDProxy.js": {"classlist": ["YAHOO.util.DDProxy"], "name": "DDProxy.js", "module": "dragdrop"}, "Calendar.js": {"classlist": ["YAHOO.widget.Calendar", "YAHOO.widget.Calendar_Core"], "name": "Calendar.js", "module": "calendar"}, "NumericAxis.js": {"classlist": ["YAHOO.widget.NumericAxis"], "name": "NumericAxis.js", "module": "charts"}, "ImageLoader.js": {"classlist": ["YAHOO.util.ImageLoader.group", "YAHOO.util.ImageLoader.imgObj", "YAHOO.util.ImageLoader.bgImgObj", "YAHOO.util.ImageLoader.srcImgObj", "YAHOO.util.ImageLoader.pngBgImgObj"], "name": "ImageLoader.js", "module": "imageloader"}}}